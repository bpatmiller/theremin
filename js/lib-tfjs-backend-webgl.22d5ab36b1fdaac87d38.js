/*! For license information please see lib-tfjs-backend-webgl.22d5ab36b1fdaac87d38.js.LICENSE.txt */
"use strict";(self.webpackChunktheremin=self.webpackChunktheremin||[]).push([[955],{1026:(e,n,t)=>{t(5389),t(3807);var a=t(9839),r=t(5912),o=t(8577);const s={},i={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function u(e,n){if(!(e in s)){const t=function(e,n){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=null==n?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):n;return t.addEventListener("webglcontextlost",(n=>{n.preventDefault(),delete s[e]}),!1),1===e?t.getContext("webgl",i)||t.getContext("experimental-webgl",i):t.getContext("webgl2",i)}(e,n);if(null===t)return console.log("Could not get context for WebGL version",e),null;s[e]=t}const t=s[e];return null==t||t.isContextLost()?(delete s[e],u(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),s[e])}var l,c,d;function p(e,n){return[n,e]}function h(e){const n=(0,r.m)(e),t=Math.ceil(n/4);return(0,r.u)(t)}function f(e,n){return[Math.max(1,Math.ceil(n/2)),Math.max(1,Math.ceil(e/2))]}function x(e,n){const t=e;let r,o,s,i,u,l,c,d,p,h;return 2===(0,a.e)().getNumber("WEBGL_VERSION")?(r=t.R32F,o=t.R16F,s=t.RGBA16F,i=t.RGBA32F,u=t.RED,c=4,d=1,p=t.HALF_FLOAT,h=t.FLOAT,l=t.RGBA8):(r=e.RGBA,o=e.RGBA,s=e.RGBA,i=t.RGBA,u=e.RGBA,c=4,d=4,p=null!=n?n.HALF_FLOAT_OES:null,h=e.FLOAT,l=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:o,internalFormatPackedHalfFloat:s,internalFormatPackedFloat:i,textureFormatFloat:u,downloadTextureFormat:l,downloadUnpackNumChannels:c,defaultNumChannels:d,textureTypeHalfFloat:p,textureTypeFloat:h}}function m(e,n){const t=n();return(0,a.e)().getBool("DEBUG")&&function(e){const n=e.getError();if(n!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,n){switch(n){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${n}`}}(e,n))}(e),t}function g(e){return!!((0,a.e)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function b(e,n){return k(e,(()=>e.getExtension(n)),'Extension "'+n+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(l||(l={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(c||(c={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(d||(d={}));const v=/ERROR: [0-9]+:([0-9]+):/g;function C(e,n){if(m(e,(()=>e.validateProgram(n))),!1===e.getProgramParameter(n,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(n)),new Error("Shader program validation failed.")}function $(e,n,t,a,r,o,s){const i=e.getAttribLocation(n,t);return-1!==i&&(m(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,a))),m(e,(()=>e.vertexAttribPointer(i,r,e.FLOAT,!1,o,s))),m(e,(()=>e.enableVertexAttribArray(i))),!0)}function I(e,n,t){(function(e,n){const t=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,a=n+e.TEXTURE0;if(a<e.TEXTURE0||a>t)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${t}].`)})(e,t),m(e,(()=>e.activeTexture(e.TEXTURE0+t))),m(e,(()=>e.bindTexture(e.TEXTURE_2D,n)))}function w(e,n,t){m(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),m(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0)))}function y(e,n){m(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),m(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function R(e){const n=e.checkFramebufferStatus(e.FRAMEBUFFER);if(n!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,n){switch(n){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${n}`}}(e,n))}function k(e,n,t){const a=m(e,(()=>n()));if(null==a)throw new Error(t);return a}function T(e,n=2){return(0,r.m)(e.slice(0,e.length-n))}function S(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function N(e){let n=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(n=[T(e),...S(e)]),n}function E(e){return e%2==0}function O(e,n){if(e=e.slice(-2),n=n.slice(-2),(0,r.b)(e,n))return!0;if(!e.length||!n.length)return!0;if(0===e[0]||0===e[1]||0===n[0]||0===n[1])return!0;if(e.length!==n.length){const t=e.slice(-1)[0],a=n.slice(-1)[0];if(t===a)return!0;if(E(t)&&E(a)&&(1===e[0]||1===n[0]))return!0}return e[1]===n[1]&&E(e[0])&&E(n[0])}let A,F;function _(e,n){return null!=e.getExtension(n)}function D(e){try{if(null!=u(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function L(e){const n=x(e),t=e.createTexture();e.bindTexture(e.TEXTURE_2D,t),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatFloat,1,1,0,n.textureFormatFloat,n.textureTypeFloat,null);const a=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,a),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(t),e.deleteFramebuffer(a),r}function P(e,n){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&(0,r.a)("complex64"!==e.dtype,(()=>`${n} does not support complex64 tensors in the WebGL backend.`))}))}const B=(0,a.e)();function W(){let e,n,t,r,o,s,i,u,l,c;return 2===(0,a.e)().getNumber("WEBGL_VERSION")?(e="#version 300 es",n="in",t="out",r="in",o="texture",s="outputColor",i="out vec4 outputColor;",u="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",n="attribute",t="varying",r="varying",o="texture2D",s="gl_FragColor",i="",u="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:n,varyingVs:t,varyingFs:r,texture2D:o,output:s,defineOutput:i,defineSpecialNaN:u,defineSpecialInf:l,defineRound:c}}function V(e,n,t="index"){const a=(0,r.O)(n);return a.map(((n,r)=>`int ${e[r]} = ${t} / ${n}; ${r===a.length-1?`int ${e[r+1]} = ${t} - ${e[r]} * ${n}`:`index -= ${e[r]} * ${n}`};`)).join("")}function U(e,n,t="index"){const a=(0,r.O)(n);return a.map(((n,r)=>`int ${e[r]} = ${t} / outShapeStrides[${r}]; ${r===a.length-1?`int ${e[r+1]} = ${t} - ${e[r]} * outShapeStrides[${r}]`:`index -= ${e[r]} * outShapeStrides[${r}]`};`)).join("")}function G(e){const n=(0,r.O)(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${n[0]} + coords.y * ${n[1]} + coords.z;\n  }\n`}B.registerFlag("HAS_WEBGL",(()=>B.getNumber("WEBGL_VERSION")>0)),B.registerFlag("WEBGL_VERSION",(()=>D(2)?2:D(1)?1:0)),B.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),B.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===B.get("WEBGL_VERSION"))),B.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),B.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),B.registerFlag("WEBGL_PACK",(()=>B.getBool("HAS_WEBGL"))),B.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>B.getBool("WEBGL_PACK"))),B.registerFlag("WEBGL_PACK_CLIP",(()=>B.getBool("WEBGL_PACK"))),B.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>B.getBool("WEBGL_PACK"))),B.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>B.getBool("WEBGL_PACK"))),B.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>B.getBool("WEBGL_PACK"))),B.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>B.getBool("WEBGL_PACK"))),B.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>B.getBool("WEBGL_PACK"))),B.registerFlag("WEBGL_PACK_REDUCE",(()=>B.getBool("WEBGL_PACK"))),B.registerFlag("WEBGL_LAZILY_UNPACK",(()=>B.getBool("WEBGL_PACK"))),B.registerFlag("WEBGL_CONV_IM2COL",(()=>B.getBool("WEBGL_PACK"))),B.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==A){const n=u(e);A=n.getParameter(n.MAX_TEXTURE_SIZE)}return A}(B.getNumber("WEBGL_VERSION")))),B.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==F){const n=u(e);F=n.getParameter(n.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,F)}(B.getNumber("WEBGL_VERSION")))),B.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=B.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let n;const t=u(e);return n=_(t,"EXT_disjoint_timer_query_webgl2")&&2===e?2:_(t,"EXT_disjoint_timer_query")?1:0,n}(e)})),B.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>B.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!(0,a.c2)())),B.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const n=u(e);if(1===e){if(!_(n,"OES_texture_float"))return!1}else if(!_(n,"EXT_color_buffer_float"))return!1;return L(n)}(B.getNumber("WEBGL_VERSION")))),B.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!B.getBool("WEBGL_FORCE_F16_TEXTURES")&&B.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),B.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>function(e){if(0===e)return!1;const n=u(e);if(1!==e){if(_(n,"EXT_color_buffer_float"))return L(n);const e="EXT_color_buffer_half_float";if(_(n,e)){const t=n.getExtension(e);return function(e,n){const t=x(e,n),a=e.createTexture();e.bindTexture(e.TEXTURE_2D,a),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatHalfFloat,1,1,0,t.textureFormatFloat,t.textureTypeHalfFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,a,0);const o=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(a),e.deleteFramebuffer(r),o}(n,t)}return!1}return!!_(n,"OES_texture_float")&&!!_(n,"WEBGL_color_buffer_float")&&L(n)}(B.getNumber("WEBGL_VERSION")))),B.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=B.getNumber("WEBGL_VERSION"))&&null!=u(e).fenceSync;var e})),B.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>B.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),B.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),B.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>(0,a.c2)()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),B.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),B.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),B.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),B.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128));const M="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:z}=o.b;function X(e,n,t){const a=[];if(e.forEach((e=>{const n=(0,r.m)(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?a.push(`uniform float ${e.name}${n>1?`[${n}]`:""};`):(a.push(`uniform sampler2D ${e.name};`),a.push(`uniform int offset${e.name};`)),t.enableShapeUniforms){const{uniformShape:n}=ne(t.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(n.length){case 1:a.push(`uniform int ${e.name}Shape;`);break;case 2:a.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:a.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:a.push(`uniform ivec4 ${e.name}Shape;`)}a.push(`uniform ivec2 ${e.name}TexShape;`)}})),t.enableShapeUniforms){switch(n.logicalShape.length){case 1:a.push("uniform int outShape;");break;case 2:a.push("uniform ivec2 outShape;"),a.push("uniform int outShapeStrides;");break;case 3:a.push("uniform ivec3 outShape;"),a.push("uniform ivec2 outShapeStrides;");break;case 4:a.push("uniform ivec4 outShape;"),a.push("uniform ivec3 outShapeStrides;")}a.push("uniform ivec2 outTexShape;")}t.customUniforms&&t.customUniforms.forEach((e=>{a.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const o=a.join("\n"),s=e.map((e=>function(e,n,t=!1,a){let o="";o+=t?j(e,a):H(e,a);const s=e.shapeInfo.logicalShape,i=n.logicalShape;return s.length<=i.length&&(o+=t?function(e,n){const t=e.name,a=t.charAt(0).toUpperCase()+t.slice(1),o="get"+a+"AtOutCoords",s=e.shapeInfo.logicalShape.length,i=n.logicalShape.length,u=z(e.shapeInfo.logicalShape,n.logicalShape),l=ee(i),c=i-s;let d;const p=["x","y","z","w","u","v"];d=0===s?"":i<2&&u.length>=1?"coords = 0;":u.map((e=>`coords.${p[e+c]} = 0;`)).join("\n");let h="";h=i<2&&s>0?"coords":e.shapeInfo.logicalShape.map(((e,n)=>`coords.${p[n+c]}`)).join(", ");let f="return outputValue;";const x=1===(0,r.m)(e.shapeInfo.logicalShape),m=1===(0,r.m)(n.logicalShape);if(1!==s||x||m){if(x&&!m)f=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(u.length){const e=s-2,n=s-1;u.indexOf(e)>-1&&u.indexOf(n)>-1?f="return vec4(outputValue.x);":u.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":u.indexOf(n)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${o}() {\n      ${l} coords = getOutputCoords();\n      ${d}\n      vec4 outputValue = get${a}(${h});\n      ${f}\n    }\n  `}(e,n):function(e,n){const t=e.name,a=t.charAt(0).toUpperCase()+t.slice(1),o="get"+a+"AtOutCoords",s=n.texShape,i=e.shapeInfo.texShape,u=e.shapeInfo.logicalShape.length,l=n.logicalShape.length;if(!e.shapeInfo.isUniform&&u===l&&null==e.shapeInfo.flatOffset&&(0,r.b)(i,s))return`\n      float ${o}() {\n        return sampleTexture(${t}, resultUV);\n      }\n    `;const c=ee(l),d=z(e.shapeInfo.logicalShape,n.logicalShape),p=l-u;let h;const f=["x","y","z","w","u","v"];h=0===u?"":l<2&&d.length>=1?"coords = 0;":d.map((e=>`coords.${f[e+p]} = 0;`)).join("\n");let x="";return x=l<2&&u>0?"coords":e.shapeInfo.logicalShape.map(((e,n)=>`coords.${f[n+p]}`)).join(", "),`\n    float ${o}() {\n      ${c} coords = getOutputCoords();\n      ${h}\n      return get${a}(${x});\n    }\n  `}(e,n)),o}(e,n,t.packedInputs,t.enableShapeUniforms))).join("\n"),i=n.texShape,u=W(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let c,d,p=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${K}\n    ${Y}\n    ${q}\n  `}(u);return n.isPacked?(c=function(e,n,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,n,t){const a=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];return 1===a[0]?t?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${a[1]}.0);\n      }\n    `:1===a[1]?t?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${a[0]}.0);\n      }\n    `:t?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${a[0]}, ${a[1]}));\n      return 2 * (resTexRC.x * ${a[1]} + resTexRC.y);\n    }\n  `}(0,n,t);case 2:return function(e,n,t){const a=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];if((0,r.b)(e,n))return t?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${a[0]}, ${a[1]}));\n      }\n    `;const o=Math.ceil(e[1]/2);return t?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${a[0]}, ${a[1]}));\n\n      int index = resTexRC.x * ${a[1]} + resTexRC.y;\n      int r = 2 * (index / ${o});\n      int c = imod(index, ${o}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,n,t);case 3:return function(e,n,t){if(t)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const a=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)],r=Math.ceil(e[2]/2),o=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${a[0]}, ${a[1]}));\n      int index = resTexRC.x * ${a[1]} + resTexRC.y;\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,n,t);default:return function(e,n,t){if(t)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const a=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)],r=Math.ceil(e[e.length-1]/2),o=r*Math.ceil(e[e.length-2]/2);let s=o,i="",u="b, r, c";for(let n=2;n<e.length-1;n++)s*=e[e.length-n-1],i=`\n      int b${n} = index / ${s};\n      index -= b${n} * ${s};\n    `+i,u=`b${n}, `+u;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${a[0]}, ${a[1]}));\n      int index = resTexRC.x * ${a[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${u});\n    }\n  `}(e,n,t)}}(n.logicalShape,i,t.enableShapeUniforms),d=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(u)):(c=function(e,n,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,n,t){return 1===n[0]?t?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?t?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${n[0]}.0);\n      }\n    `:t?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return resTexRC.x * ${n[1]} + resTexRC.y;\n    }\n  `}(0,n,t);case 2:return function(e,n,t){return(0,r.b)(e,n)?t?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `:1===e[1]?t?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${n[0]}, ${n[1]}));\n        int index = resTexRC.x * ${n[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?t?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${n[0]}, ${n[1]}));\n        int index = resTexRC.x * ${n[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:t?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,n,t);case 3:return function(e,n,t){if(t)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${U(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`;const a=V(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      ${a}\n      return ivec3(r, c, d);\n    }\n  `}(e,n,t);case 4:return function(e,n,t){if(t)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${U(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const a=V(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      ${a}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,n,t);case 5:return function(e,n){const t=V(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${n[0]},\n                             ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${t}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,n);case 6:return function(e,n){const t=V(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${t}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,n);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(n.logicalShape,i,t.enableShapeUniforms),d=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),t.packedInputs&&(p+=Q),[p,l,d,o,c,s,t.userCode].join("\n")}function H(e,n=!1){const t=e.shapeInfo.logicalShape;switch(t.length){case 0:return function(e,n){const t=e.name,a="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${a}() {return ${t};}`;const[r,o]=e.shapeInfo.texShape;if(1===r&&1===o)return`\n      float ${a}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const s=Z(t);if(n)return`\n    float ${a}() {\n      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], ${s});\n      return sampleTexture(${t}, uv);\n    }\n  `;const[i,u]=e.shapeInfo.texShape;return`\n    float ${a}() {\n      vec2 uv = uvFromFlat(${i}, ${u}, ${s});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e,n);case 1:return function(e,n){const t=e.name,a="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${a}(int index) {\n        ${J(e)}\n      }\n    `;const r=e.shapeInfo.texShape,o=r[0],s=r[1];if(1===s&&1===o)return`\n      float ${a}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const i=Z(t);return 1===s?n?`\n      float ${a}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${t}TexShape[0]));\n        return sampleTexture(${t}, uv);\n      }\n    `:`\n      float ${a}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${o}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `:1===o?n?`\n      float ${a}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${t}TexShape[1]), 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `:`\n      float ${a}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${s}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `:n?`\n    float ${a}(int index) {\n      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], index + ${i});\n      return sampleTexture(${t}, uv);\n    }\n  `:`\n    float ${a}(int index) {\n      vec2 uv = uvFromFlat(${o}, ${s}, index + ${i});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e,n);case 2:return function(e,n){const t=e.shapeInfo.logicalShape,a=e.name,o="get"+a.charAt(0).toUpperCase()+a.slice(1),s=e.shapeInfo.texShape;if(null!=s&&(0,r.b)(t,s)){if(n)return`\n      float ${o}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `;const e=s[0];return`\n    float ${o}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${s[1]}.0, ${e}.0);\n      return sampleTexture(${a}, uv);\n    }\n  `}const{newShape:i,keptDims:u}=(0,r.A)(t),l=i;if(l.length<t.length){const t=["row","col"];return`\n      ${H(te(e,l),n)}\n      float ${o}(int row, int col) {\n        return ${o}(${ae(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${o}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${J(e)}\n      }\n    `;const c=s[0],d=s[1],p=Z(a);return 1===d?n?`\n      float ${o}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${a}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${a}TexShape[0]));\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n    float ${o}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${c}.0);\n      return sampleTexture(${a}, uv);\n    }\n  `:1===c?n?`\n      float ${o}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${a}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${a}TexShape[1]), 0.5);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n    float ${o}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${d}.0, 0.5);\n      return sampleTexture(${a}, uv);\n    }\n  `:n?`\n      float ${o}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a}Shape[1] + col + ${p};\n        vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n  float ${o}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${p};\n    vec2 uv = uvFromFlat(${c}, ${d}, index);\n    return sampleTexture(${a}, uv);\n  }\n`}(e,n);case 3:return function(e,n){const t=e.shapeInfo.logicalShape,a=e.name,o="get"+a.charAt(0).toUpperCase()+a.slice(1),s=t[1]*t[2],i=t[2],{newShape:u,keptDims:l}=(0,r.A)(t),c=u;if(c.length<t.length){const t=["row","col","depth"];return`\n        ${H(te(e,c),n)}\n        float ${o}(int row, int col, int depth) {\n          return ${o}(${ae(t,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${o}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${s}, ${i}, 1)));\n        ${J(e)}\n      }\n    `;const d=e.shapeInfo.texShape,p=d[0],h=d[1],f=e.shapeInfo.flatOffset;if(h===s&&null==f)return n?`\n      float ${o}(int row, int col, int depth) {\n        int stride1 = ${a}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n        float ${o}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${p}.0);\n          return sampleTexture(${a}, uv);\n        }\n      `;if(h===i&&null==f)return n?`\n      float ${o}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${a}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n    float ${o}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${p}.0);\n      return sampleTexture(${a}, uv);\n    }\n  `;const x=Z(a);return n?`\n    float ${o}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${a}Shape[1] * ${a}Shape[2];\n      int stride1 = ${a}Shape[2];\n      int index = row * ${s} + col * ${i} + depth + ${x};\n      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);\n      return sampleTexture(${a}, uv);\n    }\n    `:`\n      float ${o}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s} + col * ${i} + depth + ${x};\n        vec2 uv = uvFromFlat(${p}, ${h}, index);\n        return sampleTexture(${a}, uv);\n      }\n  `}(e,n);case 4:return function(e,n){const t=e.shapeInfo.logicalShape,a=e.name,o="get"+a.charAt(0).toUpperCase()+a.slice(1),s=t[3],i=t[2]*s,u=t[1]*i,{newShape:l,keptDims:c}=(0,r.A)(t);if(l.length<t.length){const t=["row","col","depth","depth2"];return`\n      ${H(te(e,l),n)}\n      float ${o}(int row, int col, int depth, int depth2) {\n        return ${o}(${ae(t,c)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${o}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${u}, ${i}, ${s}, 1)));\n        ${J(e)}\n      }\n    `;const d=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],f=p[1],x=`int stride2 = ${a}Shape[3];`,m=`int stride1 = ${a}Shape[2] * stride2;`,g=`int stride0 = ${a}Shape[1] * stride1;`;if(f===u&&null==d)return n?`\n      float ${o}(int row, int col, int depth, int depth2) {\n        ${x}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n      float ${o}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${h}.0);\n        return sampleTexture(${a}, uv);\n      }\n    `;if(f===s&&null==d)return n?`\n      float ${o}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${a}Shape[1] * ${a}Shape[2], ${a}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n      float ${o}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${h}.0);\n        return sampleTexture(${a}, uv);\n      }\n    `;const b=Z(a);return n?`\n    float ${o}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${x}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index + ${b});\n      return sampleTexture(${a}, uv);\n    }\n  `:`\n    float ${o}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${u} + col * ${i} +\n          depth * ${s} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${f}, index + ${b});\n      return sampleTexture(${a}, uv);\n    }\n  `}(e,n);case 5:return function(e){const n=e.shapeInfo.logicalShape,t=e.name,a="get"+t.charAt(0).toUpperCase()+t.slice(1),o=n[4],s=n[3]*o,i=n[2]*s,u=n[1]*i,{newShape:l,keptDims:c}=(0,r.A)(n);if(l.length<n.length){const n=["row","col","depth","depth2","depth3"];return`\n      ${H(te(e,l))}\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        return ${a}(${ae(n,c)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${u}, ${i}, ${s}, ${o})) +\n          depth3;\n        ${J(e)}\n      }\n    `;const d=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],f=p[1];if(f===u&&null==d)return`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${s}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${h}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `;if(f===o&&null==d)return`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${n[1]*n[2]*n[3]},\n               ${n[2]*n[3]}, ${n[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${h}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `;return`\n    float ${a}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${u} + col * ${i} + depth * ${s} +\n          depth2 * ${o} + depth3 + ${Z(t)};\n      vec2 uv = uvFromFlat(${h}, ${f}, index);\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 6:return function(e){const n=e.shapeInfo.logicalShape,t=e.name,a="get"+t.charAt(0).toUpperCase()+t.slice(1),{newShape:o,keptDims:s}=(0,r.A)(n);if(o.length<n.length){const n=["row","col","depth","depth2","depth3","depth4"];return`\n      ${H(te(e,o))}\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${a}(${ae(n,s)});\n      }\n    `}const i=n[5],u=n[4]*i,l=n[3]*u,c=n[2]*l,d=n[1]*c;if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${d}, ${c}, ${l}, ${u})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${J(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,f=h[0],x=h[1];if(x===d&&null==p)return`\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${c}, ${l}, ${u}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${x}.0, ${f}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `;if(x===i&&null==p)return`\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${n[1]*n[2]*n[3]*n[4]},\n               ${n[2]*n[3]*n[4]},\n               ${n[3]*n[4]},\n               ${n[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${x}.0, ${f}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `;return`\n    float ${a}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${d} + col * ${c} + depth * ${l} +\n          depth2 * ${u} + depth3 * ${i} + depth4 + ${Z(t)};\n      vec2 uv = uvFromFlat(${f}, ${x}, index);\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function j(e,n){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const n=e.name;return`\n    vec4 ${"get"+n.charAt(0).toUpperCase()+n.slice(1)}() {\n      return ${W().texture2D}(${n}, halfCR);\n    }\n  `}(e);case 1:return function(e,n){const t=e.name,a="get"+t.charAt(0).toUpperCase()+t.slice(1),r=e.shapeInfo.texShape,o=W();if(n)return`\n    vec4 ${a}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${o.texture2D}(${t}, uv);\n    }\n  `;const s=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${a}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${s[0]}, ${s[1]}, index);\n      return ${o.texture2D}(${t}, uv);\n    }\n  `}(e,n);case 2:return function(e,n){const t=e.shapeInfo.logicalShape,a=e.name,o="get"+a.charAt(0).toUpperCase()+a.slice(1),s=e.shapeInfo.texShape,i=s[0],u=s[1],l=W();if(null!=s&&(0,r.b)(t,s))return n?`\n      vec4 ${o}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);\n\n        return ${l.texture2D}(${a}, uv);\n      }\n    `:`\n      vec4 ${o}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${u}.0, ${i}.0);\n\n        return ${l.texture2D}(${a}, uv);\n      }\n    `;if(n)return`\n    vec4 ${o}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${a}TexShape[0]) / 2.0), ceil(float(${a}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${a}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${a}, uv);\n    }\n  `;const c=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return`\n    vec4 ${o}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(t[1]/2)}, ${c[0]}, ${c[1]}, row, col);\n      return ${l.texture2D}(${a}, uv);\n    }\n  `}(e,n);case 3:return function(e,n){const t=e.shapeInfo.logicalShape,a=e.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),o=e.shapeInfo.texShape,s=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];if(1===t[0]){const a=[1,2],o=["b","row","col"];return`\n        ${j(te(e,t.slice(1)),n)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${ae(o,a)});\n        }\n      `}const i=W();if(n)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${a}TexShape[0]) / 2.0), ceil(float(${a}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${a}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${a}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${a}, uv);\n    }\n  `;const u=s[0],l=s[1],c=Math.ceil(t[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${u}, ${l}, ${c*Math.ceil(t[1]/2)}, ${c}, b, row, col);\n      return ${i.texture2D}(${a}, uv);\n    }\n  `}(e,n);default:return function(e,n){const t=e.name,a="get"+t.charAt(0).toUpperCase()+t.slice(1),r=W();if(n)return`\n    vec4 ${a}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${t}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${t}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${t}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${t}, uv);\n    }\n  `;const o=e.shapeInfo.logicalShape,s=o.length,i=e.shapeInfo.texShape,u=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],l=u[0],c=u[1],d=Math.ceil(o[s-1]/2);let p=d*Math.ceil(o[s-2]/2),h="int b, int row, int col",f=`b * ${p} + (row / 2) * ${d} + (col / 2)`;for(let e=2;e<s-1;e++)h=`int b${e}, `+h,p*=o[s-e-1],f=`b${e} * ${p} + `+f;return`\n    vec4 ${a}(${h}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${l});\n      return ${r.texture2D}(${t}, uv);\n    }\n  `}(e,n)}}const K="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Y="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",q="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Q="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Z(e){return`offset${e}`}function J(e){const n=e.name,t=(0,r.m)(e.shapeInfo.logicalShape);return t<2?`return ${n};`:`\n    for (int i = 0; i < ${t}; i++) {\n      if (i == index) {\n        return ${n}[i];\n      }\n    }\n  `}function ee(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function ne(e,n,t){const{newShape:a,keptDims:o}=(0,r.A)(n),s=n.length,i=e&&3===s&&1===n[0],u=i?n.slice(1):a,l=!e&&s>1&&!(0,r.b)(n,t)&&a.length<s||i;return{useSqueezeShape:l,uniformShape:l?u:n,keptDims:o}}function te(e,n){const t=JSON.parse(JSON.stringify(e));return t.shapeInfo.logicalShape=n,t}function ae(e,n){return n.map((n=>e[n])).join(", ")}function re(e,n){if(e.length!==n.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${n.length} inputs`);e.forEach(((e,t)=>{const a=e.logicalShape,o=n[t],s=o.shape;if(!(0,r.b)(a,s))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${a} and ${s} must match`);if(e.isUniform&&o.isUniform)return;const i=e.texShape,u=o.isUniform?null:o.texData.texShape;if(!(0,r.b)(i,u))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${u} must match`)}))}function oe(e){return(0,a.e)().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class se{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=l.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=W();this.outputShape=e,this.enableShapeUniforms=oe(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?U(["r","c","d"],e):V(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class ie{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=l.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=W();this.outputShape=e,this.enableShapeUniforms=oe(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?U(["r","c","d"],e):V(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class ue{constructor(e){this.variableNames=["A"],this.outTexUsage=c.DOWNLOAD;const n=W();this.outputShape=e,this.userCode=`\n      ${M}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${n.output} = encode_float(x);\n      }\n    `}}class le{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=c.DOWNLOAD;const n=W();this.outputShape=e,this.userCode=`\n      ${M}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${n.output} = encode_float(x);\n      }\n    `}}class ce{constructor(e,n=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=W();this.outputShape=e,this.enableShapeUniforms=oe(this.outputShape.length);let a="result";n&&(a="floor(result * 255. + 0.5)"),this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":G(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${t.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${t.output} = vec4(${a}, 0., 0., 0.);\n      }\n    `}}class de{constructor(e,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=W();this.outputShape=e,this.enableShapeUniforms=oe(this.outputShape.length);let a="",r="result";n&&(r="floor(result * 255. + 0.5)");for(let n=0;n<=1;n++)for(let r=0;r<=1;r++){const o=2*n+r;a+=`\n          localCoords = coords;\n          if(localCoords[2] + ${r} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${r};\n          if (localCoords[1] + ${n} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${n};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${t.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${o}] = values[0];\n            } else if (offset == 1) {\n              result[${o}] = values[1];\n            } else if (offset == 2) {\n              result[${o}] = values[2];\n            } else {\n              result[${o}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":G(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${a}\n\n          ${t.output} = ${r};\n        }\n    `}}function pe(e){const n=W();return function(e,n){const t=k(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(m(e,(()=>e.shaderSource(t,n))),m(e,(()=>e.compileShader(t))),!1===e.getShaderParameter(t,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(t)),new Error("Failed to compile vertex shader.");return t}(e,`${n.version}\n    precision highp float;\n    ${n.attribute} vec3 clipSpacePos;\n    ${n.attribute} vec2 uv;\n    ${n.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function he(e){return function(e,n){const t=k(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return m(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,t))),m(e,(()=>e.bufferData(e.ARRAY_BUFFER,n,e.STATIC_DRAW))),t}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function fe(e){return function(e,n){const t=k(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return m(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t))),m(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,n,e.STATIC_DRAW))),t}(e,new Uint16Array([0,1,2,2,1,3]))}function xe(e,n,t,r,o,s){!function(e,n){const t=(0,a.e)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||n<=0)throw new Error(`Requested texture size [${e}x${n}] is invalid.`);if(e>t||n>t)throw new Error(`Requested texture size [${e}x${n}] greater than WebGL maximum on this browser / GPU [${t}x${t}].`)}(n,t);const i=function(e){return k(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),u=e.TEXTURE_2D;return m(e,(()=>e.bindTexture(u,i))),m(e,(()=>e.texParameteri(u,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),m(e,(()=>e.texParameteri(u,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),m(e,(()=>e.texParameteri(u,e.TEXTURE_MIN_FILTER,e.NEAREST))),m(e,(()=>e.texParameteri(u,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===(0,a.e)().getNumber("WEBGL_VERSION")?m(e,(()=>e.texImage2D(u,0,r,n,t,0,o,s,null))):m(e,(()=>e.texStorage2D(u,1,r,n,t))),m(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:i,texShape:[t,n]}}function me(e){return e.internalFormatFloat}function ge(e){return e.internalFormatHalfFloat}function be(e){return e.downloadTextureFormat}function ve(e){return e.internalFormatPackedFloat}function Ce(e){return e.internalFormatPackedHalfFloat}class $e{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const n=(0,a.e)().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,n){s[e]=n}(n,e)):this.gl=u(n);let t="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(1===(0,a.e)().getNumber("WEBGL_VERSION")){const e="OES_texture_float",n="OES_texture_half_float";if(this.textureFloatExtension=b(this.gl,e),_(this.gl,n))this.textureHalfFloatExtension=b(this.gl,n);else if((0,a.e)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(t),_(this.gl,r))this.colorBufferHalfFloatExtension=b(this.gl,r);else if((0,a.e)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(t="EXT_color_buffer_float",_(this.gl,t))this.colorBufferFloatExtension=this.gl.getExtension(t);else{if(!_(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=he(this.gl),this.indexBuffer=fe(this.gl),this.framebuffer=function(e){return k(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=x(this.gl,this.textureHalfFloatExtension)}get debug(){return(0,a.e)().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;m(e,(()=>e.finish())),m(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),m(e,(()=>e.deleteFramebuffer(this.framebuffer))),m(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),m(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),m(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,n){return this.throwIfDisposed(),function(e,n,t,a){const[r,o]=p(n,t);return xe(e,r,o,me(a),a.textureFormatFloat,e.FLOAT)}(this.gl,e,n,this.textureConfig)}createFloat16MatrixTexture(e,n){return this.throwIfDisposed(),function(e,n,t,a){const[r,o]=p(n,t);return xe(e,r,o,ge(a),a.textureFormatFloat,a.textureTypeHalfFloat)}(this.gl,e,n,this.textureConfig)}createUnsignedBytesMatrixTexture(e,n){return this.throwIfDisposed(),function(e,n,t,a){const[r,o]=p(n,t);return xe(e,r,o,be(a),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,n,this.textureConfig)}uploadPixelDataToTexture(e,n){this.throwIfDisposed(),function(e,n,t){m(e,(()=>e.bindTexture(e.TEXTURE_2D,n))),t.data instanceof Uint8Array?2===(0,a.e)().getNumber("WEBGL_VERSION")?m(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,t.width,t.height,e.RGBA,e.UNSIGNED_BYTE,t.data))):m(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,t.width,t.height,0,e.RGBA,e.UNSIGNED_BYTE,t.data))):2===(0,a.e)().getNumber("WEBGL_VERSION")?m(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,t))):m(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,t))),m(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,n)}uploadDenseMatrixToTexture(e,n,t,r){this.throwIfDisposed(),function(e,n,t,r,o,s){let i,u,l;m(e,(()=>e.bindTexture(e.TEXTURE_2D,n))),o instanceof Uint8Array?(i=new Uint8Array(t*r*4),u=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(t*r*4),u=e.FLOAT,l=s.internalFormatPackedFloat),i.set(o),2===(0,a.e)().getNumber("WEBGL_VERSION")?m(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,t,r,e.RGBA,u,i))):m(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,t,r,0,e.RGBA,u,i))),m(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,n,t,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,n){return this.throwIfDisposed(),function(e,n,t,a){const[r,o]=f(n,t);return xe(e,r,o,Ce(a),e.RGBA,a.textureTypeHalfFloat)}(this.gl,e,n,this.textureConfig)}createPackedMatrixTexture(e,n){return this.throwIfDisposed(),function(e,n,t,a){const[r,o]=f(n,t);return xe(e,r,o,ve(a),e.RGBA,e.FLOAT)}(this.gl,e,n,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(y(this.gl,this.framebuffer),this.outputTexture=null),m(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,n,t){return this.downloadMatrixDriver(e,(()=>function(e,n,t,a){const[r,o]=p(n,t),s=new Uint8Array(n*t*4);return m(e,(()=>e.readPixels(0,0,r,o,a.downloadTextureFormat,e.UNSIGNED_BYTE,s))),new Float32Array(s.buffer)}(this.gl,n,t,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,n,t,a,r,o){return function(e,n,t,a,r,o,s,i){const u=e,l=new Float32Array(function(e,n){const[t,a]=f(e,n);return t*a*4}(o,s));return u.bindBuffer(u.PIXEL_PACK_BUFFER,n),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}(this.gl,e,0,0,0,r,o,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,n){return function(e,n,t){const a=e,r=new Float32Array(t);return a.bindBuffer(a.PIXEL_PACK_BUFFER,n),a.getBufferSubData(a.PIXEL_PACK_BUFFER,0,r),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),r}(this.gl,e,n)}createBufferFromTexture(e,n,t){this.bindTextureToFrameBuffer(e);const a=function(e,n,t,a){const r=e.createBuffer();m(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const o=16*n*t;return m(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,o,e.STREAM_READ))),m(e,(()=>e.readPixels(0,0,t,n,e.RGBA,e.FLOAT,0))),m(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}(this.gl,n,t,this.textureConfig);return this.unbindTextureToFrameBuffer(),a}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let n,t;if((0,a.e)().getBool("WEBGL_FENCE_API_ENABLED")){const a=e,r=a.fenceSync(a.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),t=()=>{const e=a.clientWaitSync(r,0,0);return e===a.ALREADY_SIGNALED||e===a.CONDITION_SATISFIED},n=r}else(0,a.e)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(n=this.beginQuery(),this.endQuery(),t=()=>this.isQueryAvailable(n,(0,a.e)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):t=()=>!0;return{query:n,isFencePassed:t}}downloadMatrixFromPackedTexture(e,n,t){return this.downloadMatrixDriver(e,(()=>function(e,n,t){const a=new Float32Array(n*t*4);return m(e,(()=>e.readPixels(0,0,t,n,e.RGBA,e.FLOAT,a))),a}(this.gl,n,t)))}createProgram(e){this.throwIfDisposed();const n=this.gl;null==this.vertexShader&&(this.vertexShader=pe(n));const t=function(e){return k(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(n);return m(n,(()=>n.attachShader(t,this.vertexShader))),m(n,(()=>n.attachShader(t,e))),function(e,n){if(m(e,(()=>e.linkProgram(n))),!1===e.getProgramParameter(n,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(n)),new Error("Failed to link vertex and fragment shaders.")}(n,t),this.debug&&C(n,t),this.vertexAttrsAreBound||(this.setProgram(t),this.vertexAttrsAreBound=function(e,n,t){return m(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,t))),$(e,n,"clipSpacePos",t,3,20,0)&&$(e,n,"uv",t,2,20,12)}(n,this.program,this.vertexBuffer)),t}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&m(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&C(this.gl,this.program),m(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,n,t=!0){return this.throwIfDisposed(),t?function(e,n,t){return k(e,(()=>e.getUniformLocation(n,t)),'uniform "'+t+'" not present in program.')}(this.gl,e,n):function(e,n,t){return e.getUniformLocation(n,t)}(this.gl,e,n)}getAttributeLocation(e,n){return this.throwIfDisposed(),m(this.gl,(()=>this.gl.getAttribLocation(e,n)))}getUniformLocationNoThrow(e,n){return this.throwIfDisposed(),this.gl.getUniformLocation(e,n)}setInputMatrixTexture(e,n,t){this.throwIfDisposed(),this.throwIfNoProgram(),function(e,n,t,a){m(e,(()=>I(e,n,a))),m(e,(()=>e.uniform1i(t,a)))}(this.gl,e,n,t)}setOutputMatrixTexture(e,n,t){this.setOutputMatrixTextureDriver(e,t,n)}setOutputPackedMatrixTexture(e,n,t){this.throwIfDisposed();const[a,r]=f(n,t);this.setOutputMatrixTextureDriver(e,a,r)}setOutputMatrixWriteRegion(e,n,t,a){this.setOutputMatrixWriteRegionDriver(t,e,a,n)}setOutputPackedMatrixWriteRegion(e,n,t,a){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&C(this.gl,this.program),R(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),m(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),m(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=b(this.gl,2===(0,a.e)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===(0,a.e)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),t=e.createQuery();return e.beginQuery(n.TIME_ELAPSED_EXT,t),t}const e=this.getQueryTimerExtensionWebGL1(),n=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,n),n}endQuery(){if(2===(0,a.e)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,n=this.getQueryTimerExtensionWebGL2();return void e.endQuery(n.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await(0,r.x)((()=>this.disposed||this.isQueryAvailable(e,(0,a.e)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,(0,a.e)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,n){if(0===n)return null;if(2===n){const n=this.gl;return n.getQueryParameter(e,n.QUERY_RESULT)/1e6}{const n=this.getQueryTimerExtensionWebGL1();return n.getQueryObjectEXT(e,n.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,n){if(0===n)return!0;if(2===n){const n=this.gl,t=this.getQueryTimerExtensionWebGL2(),a=n.getQueryParameter(e,n.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),a&&!this.disjoint}{const n=this.getQueryTimerExtensionWebGL1(),t=n.getQueryObjectEXT(e,n.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),t&&!this.disjoint}}pollFence(e){return new Promise((n=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>n()))}))}pollItems(){const e=function(e){let n=0;for(;n<e.length&&e[n]();++n);return n-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let n=0;n<=e;++n){const{resolveFn:e}=this.itemsToPoll[n];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,n){this.itemsToPoll.push({isDoneFn:e,resolveFn:n}),this.itemsToPoll.length>1||(0,r.x)((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),w(this.gl,e,this.framebuffer),this.debug&&R(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(w(this.gl,this.outputTexture,this.framebuffer),this.debug&&R(this.gl)):y(this.gl,this.framebuffer)}downloadMatrixDriver(e,n){this.bindTextureToFrameBuffer(e);const t=n();return this.unbindTextureToFrameBuffer(),t}setOutputMatrixTextureDriver(e,n,t){this.throwIfDisposed();const a=this.gl;w(a,e,this.framebuffer),this.debug&&R(a),this.outputTexture=e,m(a,(()=>a.viewport(0,0,n,t))),m(a,(()=>a.scissor(0,0,n,t)))}setOutputMatrixWriteRegionDriver(e,n,t,a){this.throwIfDisposed(),m(this.gl,(()=>this.gl.scissor(e,n,t,a)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function Ie(e){return(n,t,o,s,i)=>{const u=(0,a.an)(n,t),l=u.length,c=(0,r.O)(u),d=(0,r.m)(u),p=(0,r.B)(i,d),h=n.length,f=t.length,x=(0,r.O)(n),m=(0,r.O)(t),g=(0,a.c3)(n,u),b=(0,a.c3)(t,u);if(g.length+b.length===0)for(let n=0;n<p.length;++n)p[n]=e(o[n%o.length],s[n%s.length]);else for(let n=0;n<p.length;++n){const t=(0,r.U)(n,l,c),a=t.slice(-h);g.forEach((e=>a[e]=0));const i=(0,r.T)(a,h,x),u=t.slice(-f);b.forEach((e=>u[e]=0));const d=(0,r.T)(u,f,m);p[n]=e(o[i],s[d])}return[p,u]}}const we=Ie(((e,n)=>e+n));function ye(e){return(n,t,a)=>{const o=(0,r.B)(t,n.length);for(let t=0;t<n.length;++t)o[t]=e(n[t],a);return o}}const Re=ye((e=>Math.ceil(e))),ke=Ie(((e,n)=>e===n?1:0)),Te=ye((e=>Math.exp(e))),Se=ye((e=>Math.expm1(e))),Ne=ye((e=>Math.floor(e))),Ee=Ie(((e,n)=>e>n?1:0)),Oe=Ie(((e,n)=>e>=n?1:0)),Ae=Ie(((e,n)=>e<n?1:0)),Fe=Ie(((e,n)=>e<=n?1:0)),_e=ye((e=>Math.log(e))),De=Ie(((e,n)=>Math.max(e,n))),Le=Ie(((e,n)=>Math.min(e,n))),Pe=Ie(((e,n)=>e*n)),Be=Ie(((e,n)=>e!==n?1:0)),We=ye((e=>1/Math.sqrt(e))),Ve=ye((e=>1/(1+Math.exp(-e)))),Ue=ye((e=>Math.sqrt(e))),Ge=Ie(((e,n)=>{const t=e-n;return t*t}));class Me{constructor(e,n,t,r,o,s){this.separator=(0,a.c7)(e),this.nGramWidths=n,this.leftPad=(0,a.c7)(t),this.rightPad=(0,a.c7)(r),this.padWidth=o,this.preserveShort=s}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,n){const t=this.getPadWidth(n);return Math.max(0,e+2*t-n+1)}createNGrams(e,n,t,a,r,o){for(let s=0;s<r;++s){const i=this.getPadWidth(o),u=Math.max(0,i-s),l=Math.max(0,i-(r-(s+1))),c=o-(u+l),d=n+(u>0?0:s-i);let p=0;p+=u*this.leftPad.length;for(let n=0;n<c;++n)p+=e[d+n].length;p+=l*this.rightPad.length,p+=(u+l+c-1)*this.separator.length,t[a+s]=new Uint8Array(p);const h=t[a+s];let f=0;const x=e=>e.forEach((e=>h[f++]=e));for(let e=0;e<u;++e)x(this.leftPad),x(this.separator);for(let n=0;n<c-1;++n)x(e[d+n]),x(this.separator);if(c>0){x(e[d+c-1]);for(let e=0;e<l;++e)x(this.separator),x(this.rightPad)}else{for(let e=0;e<l-1;++e)x(this.rightPad),x(this.separator);x(this.rightPad)}}}compute(e,n){const t=e.length,a=n.length;if(a>0){let e=n[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let r=1;r<a;++r){let a=n[r]>=e;if(a=a&&n[r]<=t,!a)throw new Error(`Invalid split value ${n[r]}, must be in [${e}, ${t}]`);e=n[r]}if(e!==t)throw new Error(`Last split value must be data size. Expected ${t}, got ${e}`)}const o=a-1,s=(0,r.C)("int32",a);if(0===t||0===a){const e=new Array(t);for(let e=0;e<=o;++e)s[e]=0;return[e,s]}s[0]=0;for(let e=1;e<=o;++e){const t=n[e]-n[e-1];let a=0;this.nGramWidths.forEach((e=>{a+=this.getNumNGrams(t,e)})),this.preserveShort&&t>0&&0===a&&(a=1),s[e]=s[e-1]+a}const i=new Array(s[o]);for(let t=0;t<o;++t){const a=n[t];let r=s[t];if(this.nGramWidths.forEach((o=>{const s=n[t+1]-n[t],u=this.getNumNGrams(s,o);this.createNGrams(e,a,i,r,u,o),r+=u})),this.preserveShort&&r===s[t]){const o=n[t+1]-n[t];if(0===o)continue;const s=o+2*this.padWidth,u=1;this.createNGrams(e,a,i,r,u,s)}}return[i,s]}}function ze(e,n,t,a){if(!e.length)return;if(0===n.length){for(let n=0;n<e.length;++n)a.push(e.subarray(n,n+1));return}if(1===n.length){const r=n[0];let o=e.indexOf(r);for(;-1!==o;){const n=e.subarray(0,o);t&&0===n.length||a.push(n),o=(e=e.subarray(o+1)).indexOf(r)}return void(t&&0===e.length||a.push(e))}let r=0;for(let o=0;o<e.length+1;o++)if(o===e.length||-1!==n.indexOf(e[o])){const n=e.subarray(r,o);t&&0===n.length||a.push(n),r=o+1}}const Xe=Ie(((e,n)=>e-n)),He=(e,n)=>{const t=n.value-e.value;return 0===t?e.index-n.index:t};function je(e,n,t=0,a=e.length-1){for(;a>t;){if(a-t>600){const r=a-t+1,o=n-t+1,s=Math.log(r),i=.5*Math.exp(2*s/3),u=.5*Math.sqrt(s*i*(r-i)/r)*Math.sign(o-r/2);je(e,n,Math.max(t,Math.floor(n-o*i/r+u)),Math.min(a,Math.floor(n+(r-o)*i/r+u)))}const o=e[n];let s=t,i=a;for((0,r.g)(e,t,n),He(e[a],o)>0&&(0,r.g)(e,t,a);s<i;){for((0,r.g)(e,s,i),s++,i--;He(e[s],o)<0;)s+=1;for(;He(e[i],o)>0;)i-=1}0===He(e[t],o)?(0,r.g)(e,t,i):(i+=1,(0,r.g)(e,i,a)),i<=n&&(t=i+1),n<=i&&(a=i-1)}}var Ke=Object.freeze({__proto__:null,simpleAbsImpl:function(e){const n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.abs(e[t]);return n},addImpl:we,bincountImpl:function(e,n,t,a,o){const s=(0,r.m)(a),i=(0,r.Q)(o,t);for(let t=0;t<e.length;t++){const a=e[t];if(a<0)throw new Error("Input x must be non-negative!");a>=o||(i[a]+=s>0?n[t]:1)}return i},bincountReduceImpl:function(e,n,t,r=!1){const o=e.shape[0],s=e.shape[1],i=(0,a.aw)([o,t],n.dtype);for(let a=0;a<o;a++)for(let o=0;o<s;o++){const s=e.get(a,o);if(s<0)throw new Error("Input x must be non-negative!");s>=t||(r?i.set(1,a,s):n.size>0?i.set(i.get(a,s)+n.get(a,o),a,s):i.set(i.get(a,s)+1,a,s))}return i},ceilImpl:Re,concatImpl:function(e,n,t,a){const s=(0,r.C)(t,(0,r.m)(n));if(a&&"string"!==t){let n=0;e.forEach((e=>{const t=(0,r.m)(e.shape);s.set(e.vals,n),n+=t}))}else{let a=0;e.forEach((e=>{const r="string"===t?(0,o.f)(e.vals):e.vals;let i=0;for(let t=0;t<e.shape[0];++t){const o=t*n[1]+a;for(let n=0;n<e.shape[1];++n)s[o+n]=r[i++]}a+=e.shape[1]}))}return s},equalImpl:ke,expImpl:Te,expm1Impl:Se,floorImpl:Ne,gatherNdImpl:function(e,n,t,r,o,s,i,u,l){const c=(0,a.aw)([r,s],t);for(let t=0;t<r;t++){const a=[];let r=0;for(let n=0;n<o;n++){const s=e[t*o+n];r+=s*i[n],a.push(s)}if(r<0||r>=l/s)throw new Error(`Invalid indices: ${a} does not index into ${u}`);for(let e=0;e<s;e++)c.values[t*s+e]=n.get(...n.indexToLoc(r*s+e))}return c},gatherV2Impl:function(e,n,t){const r=(0,a.aw)(t,e.dtype);for(let t=0;t<r.size;++t){const a=r.indexToLoc(t).slice(),o=a[0],s=a[2],i=n.locToIndex([o,s]);a[2]=n.values[i];const u=e.locToIndex(a);0<=u&&u<e.values.length&&(r.values[t]=e.values[u])}return r},greaterImpl:Ee,greaterEqualImpl:Oe,lessImpl:Ae,lessEqualImpl:Fe,linSpaceImpl:function(e,n,t){const a=(n-e)/(t-1),o=(0,r.Q)(t,"float32");o[0]=e;for(let e=1;e<o.length;e++)o[e]=o[e-1]+a;return o},logImpl:_e,maxImpl:function(e,n,t,a){const o=(0,r.B)(a,(0,r.m)(t));for(let t=0;t<o.length;++t){const a=t*n;let r=e[a];for(let t=0;t<n;++t){const n=e[a+t];(Number.isNaN(n)||n>r)&&(r=n)}o[t]=r}return o},maximumImpl:De,minimumImpl:Le,multiplyImpl:Pe,negImpl:function(e,n,t){const r=(0,a.c4)(-1,t);return Pe([],n,r,e,t)},notEqualImpl:Be,prodImpl:function(e,n,t,o){const[s,i]=(0,a.c5)(e,o),u=(0,a.c6)(n,"int32"),l=(0,r.Q)((0,r.m)(s),u),c=(0,r.m)(i);for(let e=0;e<l.length;++e){const n=e*c;let a=1;for(let e=0;e<c;++e)a*=t[n+e];l[e]=a}return{outVals:l,outShape:s,outDtype:u}},rangeImpl:function(e,n,t,a){if(e===n||e<n&&t<0||n<e&&t>1)return(0,r.Q)(0,a);const o=Math.abs(Math.ceil((n-e)/t)),s=(0,r.Q)(o,a);n<e&&1===t&&(t=-1),s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+t;return s},rsqrtImpl:We,sigmoidImpl:Ve,sliceImpl:function(e,n,t,s,i){const u=(0,o.i)(s,n,t),l=(0,r.m)(t),c=(0,r.O)(s);if(u){const t=(0,o.c)(n,c);return"string"===i?e.slice(t,t+l):e.subarray(t,t+l)}const d="string"===i?(0,o.f)(e):e,p=(0,a.aw)(s,i,d),h=(0,a.aw)(t,i);for(let e=0;e<h.size;++e){const t=h.indexToLoc(e),a=t.map(((e,t)=>e+n[t]));h.set(p.get(...a),...t)}return"string"===i?(0,o.a)(h.values):h.values},sparseFillEmptyRowsImpl:function(e,n,t,a,s,i,u){const l=n[0],c=i[0],d=new Array(c),p=new Array(l),h=n[1];if(0===c){if(0!==l)throw new Error((0,o.g)(l));return[(0,r.C)(t,0),[0,h],(0,r.C)(s,0),d,p]}let f=!0,x=0;const m=new Array(c).fill(0);for(let n=0;n<l;++n){const t=e[n*h];if(t<0)throw new Error((0,o.d)(n,t));if(t>=c)throw new Error((0,o.e)(n,t,c));++m[t],f=f&&t>=x,x=t}let g=!0;for(let e=0;e<c;++e){const n=0===m[e];d[e]=n,g=g&&!n,m[e]=Math.max(m[e],1),e>0&&(m[e]+=m[e-1])}if(g&&f){const n=e,t=a;for(let e=0;e<l;++e)p[e]=e;return[n,[l,h],t,d,p]}{const n=m[c-1],o=(0,r.C)(t,n*h),i=(0,r.C)(s,n),f=new Array(c).fill(0);for(let n=0;n<l;++n){const t=e[n*h],r=f[t],s=(0===t?0:m[t-1])+r;f[t]++;for(let t=0;t<h;++t)o[s*h+t]=e[n*h+t];i[s]=a[n],p[n]=s}for(let e=0;e<c;++e)if(0===f[e]){const n=0===e?0:m[e-1];o[n*h+0]=e;for(let e=1;e<h;++e)o[n*h+e]=0;i[n]=u}return[o,[n,h],i,d,p]}},sparseReshapeImpl:function(e,n,t,a,s){const i=(0,r.m)(a),u=n[0],l=s.length,c=[];let d=1,p=-1;for(let e=0;e<l;++e){const n=s[e];if(-1===n){if(-1!==p)throw new Error((0,o.h)(p,e));p=e,c.push(1)}else{if(n<0)throw new Error((0,o.j)(e,n));d*=n,c.push(n)}}if(-1!==p){if(d<=0)throw new Error((0,o.k)());const e=Math.trunc(i/d);if(d*e!==i)throw new Error((0,o.l)(a,c));c[p]=e}if((0,r.m)(c)!==i)throw new Error((0,o.m)(a,c));const h=a.length,f=[];if(h>0){f[h-1]=1;for(let e=h-2;e>=0;--e)f[e]=f[e+1]*a[e+1]}const x=[];if(l>0){x[l-1]=1;for(let e=l-2;e>=0;--e)x[e]=x[e+1]*c[e+1]}const m=(0,r.C)(t,u*l);for(let n=0;n<u;++n){let t=0;for(let a=0;a<h;++a)t+=e[n*h+a]*f[a];for(let e=0;e<l;++e)m[n*l+e]=Math.trunc(t/x[e]),t%=x[e]}return[m,[u,l],c]},sparseSegmentReductionImpl:function(e,n,t,a,s,i=!1,u=0){const l=a.length,c=[n[0],e.length/n[0]],d=c[1],p=l>0?s[l-1]+1:0;if(p<0)throw new Error((0,o.n)());const h=n.slice();h[0]=p;const f=h.reduce(((e,n)=>e*n),1),x=(0,r.C)(t,f);if(0===l)return p>0&&x.fill(u),[x,h];if(p<=0)throw new Error((0,o.n)());let m=0,g=1,b=0,v=s[m];for(;;){let n=0;if(g<l){if(n=s[g],v===n){++g;continue}if(v>=n)throw new Error((0,o.o)())}if(v<0||v>=p)throw new Error((0,o.p)(v,p));v>b&&x.fill(u,b*d,v*d);for(let n=m;n<g;++n){const t=a[n];if(t<0||t>=c[0])throw new Error((0,o.q)(n,a[n],c[0]));for(let n=0;n<d;n++)x[v*d+n]+=e[t*d+n]}if(i)for(let e=0;e<d;e++)x[v*d+e]/=g-m;if(m=g,++g,b=v+1,v=n,g>l)break}return b<p&&x.fill(u,b*d,p*d),[x,h]},sqrtImpl:Ue,squaredDifferenceImpl:Ge,stridedSliceImpl:function(e,n,t,r){const o=(0,a.aw)(e,n.dtype);for(let e=0;e<o.size;e++){const a=o.indexToLoc(e),s=new Array(a.length);for(let e=0;e<s.length;e++)s[e]=a[e]*t[e]+r[e];o.set(n.get(...s),...a)}return o},stringNGramsImpl:function(e,n,t,a,r,o,s,i){return new Me(t,a,r,o,s,i).compute(e,n)},stringSplitImpl:function(e,n,t){const a=e.length,o=[];let s=0,i=0;const u=new Array(a);for(let r=0;r<a;++r){const a=o.length;ze(e[r],n,t,o);const l=o.length-a;u[r]=l,s+=l,i=Math.max(i,l)}const l=(0,r.C)("int32",2*s),c=new Array(s),d=[a,i];let p=0;for(let e=0;e<a;++e)for(let n=0;n<u[e];++n)l[2*p]=e,l[2*p+1]=n,c[p]=o[p],++p;return[l,c,d]},stringToHashBucketFastImpl:function(e,n){const t=(0,r.C)("int32",e.length);for(let r=0;r<e.length;++r)t[r]=(0,a.c8)(e[r]).modulo(n).getLowBitsUnsigned();return t},subImpl:Xe,tileImpl:function(e,n){const t=new Array(e.rank);for(let a=0;a<t.length;a++)t[a]=e.shape[a]*n[a];const r=(0,a.aw)(t,e.dtype);for(let n=0;n<r.values.length;++n){const t=r.indexToLoc(n),a=new Array(e.rank);for(let n=0;n<a.length;n++)a[n]=t[n]%e.shape[n];const o=e.locToIndex(a);r.values[n]=e.values[o]}return r},topKImpl:function(e,n,t,o,s){const i=n[n.length-1],[u,l]=[e.length/i,i],c=(0,r.B)(t,u*o),d=(0,r.B)("int32",u*o);for(let n=0;n<u;n++){const t=n*l,a=e.subarray(t,t+l);let r=new Array(a.length);a.forEach(((e,n)=>r[n]={value:e,index:n})),o<r.length&&(je(r,o),r=r.slice(0,o)),s&&r.sort(He);const i=n*o,u=c.subarray(i,i+o),p=d.subarray(i,i+o);for(let e=0;e<o;e++)u[e]=r[e].value,p[e]=r[e].index}const p=n.slice();return p[p.length-1]=o,[(0,a.aw)(p,t,c),(0,a.aw)(p,"int32",d)]},transposeImpl:function(e,n,t,a,o){const s=n.length,i=(0,r.m)(n),u=(0,r.O)(n),l=(0,r.O)(o),c=(0,r.B)(t,(0,r.m)(o));for(let n=0;n<i;++n){const t=(0,r.U)(n,s,u),o=new Array(t.length);for(let e=0;e<o.length;e++)o[e]=t[a[e]];c[(0,r.T)(o,s,l)]=e[n]}return c},uniqueImpl:function(e,n,t,o){const s=(0,r.z)(n,t)[0],i=[1,t[0],1];for(let e=0;e<s;e++)i[0]*=t[e];i[1]=t[s];for(let e=s+1;e<t.length;e++)i[2]*=t[e];const u={},l=new Int32Array(t[s]),c=new a.be(i,o,e),d=[],p=1===i[0]&&1===i[2];for(let n=0;n<t[s];n++){let t;if(p)t=e[n].toString();else{const e=[];for(let t=0;t<i[0];t++)for(let a=0;a<i[2];a++)e.push(c.get(t,n,a));t=e.join(",")}if(void 0!==u[t])l[n]=u[t];else{const e=Object.keys(u).length;u[t]=e,l[n]=e,d.push(n)}}const h=i.slice();h[1]=Object.keys(u).length;const f=new a.be(h,o);d.forEach(((e,n)=>{for(let t=0;t<i[0];t++)for(let a=0;a<i[2];a++)f.set(c.get(t,e,a),t,n,a)}));const x=t.slice();return x[s]=h[1],{outputValues:f.values,outputShape:x,indices:l}}});const{addImpl:Ye,bincountImpl:qe,bincountReduceImpl:Qe,ceilImpl:Ze,concatImpl:Je,equalImpl:en,expImpl:nn,expm1Impl:tn,floorImpl:an,gatherNdImpl:rn,gatherV2Impl:on,greaterImpl:sn,greaterEqualImpl:un,lessImpl:ln,lessEqualImpl:cn,linSpaceImpl:dn,logImpl:pn,maxImpl:hn,maximumImpl:fn,minimumImpl:xn,multiplyImpl:mn,negImpl:gn,notEqualImpl:bn,prodImpl:vn,rangeImpl:Cn,rsqrtImpl:$n,sigmoidImpl:In,simpleAbsImpl:wn,sliceImpl:yn,sparseFillEmptyRowsImpl:Rn,sparseReshapeImpl:kn,sparseSegmentReductionImpl:Tn,sqrtImpl:Sn,stridedSliceImpl:Nn,stringNGramsImpl:En,stringSplitImpl:On,stringToHashBucketFastImpl:An,subImpl:Fn,tileImpl:_n,topKImpl:Dn,transposeImpl:Ln,uniqueImpl:Pn}=Ke;function Bn(e,n){return["x","y","z","w","u","v"].slice(0,n).map((n=>`${e}.${n}`))}function Wn(e,n){return 1===n?[e]:Bn(e,n)}class Vn{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=oe(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=Wn("rc",this.rank),n=ee(this.rank),t=this.getOutOfBoundsCondition(e),a=this.getSetup(e),r=this.getOutput(e);this.userCode=`\n        void main() {\n          ${n} rc = getOutputCoords();\n\n          if(${t}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${r}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const n=[];for(let t=0;t<=1;t++)for(let a=0;a<=1;a++){let r=`${0===t?"r":"rp1"}, ${0===a?"c":"cp1"}`;for(let n=2;n<this.rank;n++)r=`${e[e.length-1-n]},`+r;n.push(r)}return n}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let n="";for(let t=this.rank-2;t<this.rank;t++)n+=`${e[t]} >= ${this.enableShapeUniforms?`outShape[${t}]`:this.outputShape[t]}`,t<this.rank-1&&(n+="||");return n}getSetup(e){if(1===this.rank)return"";const n=e.slice(-2),t=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],a=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${n[0]};\n      int c = ${n[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${t};\n      bool rEdge = rp1 >= ${a};\n    `}getOutput(e){const n=this.getSourceCoordsArr(e);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${n[0]}),\n            cEdge ? 0. : getA(${n[1]}),\n            rEdge ? 0. : getA(${n[2]}),\n            rEdge || cEdge ? 0. : getA(${n[3]})`}}class Un{constructor(e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=oe(this.outputShape.length);let t="";for(let e=0;e<4;e++){let n="thisRC = rc;";e%2==1&&(n+="thisRC.z += 1;"),e>1&&(n+="thisRC.y += 1;"),t+=`\n        ${n}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var a,r;this.userCode=`\n      ${a=n,r=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${r?function(e,n,t="index"){const a=function(e,n){const t=e.length,a=e.map((e=>`${n}[${e}]`)),r=new Array(t-1);r[t-2]=a[t-1];for(let e=t-3;e>=0;--e)r[e]=`(${r[e+1]} * ${a[e+1]})`;return r}(e.map(((e,n)=>n)),n);return a.map(((n,r)=>`int ${e[r]} = ${t} / ${a[r]}; ${r===a.length-1?`int ${e[r+1]} = ${t} - ${e[r]} * ${a[r]}`:`index -= ${e[r]} * ${a[r]}`};`)).join("")}(["r","c","d"],"inputShape"):V(["r","c","d"],a)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":G(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${t}\n\n        setOutput(result);\n      }\n    `}}class Gn{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,n,t){const a=zn(n,t),r=Xn(e,a,t);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const o=Mn(e,a,this.gpgpu.gl,this.gpgpu.textureConfig,t);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=o,this.log();const e=this.freeTextures[r].shift();return this.usedTextures[r].push(e),e}let s;return a===d.PACKED_2X2_FLOAT32?s=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):a===d.PACKED_2X2_FLOAT16?s=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):a===d.UNPACKED_FLOAT32?s=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):a===d.UNPACKED_FLOAT16?s=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):a===d.PACKED_4X1_UNSIGNED_BYTE&&(s=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(s),this.numUsedTextures++,this._numBytesAllocated+=o,this.log(),s}releaseTexture(e,n,t,r){if(null==this.freeTextures)return;const o=zn(t,r),s=Xn(n,o,r);s in this.freeTextures||(this.freeTextures[s]=[]);const i=Mn(n,o,this.gpgpu.gl,this.gpgpu.textureConfig,r),u=(0,a.e)().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==u&&this._numBytesAllocated>u?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[s].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[s],c=l.indexOf(e);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(c,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const n=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*n)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function Mn(e,n,t,a,r){const o=function(e,n){switch(e){case d.PACKED_2X2_FLOAT32:return ve(n);case d.PACKED_2X2_FLOAT16:return Ce(n);case d.UNPACKED_FLOAT32:return me(n);case d.UNPACKED_FLOAT16:return ge(n);case d.PACKED_4X1_UNSIGNED_BYTE:return be(n);default:throw new Error(`Unknown physical texture type ${e}`)}}(n,a);let s;if(r){const[n,t]=f(e[0],e[1]);s=n*t}else{const[n,t]=p(e[0],e[1]);s=n*t}const i=function(e,n){const t=e;if(n===t.R32F)return 4;if(n===t.R16F)return 2;if(n===t.RGBA32F)return 16;if(n===e.RGBA)return 16;if(n===t.RGBA16F)return 8;if(n===t.RGBA8)return 4;throw new Error(`Unknown internal format ${n}`)}(t,o);return s*i}function zn(e,n){if(e===c.UPLOAD)return d.PACKED_2X2_FLOAT32;if(e===c.RENDER||null==e)return function(e){return(0,a.e)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?d.PACKED_2X2_FLOAT32:d.UNPACKED_FLOAT32:e?d.PACKED_2X2_FLOAT16:d.UNPACKED_FLOAT16}(n);if(e===c.DOWNLOAD||e===c.PIXELS)return d.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function Xn(e,n,t){return`${e[0]}_${e[1]}_${n}_${t}`}class Hn{constructor(e,n){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=oe(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${n}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const jn="return abs(x);",Kn="return x;";class Yn{constructor(e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=oe(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${n}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class qn{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=oe(this.outputShape.length);const n=e.length,t=Wn("rc",n),a=ee(n),r=function(e,n){if(1===e)return"rc";let t="";for(let a=0;a<e;a++)t+=n[a],a<e-1&&(t+=",");return t}(n,t),o=t.slice(-2),s=n<=1?"rc":`vec2(${o.join(",")})`;this.userCode=`\n      void main() {\n        ${a} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${s}));\n      }\n    `}}const Qn=a.bu,Zn={},Jn=(0,a.e)().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class et extends a.c9{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!(0,a.e)().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let n;if(null!=e){if(e instanceof $e)n=e;else{const t=u((0,a.e)().getNumber("WEBGL_VERSION"),e);n=new $e(t)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=u((0,a.e)().getNumber("WEBGL_VERSION"));n=new $e(e),this.binaryCache=((t=(0,a.e)().getNumber("WEBGL_VERSION"))in Zn||(Zn[t]={}),Zn[t]),this.gpgpuCreatedLocally=!0}var t;this.gpgpu=n,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new Gn(this.gpgpu),this.numMBBeforeWarning=null==(0,a.e)().global.screen?1024:(0,a.e)().global.screen.height*(0,a.e)().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new a.ca(this,(0,a.cb)())}nextDataId(){return et.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,n,t){if(((0,a.e)().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||(0,a.e)().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===t&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:n,dtype:t,values:e,usage:c.UPLOAD,refCount:1}),r}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,n,t,r,o){if((0,a.e)().getBool("DEBUG")&&this.checkNumericalProblems(n),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:t,dtype:r,values:n,usage:c.UPLOAD,refCount:o})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const n=this.texData.get(e),{values:t,dtype:r,complexTensorInfos:s,slice:i,shape:u,isPacked:l}=n;if(null!=i){let n;n=l?new Yn(u,Kn):new Hn(u,Kn);const t=this.runWebGLProgram(n,[{dataId:e,shape:u,dtype:r}],r),a=this.readSync(t.dataId);return this.disposeIntermediateTensorInfo(t),a}if(null!=t)return this.convertAndCacheOnCPU(e);if("string"===r)return t;const c=null!=this.activeTimers;let d,p;if(c&&(d=(0,a.cc)()),"complex64"===r){const e=this.readSync(s.real.dataId),n=this.readSync(s.imag.dataId);p=(0,o.r)(e,n)}else p=this.getValuesFromTexture(e);return c&&(this.downloadWaitMs+=(0,a.cc)()-d),this.convertAndCacheOnCPU(e,p)}async read(e){if(this.pendingRead.has(e)){const n=this.pendingRead.get(e);return new Promise((e=>n.push(e)))}const n=this.texData.get(e),{values:t,shape:s,slice:i,dtype:u,complexTensorInfos:l,isPacked:c}=n;if(null!=i){let n;n=c?new Yn(s,Kn):new Hn(s,Kn);const t=this.runWebGLProgram(n,[{dataId:e,shape:s,dtype:u}],u),a=this.read(t.dataId);return this.disposeIntermediateTensorInfo(t),a}if(null!=t)return this.convertAndCacheOnCPU(e);if((0,a.e)().getBool("DEBUG")&&!(0,a.e)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===(0,a.e)().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let d,p,f=null;if("complex64"!==u&&(0,a.e)().get("WEBGL_BUFFER_SUPPORTED")){d=this.decode(e);const n=this.texData.get(d.dataId);f=this.gpgpu.createBufferFromTexture(n.texture.texture,...h(s))}if(this.pendingRead.set(e,[]),"complex64"!==u&&await this.gpgpu.createAndWaitForFence(),"complex64"===u){const e=await Promise.all([this.read(l.real.dataId),this.read(l.imag.dataId)]),n=e[0],t=e[1];p=(0,o.r)(n,t)}else if(null==f)p=this.getValuesFromTexture(e);else{const e=(0,r.m)(s);p=this.gpgpu.downloadFloat32MatrixFromBuffer(f,e)}if(null!=d&&this.disposeIntermediateTensorInfo(d),null!=f){const e=this.gpgpu.gl;m(e,(()=>e.deleteBuffer(f)))}const x=this.convertAndCacheOnCPU(e,p),g=this.pendingRead.get(e);return this.pendingRead.delete(e),g.forEach((e=>e(x))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&(0,a.cb)().removeDataId(e,this),this.pendingDeletes--),x}readToGPU(e,n={}){const t=this.texData.get(e),{values:r,shape:o,slice:s,dtype:i,isPacked:u,texture:l}=t;if("complex64"===i)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=s){let t;t=u?new Yn(o,Kn):new Hn(o,Kn);const a=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:i}],i),r=this.readToGPU(a,n);return this.disposeIntermediateTensorInfo(a),r}if(null==l)throw null!=r?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const c=this.decode(e,n.customTexShape),d=(0,a.cb)().makeTensorFromDataId(c.dataId,c.shape,c.dtype),p=this.texData.get(c.dataId);return Object.assign({tensorRef:d},p.texture)}bufferSync(e){const n=this.readSync(e.dataId);let t=n;if("string"===e.dtype)try{t=n.map((e=>(0,a.cd)(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,a.aw)(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let n=0;n<e.length;n++){const t=e[n];if(!g(t)){if((0,a.e)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${t} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${t} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:n,dtype:t,isPacked:o}=this.texData.get(e),s=(0,r.m)(n);if((0,a.e)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const t=this.decode(e),a=this.texData.get(t.dataId),r=this.gpgpu.downloadMatrixFromPackedTexture(a.texture.texture,...h(n)).subarray(0,s);return this.disposeIntermediateTensorInfo(t),r}const i=(0,a.e)().getBool("WEBGL_PACK")&&!0===o,u=i?N(n):n,l=i?new le(u):new ue(u),c=this.runWebGLProgram(l,[{shape:u,dtype:t,dataId:e}],"float32"),d=this.texData.get(c.dataId),p=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(d.texture.texture,d.texShape[0],d.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(c),p}timerAvailable(){return(0,a.e)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const n=this.activeTimers,t=[];let o=!1;null==this.programTimersStack?(this.programTimersStack=t,o=!0):this.activeTimers.push(t),this.activeTimers=t,e();const s=(0,r.f)(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),i=(0,r.f)(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=n,o&&(this.programTimersStack=null);const u={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if((0,a.e)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(s);u.kernelMs=(0,r.h)(e),u.getExtraProfileInfo=()=>e.map(((e,n)=>({name:i[n],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else u.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,u})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return(0,a.e)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:(0,a.cc)(),endMs:null}}endTimer(e){return(0,a.e)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=(0,a.cc)(),e)}async getQueryTime(e){if((0,a.e)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const n=e;return n.endMs-n.startMs}disposeData(e,n=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(n?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!n&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:t}=this.texData.get(e);return null!=t&&(this.disposeData(t.real.dataId,n),this.disposeData(t.imag.dataId,n)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:n,dtype:t,texShape:a,usage:r,isPacked:o,slice:s}=this.texData.get(e),i=s&&s.origDataId||e,u=this.dataRefCount.get(i);u>1?this.dataRefCount.set(i,u-1):(this.dataRefCount.delete(i),null!=n&&(this.numBytesInGPU-=this.computeBytes(a,t),this.textureManager.releaseTexture(n,a,r,o)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,n=Jn){return(0,a.e)().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&(0,r.m)(e.shape)<n))}getGPGPUContext(){return this.gpgpu}where(e){(0,a.ce)("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const n=e.dataSync();return Qn(e.shape,n)}packedUnaryOp(e,n,t){const r=new Yn(e.shape,n),o=this.compileAndRun(r,[e],t);return(0,a.cb)().makeTensorFromDataId(o.dataId,o.shape,o.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const n=wn(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,n)}if((0,a.e)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,jn,e.dtype);const n=new Hn(e.shape,jn),t=this.compileAndRun(n,[e]);return(0,a.cb)().makeTensorFromDataId(t.dataId,t.shape,t.dtype)}makeTensorInfo(e,n,t){let o;if("string"===n&&null!=t&&t.length>0&&(0,r.I)(t[0])){const r=t.map((e=>(0,a.c7)(e)));o=this.write(r,e,n)}else o=this.write(t,e,n);return this.texData.get(o).usage=null,{dataId:o,shape:e,dtype:n}}makeOutput(e,n,t){const{dataId:r}=this.makeTensorInfo(e,n,t);return(0,a.cb)().makeTensorFromDataId(r,e,n,this)}unpackTensor(e){const n=new qn(e.shape);return this.runWebGLProgram(n,[e],e.dtype)}packTensor(e){const n=new Vn(e.shape);return this.runWebGLProgram(n,[e],e.dtype,null,!0)}packedReshape(e,n){const t=[T(e.shape),...S(e.shape)],a={dtype:e.dtype,shape:t,dataId:e.dataId},r=[T(n),...S(n)],o=new Un(r,t),s=[t],i=this.runWebGLProgram(o,[a],e.dtype,s,!0);return{dataId:i.dataId,shape:n,dtype:i.dtype}}decode(e,n){const t=this.texData.get(e),{isPacked:a,shape:o,dtype:s}=t;if(null!=n){const e=(0,r.m)(o),t=n[0]*n[1]*4;(0,r.a)(e<=t,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const i=N(o);let u;u=a?new ie(i):new se(i);const l=[null!=n?n:h(i)];return{dtype:s,shape:o,dataId:this.runWebGLProgram(u,[{shape:i,dtype:s,dataId:e}],s,l,!0,n).dataId}}runWebGLProgram(e,n,t,o,s=!1,i){const u=this.makeTensorInfo(e.outputShape,t),c=this.texData.get(u.dataId);if(e.packedOutput&&(c.isPacked=!0),e.outPackingScheme===l.DENSE){const n=null!=i?i:h(e.outputShape);c.texShape=n.map((e=>2*e))}if(null!=e.outTexUsage&&(c.usage=e.outTexUsage),0===(0,r.m)(u.shape))return c.values=(0,r.B)(u.dtype,0),u;const d=[],p=n.map((n=>{if("complex64"===n.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let t=this.texData.get(n.dataId);if(null==t.texture){if(!e.packedInputs&&(0,r.m)(n.shape)<=(0,a.e)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:n.shape,texData:null,isUniform:!0,uniformValues:t.values};e.packedInputs&&(t.isPacked=!0,t.shape=n.shape)}if(this.uploadToGPU(n.dataId),!!t.isPacked!=!!e.packedInputs)n=t.isPacked?this.unpackTensor(n):this.packTensor(n),d.push(n),t=this.texData.get(n.dataId);else if(t.isPacked&&!O(t.shape,n.shape)){const e=n,a=n.shape;n.shape=t.shape,n=this.packedReshape(n,a),d.push(n),t=this.texData.get(n.dataId),e.shape=a}return{shape:n.shape,texData:t,isUniform:!1}}));this.uploadToGPU(u.dataId);const f={shape:u.shape,texData:c,isUniform:!1},x=function(e,n,t){let o="";n.concat(t).forEach((n=>{const s=null!=n.texData&&null!=n.texData.slice&&n.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!n.isUniform){const i=n.texData.texShape,{useSqueezeShape:u,uniformShape:l,keptDims:c}=ne(e.packedInputs,n.shape,i);let d="",p="",h="";if(1===l.length&&e.packedInputs){const e=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];d=`${e[0]>1}_${e[1]>1}`}else if(2!==l.length||e.packedInputs){if(l.length>2&&!e.packedInputs){const e=(0,r.O)(l);h=`${e[0]===i[1]}_${e[e.length-1]===i[1]}`}}else p=`${l[0]>1}_${l[1]>1}`;const f=n.shape.length,x=2===l.length&&(0,r.b)(n.shape,i),m=1===(0,r.m)(n.shape),g=(0,a.c3)(n.shape,t.shape),b=!e.packedInputs&&f===t.shape.length&&(0,r.b)(i,t.texData.texShape),v=e.packedInputs||l.length>2?"":`${i[0]>1}_${i[1]>1}`;o+=`${f}_${b}_${u?c:""}_${l.length}_${m}_${g}_${x}_${d}_${p}_${h}_${v}_${s}`}else{const e=n.isUniform?"uniform":n.texData.texShape;o+=`${n.shape}_${e}_${s}`}}));const s=e.userCode;let i=e.constructor.name;return i+="_"+o+"_"+s+`${(0,a.e)().getNumber("WEBGL_VERSION")}`,i}(e,p,f),g=this.getAndSaveBinary(x,(()=>function(e,n,t,o){const s=t.map(((e,t)=>{const a={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(a.flatOffset=e.texData.slice.flatOffset),{name:n.variableNames[t],shapeInfo:a}})),i=s.map((e=>e.shapeInfo)),u={logicalShape:o.shape,texShape:o.texData.texShape,isUniform:!1,isPacked:o.texData.isPacked,flatOffset:null},l=X(s,u,n),c=function(e,n){const t=k(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(m(e,(()=>e.shaderSource(t,n))),m(e,(()=>e.compileShader(t))),!1===e.getShaderParameter(t,e.COMPILE_STATUS))throw function(e,n){const t=v.exec(n);if(null==t)return console.log(`Couldn't parse line number in error: ${n}`),void console.log(e);const a=+t[1],o=e.split("\n"),s=o.length.toString().length+2,i=o.map(((e,n)=>(0,r.w)((n+1).toString(),s)+e));let u=0;for(let e=0;e<i.length;e++)u=Math.max(i[e].length,u);const l=i.slice(0,a-1),c=i.slice(a-1,a),d=i.slice(a);console.log(l.join("\n")),console.log(n.split("\n")[0]),console.log(`%c ${(0,r.w)(c[0],u)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(d.join("\n"))}(n,e.getShaderInfoLog(t)),new Error("Failed to compile fragment shader.");return t}(e.gl,l),d=e.createProgram(c);let p=null;const h=e.getUniformLocation(d,"NAN",!1);1===(0,a.e)().getNumber("WEBGL_VERSION")&&(p=e.getUniformLocation(d,"INFINITY",!1));const f=!1,x={},g={},b={};for(let t=0;t<n.variableNames.length;t++){const a=n.variableNames[t];x[a]=e.getUniformLocation(d,a,f),x[`offset${a}`]=e.getUniformLocation(d,`offset${a}`,f),n.enableShapeUniforms&&(g[`${a}Shape`]=e.getUniformLocation(d,`${a}Shape`,f),b[`${a}TexShape`]=e.getUniformLocation(d,`${a}TexShape`,f))}let C,$,I;n.enableShapeUniforms&&(C=e.getUniformLocation(d,"outShape",f),I=e.getUniformLocation(d,"outShapeStrides",f),$=e.getUniformLocation(d,"outTexShape",f));const w=[];return n.customUniforms&&n.customUniforms.forEach(((n,t)=>{w[t]=e.getUniformLocation(d,n.name,f)})),{program:n,fragmentShader:c,source:l,webGLProgram:d,uniformLocations:x,customUniformLocations:w,inShapeInfos:i,outShapeInfo:u,infLoc:p,nanLoc:h,inShapesLocations:g,inTexShapesLocations:b,outShapeLocation:C,outShapeStridesLocation:I,outTexShapeLocation:$}}(this.gpgpu,e,p,f))),b=null!=this.activeTimers;let C;b&&(C=this.startTimer()),function(e,n,t,o,s){n.program.enableShapeUniforms||(re(n.inShapeInfos,t),re([n.outShapeInfo],[o]));const i=o.texData.texture,u=o.texData.texShape;o.texData.isPacked?e.setOutputPackedMatrixTexture(i.texture,u[0],u[1]):e.setOutputMatrixTexture(i.texture,u[0],u[1]),e.setProgram(n.webGLProgram),1===(0,a.e)().getNumber("WEBGL_VERSION")&&null!==n.infLoc&&e.gl.uniform1f(n.infLoc,1/0),null!==n.nanLoc&&e.gl.uniform1f(n.nanLoc,NaN),t.forEach(((t,a)=>{const o=n.program.variableNames[a],s=n.uniformLocations[o],i=n.uniformLocations[`offset${o}`],u=n.inShapesLocations[`${o}Shape`],l=n.inTexShapesLocations[`${o}TexShape`];if(u){const{uniformShape:a}=ne(n.program.packedInputs,t.shape,t.texData.texShape);switch(a.length){case 1:e.gl.uniform1iv(u,new Int32Array(a));break;case 2:e.gl.uniform2iv(u,new Int32Array(a));break;case 3:e.gl.uniform3iv(u,new Int32Array(a));break;case 4:e.gl.uniform4iv(u,new Int32Array(a))}}if(l&&e.gl.uniform2i(l,t.texData.texShape[0],t.texData.texShape[1]),null!=s)if(t.isUniform)if((0,r.m)(t.shape)<2)e.gl.uniform1f(s,t.uniformValues[0]);else{let n=t.uniformValues;n instanceof Float32Array||(n=new Float32Array(n)),e.gl.uniform1fv(s,n)}else null!=t.texData.slice&&null!=i&&e.gl.uniform1i(i,t.texData.slice.flatOffset),e.setInputMatrixTexture(t.texData.texture.texture,s,a)}));const l=n.outShapeLocation;if(l)switch(o.shape.length){case 1:e.gl.uniform1iv(l,new Int32Array(o.shape));break;case 2:e.gl.uniform2iv(l,new Int32Array(o.shape));break;case 3:e.gl.uniform3iv(l,new Int32Array(o.shape));break;case 4:e.gl.uniform4iv(l,new Int32Array(o.shape))}if(n.outShapeStridesLocation){const t=(0,r.O)(o.shape);switch(o.shape.length){case 2:e.gl.uniform1iv(n.outShapeStridesLocation,new Int32Array(t));break;case 3:e.gl.uniform2iv(n.outShapeStridesLocation,new Int32Array(t));break;case 4:e.gl.uniform3iv(n.outShapeStridesLocation,new Int32Array(t))}}n.outTexShapeLocation&&e.gl.uniform2i(n.outTexShapeLocation,o.texData.texShape[0],o.texData.texShape[1]),n.program.customUniforms&&s&&n.program.customUniforms.forEach(((t,a)=>{const r=n.customUniformLocations[a],o=s[a];if("float"===t.type)e.gl.uniform1fv(r,o);else if("vec2"===t.type)e.gl.uniform2fv(r,o);else if("vec3"===t.type)e.gl.uniform3fv(r,o);else if("vec4"===t.type)e.gl.uniform4fv(r,o);else if("int"===t.type)e.gl.uniform1iv(r,o);else if("ivec2"===t.type)e.gl.uniform2iv(r,o);else if("ivec3"===t.type)e.gl.uniform3iv(r,o);else{if("ivec4"!==t.type)throw Error(`uniform type ${t.type} is not supported yet.`);e.gl.uniform4iv(r,o)}})),e.executeProgram()}(this.gpgpu,g,p,f,o),d.forEach((e=>this.disposeIntermediateTensorInfo(e))),b&&(C=this.endTimer(C),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(C)}));const $=(0,a.e)().get("WEBGL_FLUSH_THRESHOLD");if($>0){const e=(0,a.cc)();e-this.lastGlFlushTime>$&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!(0,a.e)().getBool("WEBGL_LAZILY_UNPACK")&&c.isPacked&&!1===s){const e=this.unpackTensor(u);return this.disposeIntermediateTensorInfo(u),e}return u}compileAndRun(e,n,t,a,r=!1){return t=t||n[0].dtype,this.runWebGLProgram(e,n,t,a,r)}getAndSaveBinary(e,n){return e in this.binaryCache||(this.binaryCache[e]=n()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||((0,a.e)().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=(0,a.g)((()=>{if(!(0,a.e)().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=(0,a.e)().getBool("DEBUG");(0,a.e)().set("DEBUG",!1);const n=this.abs((0,a.f)(1e-8)).dataSync()[0];if((0,a.e)().set("DEBUG",e),n>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const n=this.texData.get(e),{shape:t,dtype:o,values:s,texture:i,usage:u,isPacked:l}=n;if(null!=i)return;const d=null!=this.activeTimers;let p;d&&(p=(0,a.cc)());let h=n.texShape;if(null==h&&(h=function(e,n=!1){let t=(0,a.e)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(n&&(t*=2,1===(e=e.map(((n,t)=>t>=e.length-2?(0,r.n)(e[t]):e[t]))).length&&(e=[2,e[0]])),2!==e.length){const n=(0,r.A)(e);e=n.newShape}let o=(0,r.m)(e);if(e.length<=1&&o<=t)return[1,o];if(2===e.length&&e[0]<=t&&e[1]<=t)return e;if(3===e.length&&e[0]*e[1]<=t&&e[2]<=t)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=t&&e[1]*e[2]<=t)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=t&&e[3]<=t)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=t&&e[1]*e[2]*e[3]<=t)return[e[0],e[1]*e[2]*e[3]];if(n){const n=T(e);let t=2,a=2;return e.length&&([t,a]=S(e)),o=n*(t/2)*(a/2),(0,r.u)(o).map((e=>2*e))}return(0,r.u)(o)}(t,l),n.texShape=h),null!=s){const e=N(t);let r,i=h[1],u=h[0];const x=s instanceof Uint8Array||s instanceof Uint8ClampedArray;!l&&x||([i,u]=f(h[0],h[1])),r=l?new de(e,x):new ce(e,x);const m=x?[u,i]:h,g=this.makeTensorInfo(m,o),b=this.texData.get(g.dataId);b.usage=x?c.PIXELS:c.UPLOAD,b.texShape=m,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(g.dataId),i,u,s);const v=[[u,i]],C=!0,$=this.runWebGLProgram(r,[g],o,v,C),I=this.texData.get($.dataId);n.texture=I.texture,n.texShape=I.texShape,n.isPacked=I.isPacked,n.usage=I.usage,this.disposeIntermediateTensorInfo(g),this.texData.delete($.dataId),n.values=null,d&&(this.uploadWaitMs+=(0,a.cc)()-p)}else{const e=this.acquireTexture(h,u,o,l);n.texture=e}}convertAndCacheOnCPU(e,n){const t=this.texData.get(e),{dtype:a}=t;return this.releaseGPUData(e),null!=n&&(t.values=function(e,n){if("float32"===n||"complex64"===n)return e;if("int32"===n||"bool"===n){const t="int32"===n?new Int32Array(e.length):new Uint8Array(e.length);for(let n=0;n<t.length;++n)t[n]=Math.round(e[n]);return t}throw new Error(`Unknown dtype ${n}`)}(n,a)),t.values}acquireTexture(e,n,t,a){if(this.numBytesInGPU+=this.computeBytes(e,t),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,n,a)}computeBytes(e,n){return e[0]*e[1]*(0,r.G)(n)}}et.nextDataId=0,(0,a.cf)()&&(0,a.cg)("webgl",(()=>new et),2);class nt{constructor(e,n,t){this.variableNames=["A","B"],this.outputShape=(0,a.an)(n,t),this.enableShapeUniforms=oe(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class tt{constructor(e,n,t,o=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=(0,a.an)(n,t);const s=this.outputShape.length;this.enableShapeUniforms=oe(s);let i="";if(o)if(0===s||1===(0,r.m)(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i=`\n          ${ee(s)} coords = getOutputCoords();\n        `,1===s)this.enableShapeUniforms?i+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":i+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=Wn("coords",s);this.enableShapeUniforms?i+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= outShape[${s} - 2];\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= outShape[${s} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:i+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${i}\n\n        setOutput(result);\n      }\n    `}}function at(e){const{inputs:n,backend:t}=e,{x:a}=n;return t.incRef(a.dataId),{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}const rt={kernelName:a.ch,backendName:"webgl",kernelFunc:at};function ot(e){const{inputs:n,backend:t}=e,{real:a,imag:r}=n,o=t.makeTensorInfo(a.shape,"complex64"),s=t.texData.get(o.dataId),i=at({inputs:{x:a},backend:t}),u=at({inputs:{x:r},backend:t});return s.complexTensorInfos={real:i,imag:u},o}const st={kernelName:a.ci,backendName:"webgl",kernelFunc:ot},it="return (a < 0.) ? b * a : a;",ut="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",lt={kernelName:a.cj,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o}=n,{alpha:s}=r,i=t.makeTensorInfo([],"float32",(0,a.c4)(s,"float32")),u=(0,a.e)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new tt(ut,o.shape,i.shape):new nt(it,o.shape,i.shape),l=t.runWebGLProgram(u,[o,i],"float32");return t.disposeIntermediateTensorInfo(i),l}},ct="return (a < 0.) ? b * a : a;",dt="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",pt={kernelName:a.ck,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t}=e,{x:r,alpha:o}=n,s=(0,a.e)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new tt(dt,r.shape,o.shape):new nt(ct,r.shape,o.shape);return t.runWebGLProgram(s,[r,o],"float32")}};function ht({opSnippet:e,packedOpSnippet:n,cpuKernelImpl:t,dtype:r}){return({inputs:o,backend:s})=>{const{x:i}=o,u=s,l=r||i.dtype;if(u.shouldExecuteOnCPU([i])&&null!=t){const e=u.texData.get(i.dataId),n=t(e.values,l);return u.makeTensorInfo(i.shape,l,n)}let c;return c=(0,a.e)().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=n?new Yn(i.shape,n):new Hn(i.shape,e),u.runWebGLProgram(c,[i],l)}}function ft({opSnippet:e,packedOpSnippet:n,checkOutOfBounds:t=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:i}){return({inputs:u,backend:l})=>{const{a:c,b:d}=u,p=l;if(r&&"complex64"===c.dtype){const n=p.texData.get(c.dataId),t=p.texData.get(d.dataId),[r,o]=[[n.complexTensorInfos.real,t.complexTensorInfos.real],[n.complexTensorInfos.imag,t.complexTensorInfos.imag]].map((n=>{const[t,r]=n,o={dataId:t.dataId,dtype:t.dtype,shape:c.shape},s={dataId:r.dataId,dtype:r.dtype,shape:d.shape},i=new nt(e,c.shape,d.shape);return p.runWebGLProgram(i,[o,s],(0,a.c6)(t.dtype,r.dtype))})),s=ot({inputs:{real:r,imag:o},backend:p});return p.disposeIntermediateTensorInfo(r),p.disposeIntermediateTensorInfo(o),s}const h=i||(0,a.c6)(c.dtype,d.dtype);if(("string"===c.dtype||"string"===d.dtype||p.shouldExecuteOnCPU([c,d]))&&null!=s){const e=p.texData.get(c.dataId).values,n=p.texData.get(d.dataId).values,t="string"===c.dtype?(0,o.f)(e):e,a="string"===c.dtype?(0,o.f)(n):n,[r,i]=s(c.shape,d.shape,t,a,h),u=p.makeTensorInfo(i,h);return p.texData.get(u.dataId).values=r,u}let f;return f=(0,a.e)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=n?new tt(n,c.shape,d.shape,t):new nt(e,c.shape,d.shape),p.runWebGLProgram(f,[c,d],h)}}function xt(e,n=!1){if("linear"===e)return"return x;";if("relu"===e)return n?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return n?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return n?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return n?dt:ct;if("leakyrelu"===e)return n?ut:it;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class mt{constructor(e,n,t,a=!1,r=!1,o=!1,s=null,i=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.enableShapeUniforms=oe(this.outputShape.length);const l=a?e[1]:e[2],c=Math.ceil(l/2),d=a?"i * 2, rc.y":"rc.y, i * 2",p=r?"rc.z, i * 2":"i * 2, rc.z",h=a?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let x="",m="";s&&(x=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`vec4 activation(vec4 x) {\n          ${s}\n        }`,m="result = activation(result);");const g=o?"result += getBiasAtOutCoords();":"";o&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let b="rc.x",v="rc.x";e[0]<n[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:n[0]<e[0]&&(v=`int(min(float(rc.x), ${n[0]-1}.))`),this.userCode=`\n      ${x}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${v};\n          vec4 a = getMatrixA(batchA, ${d});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${f[0]});\n          result += (${h[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${g}\n\n        ${m}\n\n        setOutput(result);\n      }\n    `}}class gt{constructor(e,n,t){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=(0,a.an)(n,t),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const bt="return a * b;";function vt(e){const{inputs:n,backend:t}=e,{a:r,b:o}=n,s=(0,a.c6)(r.dtype,o.dtype);if("complex64"===r.dtype){const e=t.texData.get(r.dataId),n=t.texData.get(o.dataId),a=new gt("return areal * breal - aimag * bimag;",r.shape,o.shape),s=new gt("return areal * bimag + aimag * breal;",r.shape,o.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:n.complexTensorInfos.real.dataId,dtype:n.complexTensorInfos.real.dtype,shape:o.shape},{dataId:n.complexTensorInfos.imag.dataId,dtype:n.complexTensorInfos.imag.dtype,shape:o.shape}],u=t.runWebGLProgram(a,i,"float32"),l=t.runWebGLProgram(s,i,"float32"),c=ot({inputs:{real:u,imag:l},backend:t});return t.disposeIntermediateTensorInfo(u),t.disposeIntermediateTensorInfo(l),c}if(t.shouldExecuteOnCPU([r,o])){const e=t.texData.get(r.dataId),n=t.texData.get(o.dataId),[a,i]=mn(r.shape,o.shape,e.values,n.values,s),u=t.makeTensorInfo(i,s);return t.texData.get(u.dataId).values=a,u}let i;return i=(0,a.e)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new tt(bt,r.shape,o.shape):new nt(bt,r.shape,o.shape),t.runWebGLProgram(i,[r,o],s)}const Ct={kernelName:a.cl,backendName:"webgl",kernelFunc:vt};function $t(e){const{inputs:n,backend:t,attrs:a}=e,{x:o}=n,{shape:s}=a,i=t,u=(0,r.m)(o.shape),l=(0,r.y)(s,u),c=(0,r.m)(l);(0,r.a)(u===c,(()=>`The new shape (${l}) has ${c} elements and the old shape (${o.shape}) has ${u} elements. The new shape and old shape must have the same number of elements.`));const d=i.texData.get(o.dataId);return!d.isPacked||O(o.shape,l)||null!==d.texture&&O(d.shape,l)?(i.incRef(o.dataId),{dataId:o.dataId,shape:l,dtype:o.dtype}):function(e,n,t){const a=[T(e.shape),...S(e.shape)],r={dtype:e.dtype,shape:a,dataId:e.dataId},o=[T(n),...S(n)],s=new Un(o,a),i=[a],u=t.runWebGLProgram(s,[r],e.dtype,i,!0);return{dataId:u.dataId,shape:n,dtype:u.dtype}}(o,l,i)}const It={kernelName:a.cm,backendName:"webgl",kernelFunc:$t};class wt{constructor(e,n){this.variableNames=["x"];const{windowSize:t,batchSize:a,inSize:o,outSize:s}=e;this.outputShape=[a,s];const i=4*Math.floor(t/4),u=t%4;let l="sumValue += dot(values, ones);";if(null!=n){const e=1/n;l=`sumValue += dot(values * ${(0,r.p)(e)?e.toPrecision(2):e}, ones);`}let c="";o%t>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${t};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===u}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class yt{constructor(e,n){this.variableNames=["x"];const{windowSize:t,batchSize:a,inSize:r,outSize:o}=e;this.outputShape=[a,o];let s="0.0",i="";"prod"===n?s="1.0":"min"===n?(s="1.0 / 1e-20",i="min"):"max"===n&&(s="-1.0 / 1e-20",i="max");let u=`${n}(${n}(${n}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===n?u="sumValue":"prod"===n?u="prodValue":"all"===n?u="allValue":"any"===n&&(u="anyValue");const l=4*Math.floor(t/4),c=t%4;let d=`\n      if (${"sum"===n}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===n}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n        if (${"min"===n} || ${"max"===n}) {\n          minMaxValue = ${i}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===n?(s="1.0",d="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===n&&(s="0.0",d="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let h="";r%t>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${s};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${h}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${t};\n\n        vec4 minMaxValue = vec4(${s});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${d}\n        }\n        setOutput(${u});\n      }\n    `}}function Rt(e,n,t,a){const r=function(e){const n=[];for(;0===n.length||1!==n[n.length-1].outSize;){const t=n.length?n[n.length-1].outSize:e[1],a=(0,o.s)(t);n.push({inSize:t,windowSize:a,outSize:Math.ceil(t/a)})}return n}(e.shape);let s=e;for(let o=0;o<r.length;o++){const{inSize:i,windowSize:u,outSize:l}=r[o];let c,d;c="mean"===t?0===o?new wt({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},i):new wt({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l}):new yt({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},t),d=s,s=a.runWebGLProgram(c,[s],n),d.dataId!==e.dataId&&a.disposeIntermediateTensorInfo(d)}return s}class kt{constructor(e,n){this.variableNames=["A"];const t=new Array(e.length);for(let a=0;a<t.length;a++)t[a]=e[n[a]];this.outputShape=t,this.rank=t.length;const a=ee(this.rank),r=function(e){const n=e.length;if(n>6)throw Error(`Transpose for rank ${n} is not yet supported`);const t=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],a=new Array(n);for(let n=0;n<e.length;n++)a[e[n]]=t[n];return a.join()}(n);this.userCode=`\n    void main() {\n      ${a} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class Tt{constructor(e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const t=new Array(e.length);for(let a=0;a<t.length;a++)t[a]=e[n[a]];if(this.outputShape=t,this.rank=t.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const a=ee(this.rank),r=Bn("rc",this.rank),o=new Array(this.rank);for(let e=0;e<n.length;e++)o[n[e]]=r[e];const s=`vec2(${o.slice(-2).join()})`,i=`++${r[this.rank-1]} < ${t[this.rank-1]}`,u=`getChannel(getA(${o.join()}), ${s})`;this.userCode=`\n    void main() {\n      ${a} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${i}) {\n        result[1] = ${u};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${t[this.rank-2]}) {\n        result[2] = ${u};\n        if(${i}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function St(e,n,t){const r=(0,a.e)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Tt(e.shape,n):new kt(e.shape,n);return t.runWebGLProgram(r,[e],e.dtype)}function Nt(e){const{inputs:n,backend:t,attrs:o}=e,{x:s}=n,{axis:i,keepDims:u}=o;return function(e,n,t,o){const s=n,i=e.shape.length,u=(0,r.z)(s,e.shape);let l=u;const c=(0,a.cn)(l,i),d=null!=c;let p=e;d&&(p=St(e,c,o),l=(0,a.co)(l.length,i)),(0,a.cp)("sum",l,i);const[h,f]=(0,a.c5)(p.shape,l);let x=h;t&&(x=(0,a.aP)(h,u));const m=(0,r.m)(f),g=$t({inputs:{x:p},attrs:{shape:[(0,r.m)(e.shape)/m,m]},backend:o}),b=Rt(g,(0,a.cq)(e.dtype),"sum",o),v=$t({inputs:{x:b},attrs:{shape:x},backend:o});return o.disposeIntermediateTensorInfo(g),o.disposeIntermediateTensorInfo(b),d&&o.disposeIntermediateTensorInfo(p),v}(s,i,u,t)}const Et={kernelName:a.cr,backendName:"webgl",kernelFunc:Nt};function Ot(e){const{inputs:n,backend:t,attrs:a}=e,{x:r}=n,{perm:o}=a,s=t,i=r.shape.length,u=new Array(i);for(let e=0;e<u.length;e++)u[e]=r.shape[o[e]];let l;if(s.shouldExecuteOnCPU([r])){const e=s.texData.get(r.dataId).values,n=Ln(e,r.shape,r.dtype,o,u);l=s.makeTensorInfo(u,r.dtype),s.texData.get(l.dataId).values=n}else l=St(r,o,s);return l}const At={kernelName:a.A,backendName:"webgl",kernelFunc:Ot};function Ft({a:e,b:n,transposeA:t,transposeB:o,backend:s,bias:i=null,preluActivationWeights:u=null,leakyreluAlpha:l=0,activation:c=null}){const d=e.shape.length,p=n.shape.length,h=t?e.shape[d-2]:e.shape[d-1],f=o?n.shape[p-1]:n.shape[p-2],x=t?e.shape[d-1]:e.shape[d-2],m=o?n.shape[p-2]:n.shape[p-1],g=e.shape.slice(0,-2),b=n.shape.slice(0,-2),v=(0,r.m)(g),C=(0,r.m)(b),$=(0,a.an)(e.shape.slice(0,-2),n.shape.slice(0,-2)).concat([x,m]);(0,r.a)(h===f,(()=>`Error in matMul: inner shapes (${h}) and (${f}) of Tensors with shapes ${e.shape} and ${n.shape} and transposeA=${t} and transposeB=${o} must match.`));const I=t?[v,h,x]:[v,x,h],w=o?[C,m,f]:[C,f,m],y=$t({inputs:{x:e},backend:s,attrs:{shape:I}}),R=$t({inputs:{x:n},backend:s,attrs:{shape:w}}),k=[y,R],T=Math.max(v,C),S=t?y.shape[1]:y.shape[2],N=null!=i,E=null!=u,O="leakyrelu"===c,A=null!=c?xt(c,!0):null;let F;if((1===x||1===m)&&S>1e3&&!1===(N||E||O||null!=A)){let e=y,n=R;t&&(e=Ot({inputs:{x:y},backend:s,attrs:{perm:[0,2,1]}}),k.push(e)),o&&(n=Ot({inputs:{x:R},backend:s,attrs:{perm:[0,2,1]}}),k.push(n));const a=1===m;let r=e;1!==m&&(r=$t({inputs:{x:e},backend:s,attrs:{shape:[T,S,1]}}),k.push(r));const i=1===m?2:1;let u=n;a&&(u=$t({inputs:{x:n},backend:s,attrs:{shape:[T,1,S]}}),k.push(u));const l=vt({inputs:{a:r,b:u},backend:s});F=Nt({inputs:{x:l},backend:s,attrs:{axis:i,keepDims:!0}}),k.push(l)}else{const r=(0,a.c6)(e.dtype,n.dtype),c=new mt(I,w,[T,x,m],t,o,N,A,E,O),d=[y,R];if(null!=i&&d.push(i),E&&d.push(u),O){const e=s.makeTensorInfo([],"float32",(0,a.c4)(l,"float32"));d.push(e),k.push(e)}F=s.runWebGLProgram(c,d,r)}const _=$t({inputs:{x:F},backend:s,attrs:{shape:$}});k.push(F);for(const e of k)s.disposeIntermediateTensorInfo(e);return _}const _t={kernelName:a.bK,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{a:r,b:o,bias:s,preluActivationWeights:i}=n,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:d}=a;return Ft({a:r,b:o,transposeA:u,transposeB:l,backend:t,bias:s,preluActivationWeights:i,leakyreluAlpha:d,activation:c})}},Dt="return abs(x);",Lt={kernelName:a.K,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t}=e,{x:r}=n;if(t.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=t.texData.get(r.dataId),n=wn(e.values);return t.makeTensorInfo(r.shape,r.dtype,n)}let o;return o=(0,a.e)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Yn(r.shape,Dt):new Hn(r.shape,Dt),t.runWebGLProgram(o,[r],r.dtype)}},Pt=ht({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),Bt={kernelName:a.L,backendName:"webgl",kernelFunc:Pt},Wt=ht({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),Vt={kernelName:a.M,backendName:"webgl",kernelFunc:Wt},Ut="return a + b;",Gt=ft({opSnippet:Ut,packedOpSnippet:Ut,supportsComplex:!0,cpuKernelImpl:Ye}),Mt={kernelName:a.H,backendName:"webgl",kernelFunc:Gt};class zt{constructor(e,n){this.outputShape=[],this.outputShape=e,this.variableNames=n.map(((e,n)=>`T${n}`));const t=[];this.variableNames.forEach((e=>{t.push(`float v${e} = get${e}AtOutCoords();`)}));const a=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${t.join("\n        ")}\n\n        float result = ${a};\n        setOutput(result);\n      }\n    `}}class Xt{constructor(e,n){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=n.map(((e,n)=>`T${n}`));const t=[];this.variableNames.forEach((e=>{t.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const a=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${t.join("\n        ")}\n\n        vec4 result = ${a};\n        setOutput(result);\n      }\n    `}}const Ht={kernelName:a.N,backendName:"webgl",kernelFunc:function e(n){const{inputs:t,backend:r}=n,o=t;if(1===o.length)return at({inputs:{x:o[0]},backend:r});if(o.length>(0,a.e)().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const n=Math.floor(o.length/2),t=e({inputs:o.slice(0,n),backend:r}),a=e({inputs:o.slice(n),backend:r});return e({inputs:[t,a],backend:r})}const s=o.map((e=>e.dtype)).reduce(((e,n)=>(0,a.c6)(e,n))),i=o.map((e=>e.shape)),u=(0,a.e)().getBool("WEBGL_PACK")?new Xt(o[0].shape,i):new zt(o[0].shape,i);return r.runWebGLProgram(u,o,s)}},jt={kernelName:a.P,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:o}=e,{x:s}=n,{axis:i,keepDims:u}=o,l=s.shape.length,c=(0,r.z)(i,s.shape);let d=c;const p=(0,a.cn)(d,l);let h=s;null!=p&&(h=Ot({inputs:{x:s},backend:t,attrs:{perm:p}}),d=(0,a.co)(d.length,l)),(0,a.cp)("all",d,l);const[f,x]=(0,a.c5)(h.shape,d),m=$t({inputs:{x:h},backend:t,attrs:{shape:[-1,(0,r.m)(x)]}}),g=Rt(m,m.dtype,"all",t);let b;return b=$t(u?{inputs:{x:g},backend:t,attrs:{shape:(0,a.aP)(f,c)}}:{inputs:{x:g},backend:t,attrs:{shape:f}}),t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(g),null!=p&&t.disposeIntermediateTensorInfo(h),b}},Kt={kernelName:a.Q,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:o}=e,{x:s}=n,{axis:i,keepDims:u}=o,l=s.shape.length,c=(0,r.z)(i,s.shape);let d=c;const p=(0,a.cn)(d,l);let h=s;null!=p&&(h=Ot({inputs:{x:s},backend:t,attrs:{perm:p}}),d=(0,a.co)(d.length,l)),(0,a.cp)("any",d,l);const[f,x]=(0,a.c5)(h.shape,d),m=$t({inputs:{x:h},backend:t,attrs:{shape:[-1,(0,r.m)(x)]}}),g=Rt(m,m.dtype,"any",t);let b;return b=$t(u?{inputs:{x:g},backend:t,attrs:{shape:(0,a.aP)(f,c)}}:{inputs:{x:g},backend:t,attrs:{shape:f}}),t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(g),null!=p&&t.disposeIntermediateTensorInfo(h),b}};class Yt{constructor(e,n,t){this.variableNames=["A"];const{windowSize:a,batchSize:r,outSize:o}=e;t||this.variableNames.push("bestIndicesA"),this.outputShape=[r,o];const s="max"===n?">":"<",i=t?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${a};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${a}; i++) {\n          int inIdx = ${i};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${s} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class qt{constructor(e,n,t,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,(0,r.a)(e.length>2,(()=>`Packed arg${t.charAt(0).toUpperCase()+t.slice(1)} supports only inputs with rank above 2.`));const o=e[e.length-1],s=Math.ceil(o/n);this.outputShape=e.slice(0,-1),s>1&&this.outputShape.push(s),a||this.variableNames.push("bestIndicesA");const i=this.outputShape,u=i.length,l=ee(u),c=Wn("coords",u);let d,p;if(1===s){p=u+1;const e=ee(p);d=`\n        ${e} sourceLocR = ${e}(${c.join()}, 0);\n        ++${c[u-1]};\n        ${e} sourceLocG = ${e}(${c.join()}, 0);\n        ++${c[u-2]};\n        ${e} sourceLocA = ${e}(${c.join()}, 0);\n        --${c[u-1]};\n        ${e} sourceLocB = ${e}(${c.join()}, 0);\n        --${c[u-2]};`}else p=u,d=`\n        ${l} sourceLocR = coords;\n        ++${c[u-1]};\n        ${l} sourceLocG = coords;\n        ++${c[u-2]};\n        ${l} sourceLocA = coords;\n        --${c[u-1]};\n        ${l} sourceLocB = coords;\n        --${c[u-2]};`;const h=["x","y","z","w","u","v"].slice(0,p),f="."+h[p-1],x=h.map((e=>"int "+e)),m=Wn("sourceLocR",p-1).concat("inIdx.r"),g=Wn("sourceLocG",p-1).concat("inIdx.g"),b=Wn("sourceLocB",p-1).concat("inIdx.b"),v=Wn("sourceLocA",p-1).concat("inIdx.a"),C="max"===t?"greaterThan":"lessThan",$=a?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${v.join()})));`,I=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${v.join()}) : 0.)`,w=a?"":`\n      float getBestIndicesAChannel(${x.join()}) {\n        return getChannel(getBestIndicesA(${h.join()}),\n                                          vec2(${h.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${x.join()}) {\n        return getChannel(getA(${h.join()}),\n                               vec2(${h.slice(-2).join()}));\n      }\n      ${w}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${c[u-1]} < ${i[u-1]-1};\n        bool hasNextRow = ${c[u-2]} < ${i[u-2]-1};\n        ${d}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${n};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${I};\n\n        for (int i = 0; i < ${n}; i++) {\n          inIdx = srcIdx;\n          ${$}\n          vec4 candidate = ${I};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${C}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function Qt(e,n,t,a=null){let r=n.shape[0],s=n.shape[1];null!=a&&(r=a.shape[0],s=a.shape[1]);const i=(0,o.s)(s),u={windowSize:i,inSize:s,batchSize:r,outSize:Math.ceil(s/i)},l=new Yt(u,t,null==a),c=[n];null!=a&&c.push(a);const d=e.runWebGLProgram(l,c,"int32");if(1===d.shape[1])return d;const p=Qt(e,n,t,d);return e.disposeIntermediateTensorInfo(d),p}function Zt(e,n,t,a=null){const r=null!=a?a.shape:n.shape,s=r[r.length-1],i=(0,o.s)(s),u=new qt(r,i,t,null==a),l=null==a?[n]:[n,a],c=e.runWebGLProgram(u,l,"int32");if(c.shape.length===n.shape.length){const a=Zt(e,n,t,c);return e.disposeIntermediateTensorInfo(c),a}return c}function Jt(e,n,t,o){const s=[t];if((0,a.cp)("arg"+o.charAt(0).toUpperCase()+o.slice(1),s,n.shape.length),!(0,a.e)().getBool("WEBGL_PACK_REDUCE")||n.shape.length<=2){const t=[],i=e.texData.get(n.dataId);let u=n;null!==i&&i.isPacked&&(u=e.unpackTensor(n),t.push(u));const[l,c]=(0,a.c5)(u.shape,s),d=(0,r.m)(c),p=$t({inputs:{x:u},backend:e,attrs:{shape:[-1,d]}});t.push(p);const h=Qt(e,p,o);t.push(h);const f=$t({inputs:{x:h},backend:e,attrs:{shape:l}});return t.forEach((n=>e.disposeIntermediateTensorInfo(n))),f}return Zt(e,n,o)}const ea={kernelName:a.S,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:o}=e,{x:s}=n,{axis:i}=o;let u=(0,r.z)(i,s.shape);const l=(0,a.cn)(u,s.shape.length);let c=s;const d=[];null!=l&&(c=Ot({inputs:{x:s},backend:t,attrs:{perm:l}}),d.push(c),u=(0,a.co)(u.length,c.shape.length)),(0,a.cp)("argMax",[u[0]],c.shape.length);const p=Jt(t,c,u[0],"max");return d.forEach((e=>t.disposeIntermediateTensorInfo(e))),p}},na={kernelName:a.U,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:o}=e,{x:s}=n,{axis:i}=o;let u=(0,r.z)(i,s.shape);const l=(0,a.cn)(u,s.shape.length);let c=s;const d=[];null!=l&&(c=Ot({inputs:{x:s},backend:t,attrs:{perm:l}}),d.push(c),u=(0,a.co)(u.length,c.shape.length)),(0,a.cp)("argMin",[u[0]],c.shape.length);const p=Jt(t,c,u[0],"min");return d.forEach((e=>t.disposeIntermediateTensorInfo(e))),p}},ta=ht({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),aa={kernelName:a.V,backendName:"webgl",kernelFunc:ta},ra=ht({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),oa={kernelName:a.W,backendName:"webgl",kernelFunc:ra},sa=ht({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),ia={kernelName:a.X,backendName:"webgl",kernelFunc:sa},ua=ft({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),la={kernelName:a.Y,backendName:"webgl",kernelFunc:ua},ca=ht({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),da={kernelName:a.Z,backendName:"webgl",kernelFunc:ca};class pa{constructor(e,n,t,a=!1,r=!1){if(this.variableNames=["x"],"avg"===n&&t)throw new Error("Cannot compute positions for average pool.");const o=e.filterWidth,s=e.strideHeight,i=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,d=e.effectiveFilterWidth,p=e.padInfo.top,h=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===n,x=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,m=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let g="0.0";if(f||(g="-1.0 / 1e-20"),t){const n=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${s}, ${i});\n        const ivec2 pads = ivec2(${p}, ${h});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${n} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${a?r?x:m:`wR * ${d} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${n}(${n}(${n}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===n&&(b="avgValue / count");const v=4*Math.floor(o/4),C=o%4,$=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${s}, ${i});\n      const ivec2 pads = ivec2(${p}, ${h});\n      const float initializationValue = ${g};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${g});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${v}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${$}\n          }\n\n          int xC = xCCorner + ${v};\n          if (${1===C}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${$}\n          } else if (${2===C}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${$}\n          } else if (${3===C}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${$}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class ha{constructor(e,n,t,a=!1,r=!1){if(this.variableNames=["x"],"avg"===n&&t)throw new Error("Cannot compute positions for average pool.");const o=e.filterWidth,s=e.strideDepth,i=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,d=e.dilationWidth,p=e.effectiveFilterDepth,h=e.effectiveFilterHeight,f=e.effectiveFilterWidth,x=e.padInfo.front,m=e.padInfo.top,g=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===n;let v="0.0";if(b||(v="-1.0 / 1e-20"),t){const n=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${s}, ${i}, ${u});\n        const ivec3 pads = ivec3(${x}, ${m}, ${g});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${h};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${d}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${n} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${a?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${h} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let C=`${n}(${n}(${n}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===n&&(C="avgValue / count");const $=4*Math.floor(o/4),I=o%4,w=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${s}, ${i}, ${u});\n      const ivec3 pads = ivec3(${x}, ${m}, ${g});\n      const float initializationValue = ${v};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${v});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${$}; wC += 4) {\n              int xC = xCCorner + wC * ${d};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${d}, ch)\n              );\n\n              ${w}\n            }\n\n            int xC = xCCorner + ${$};\n            if (${1===I}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${w}\n            } else if (${2===I}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${w}\n            } else if (${3===I}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                initializationValue\n              );\n\n              ${w}\n            }\n          }\n          setOutput(${C});\n        }\n      }\n    `}}const fa={kernelName:a.a0,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:o}=e,{x:s}=n;P(s,"avgPool");const{filterSize:i,strides:u,pad:l,dimRoundingMode:c}=o;(0,r.a)((0,a._)(u,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${u} and dilations '1'`));const d=(0,a.cs)(s.shape,i,u,1,l,c);if(1===d.filterWidth&&1===d.filterHeight&&(0,r.b)(d.inShape,d.outShape))return at({inputs:{x:s},backend:t});const p=new pa(d,"avg",!1);return t.runWebGLProgram(p,[s],"float32")}},xa={kernelName:a.a1,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o}=n,{filterSize:s,strides:i,pad:u,dimRoundingMode:l,dataFormat:c}=r,d=(0,a.ct)(o.shape,s,i,[1,1,1],u,l,c),p=new ha(d,"avg",!1);return t.runWebGLProgram(p,[o],"float32")}};class ma{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const n=e.filterHeight,t=e.filterWidth,a=e.strideHeight,r=e.strideWidth,o=e.dilationHeight,s=e.dilationWidth,i=e.effectiveFilterHeight,u=e.effectiveFilterWidth,l=i-1-e.padInfo.top,c=u-1-e.padInfo.left,d=1/(n*t);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${d});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${o}) {\n          float dyR = float(dyRCorner + wR) / ${a}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${s}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ga{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const n=e.filterDepth,t=e.filterHeight,a=e.filterWidth,r=e.strideDepth,o=e.strideHeight,s=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterDepth,d=e.effectiveFilterHeight,p=e.effectiveFilterWidth,h=c-1-e.padInfo.front,f=d-1-e.padInfo.top,x=p-1-e.padInfo.left,m=1/(n*t*a);this.userCode=`\n      const ivec3 pads = ivec3(${h}, ${f}, ${x});\n      const float avgMultiplier = float(${m});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${d};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${o}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const ba={kernelName:a.cu,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{dy:o,input:s}=n,i=s,{filterSize:u,strides:l,pad:c,dimRoundingMode:d}=r,p=(0,a.ct)(i.shape,u,l,[1,1,1],c,d),h=new ga(p);return t.runWebGLProgram(h,[o],i.dtype)}},va={kernelName:a.cv,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{dy:o,input:s}=n,i=s;P([o,s],"avgPoolGrad");const{filterSize:u,strides:l,pad:c}=r,d=(0,a.cs)(i.shape,u,l,1,c),p=new ma(d);return t.runWebGLProgram(p,[o],i.dtype)}},Ca={kernelName:a.B,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{a:r,b:o}=n,{transposeA:s,transposeB:i}=a;return Ft({a:r,b:o,transposeA:s,transposeB:i,backend:t})}};class $a{constructor(e,n,t,r,o,s){this.outputShape=[],this.variableNames=["x","mean","variance"],(0,a.an)(e,n),(0,a.an)(e,t);let i="0.0";null!=r&&((0,a.an)(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let u="1.0";null!=o&&((0,a.an)(e,o),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${u};\n        float inv = scale * inversesqrt(variance + float(${s}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Ia{constructor(e,n,t,r,o,s){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],(0,a.an)(e,n),(0,a.an)(e,t);let i="vec4(0.0)";null!=r&&((0,a.an)(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let u="vec4(1.0)";null!=o&&((0,a.an)(e,o),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${u};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${s}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const wa={kernelName:a.a7,backendName:"webgl",kernelFunc:({inputs:e,backend:n,attrs:t})=>{const{x:o,mean:s,variance:i,offset:u,scale:l}=e;(0,r.a)(s.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),(0,r.a)(null==u||s.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),(0,r.a)(null==l||s.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:c}=t;null==c&&(c=.001);const d=[o,s,i];let p=null;null!=u&&(p=u.shape,d.push(u));let h=null;null!=l&&(h=l.shape,d.push(l));const f=(0,a.e)().getBool("WEBGL_PACK_NORMALIZATION")?new Ia(o.shape,s.shape,i.shape,p,h,c):new $a(o.shape,s.shape,i.shape,p,h,c);return n.runWebGLProgram(f,d,d[0].dtype)}};class ya{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const n=ee(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=function(e){if(1===e)return"sourceLoc";if(e<=6)return Ra.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let a;a=`\n        ${n} sourceLoc;\n        ${n} coords = getOutputCoords();\n        ${e.map(((e,n)=>`sourceLoc.${Ra[n]} = start[${n}] + coords.${Ra[n]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${a}\n        setOutput(getSource(${t}));\n      }\n    `}}const Ra=["x","y","z","w","u","v"];class ka{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=ee(this.rank),t=Wn("coords",this.rank),a=Wn("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${a.slice(-2).join()})`,o=`getChannel(getSource(${a.join()}), ${r})`,s=`\n      result.x = ${o};\n      if (++${t[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${a[this.rank-1]};\n        result.y = ${o};\n        --${a[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${t[this.rank-1]};\n      if (++${t[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${a[this.rank-2]};\n        result.z = ${o};\n        if (++${t[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${a[this.rank-1]};\n          result.w = ${o};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${n}(${e.map(((e,n)=>`start[${n}]`)).join()});`:e.map(((e,n)=>`${a[n]} = ${t[n]} + start[${n}];`)).join("\n");this.userCode=`\n      void main() {\n        ${n} coords = getOutputCoords();\n        ${n} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${s}\n        ${i}\n        setOutput(result);\n      }\n    `}}function Ta(e){const{inputs:n,backend:t,attrs:s}=e,{x:i}=n,{begin:u,size:l}=s,[c,d]=(0,o.t)(i,u,l);if((0,o.u)(i,c,d),0===(0,r.m)(d))return t.makeTensorInfo(d,i.dtype,[]);if(t.shouldExecuteOnCPU([i])||"string"===i.dtype){const e=t.texData.get(i.dataId),n=yn(e.values,c,d,i.shape,i.dtype);return t.makeTensorInfo(d,i.dtype,n)}const{isPacked:p}=t.texData.get(i.dataId),h=(0,o.i)(i.shape,c,d);if(p||!h){const e=(0,a.e)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ka(d):new ya(d),n=[c];return t.runWebGLProgram(e,[i],i.dtype,n)}return t.uploadToGPU(i.dataId),function(e,n,t,a){const s=a.texData.get(e.dataId),i=a.makeTensorInfo(t,e.dtype),u=a.texData.get(i.dataId);Object.assign(u,s),u.refCount=1,u.shape=t,u.dtype=e.dtype;let l=(0,o.c)(n,(0,r.O)(e.shape));s.slice&&(l+=s.slice.flatOffset),u.slice={flatOffset:l,origDataId:s.slice&&s.slice.origDataId||e.dataId};const c=a.dataRefCount.get(u.slice.origDataId)||1;return a.dataRefCount.set(u.slice.origDataId,c+1),i}(i,c,d,t)}const Sa={kernelName:a.a4,backendName:"webgl",kernelFunc:Ta},Na={kernelName:a.a6,backendName:"webgl",kernelFunc:e=>{const{inputs:n,backend:t,attrs:a}=e,{x:s}=n,{blockShape:i,crops:u}=a;(0,r.a)(s.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const l=i.reduce(((e,n)=>e*n)),c=(0,o.v)(s.shape,i,l),d=(0,o.w)(c.length,i.length),p=(0,o.x)(s.shape,i,l),h=(0,o.y)(u,i.length),f=(0,o.z)(p,u,i.length),x=[],m=$t({inputs:{x:s},backend:t,attrs:{shape:c}}),g=Ot({inputs:{x:m},backend:t,attrs:{perm:d}}),b=$t({inputs:{x:g},backend:t,attrs:{shape:p}}),v=Ta({inputs:{x:b},backend:t,attrs:{begin:h,size:f}});return x.push(m),x.push(g),x.push(b),x.forEach((e=>t.disposeIntermediateTensorInfo(e))),v}},Ea={kernelName:a.a8,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{x:r,weights:o}=n,{size:s}=a,i=t.readSync(r.dataId),u=t.readSync(o.dataId),l=qe(i,u,o.dtype,o.shape,s);return t.makeTensorInfo([s],o.dtype,l)}},Oa={kernelName:a.a9,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t}=e,{s0:r,s1:o}=n,s=t.readSync(r.dataId),i=t.readSync(o.dataId),u=(0,a.an)(Array.from(s),Array.from(i));return t.makeTensorInfo([u.length],"int32",Int32Array.from(u))}},Aa=ft({opSnippet:"return float(a != b);",cpuKernelImpl:bn,dtype:"bool"}),Fa={kernelName:a.b1,backendName:"webgl",kernelFunc:Aa};function _a(e){const{inputs:n,backend:t}=e,{input:a}=n;return at({inputs:{x:t.texData.get(a.dataId).complexTensorInfos.real},backend:t})}const Da={kernelName:a.b8,backendName:"webgl",kernelFunc:_a},La={kernelName:a.cw,backendName:"webgl",kernelFunc:function e(n){const{inputs:t,backend:o,attrs:s}=n,{x:i}=t,{dtype:u}=s;if("complex64"===u){if("complex64"===i.dtype)return at({inputs:{x:i},backend:o});const n=(0,a.z)(i.shape),t=e({inputs:{x:i},backend:o,attrs:{dtype:"float32"}}),r=ot({inputs:{real:t,imag:n},backend:o});return n.dispose(),o.disposeIntermediateTensorInfo(t),r}if("complex64"===i.dtype){const n=_a({inputs:{input:i},backend:o}),t=e({inputs:{x:n},backend:o,attrs:{dtype:u}});return o.disposeIntermediateTensorInfo(n),t}if(!(0,r.E)(i.dtype,u)){const e=at({inputs:{x:i},backend:o});return{dataId:e.dataId,shape:e.shape,dtype:u}}if("int32"===u)return function(e,n){const t=new Hn(e.shape,"return float(int(x));"),a=n.runWebGLProgram(t,[e],"int32");return{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}(i,o);if("bool"===u){const e=o.makeTensorInfo([],"bool",(0,r.B)("bool",1)),n=Aa({inputs:{a:i,b:e},backend:o});return o.disposeIntermediateTensorInfo(e),n}throw new Error(`Error in Cast: failed to cast ${i.dtype} to ${u}`)}},Pa="return ceil(x);",Ba=ht({opSnippet:Pa,packedOpSnippet:Pa,cpuKernelImpl:Ze}),Wa={kernelName:a.ab,backendName:"webgl",kernelFunc:Ba};class Va{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class Ua{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const Ga={kernelName:a.ac,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o}=n,{clipValueMin:s,clipValueMax:i}=r;let u;u=(0,a.e)().getBool("WEBGL_PACK_CLIP")?new Ua(o.shape):new Va(o.shape);const l=[[s],[i]];return t.runWebGLProgram(u,[o],o.dtype,l)}};class Ma{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function za(e,n){return{dataId:n.dataId,dtype:n.dtype,shape:e.shape}}const Xa={kernelName:a.J,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t}=e,{x:a}=n,r=t.texData.get(a.dataId),o=new Ma(a.shape),s=[za(a,r.complexTensorInfos.real),za(a,r.complexTensorInfos.imag)];return t.runWebGLProgram(o,s,s[0].dtype)}};class Ha{constructor(e){this.outputShape=[],this.outputShape=(0,o.A)(e,1),this.variableNames=e.map(((e,n)=>`T${n}`));const n=new Array(e.length-1);n[0]=e[0][1];for(let t=1;t<n.length;t++)n[t]=n[t-1]+e[t][1];const t=[`if (yC < ${n[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<n.length;e++){const a=n[e-1];t.push(`else if (yC < ${n[e]}) setOutput(getT${e}(yR, yC-${a}));`)}const a=n.length,r=n[n.length-1];t.push(`else setOutput(getT${a}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${t.join("\n        ")}\n      }\n    `}}class ja{constructor(e,n){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=(0,o.A)(e,n);const t=this.outputShape,a=t.length,r=ee(a),s=Wn("coords",a),i=["x","y","z","w","u","v"].slice(0,a);this.variableNames=e.map(((e,n)=>`T${n}`));const u=new Array(e.length-1);u[0]=e[0][n];for(let t=1;t<u.length;t++)u[t]=u[t-1]+e[t][n];const l=i[n],c=i.slice(-2),d=i.join();let p=`if (${l} < ${u[0]}) {\n        return getChannel(\n            getT0(${d}), vec2(${c.join()}));\n        }`;for(let e=1;e<u.length;e++){const n=u[e-1];p+=`\n        if (${l} < ${u[e]}  && ${l} >= ${u[e-1]}) {\n          return getChannel(\n            getT${e}(${Ka(i,l,n)}),\n            vec2(${Ka(c,l,n)}));\n        }`}const h=u.length,f=u[u.length-1];p+=`\n        return getChannel(\n          getT${h}(${Ka(i,l,f)}),\n          vec2(${Ka(c,l,f)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${p}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${s}), 0., 0., 0.);\n\n        ${s[a-1]} = ${s[a-1]} + 1;\n        if (${s[a-1]} < ${t[a-1]}) {\n          result.g = getValue(${s});\n        }\n\n        ${s[a-2]} = ${s[a-2]} + 1;\n        if (${s[a-2]} < ${t[a-2]}) {\n          result.a = getValue(${s});\n        }\n\n        ${s[a-1]} = ${s[a-1]} - 1;\n        if (${s[a-2]} < ${t[a-2]} &&\n            ${s[a-1]} < ${t[a-1]}) {\n          result.b = getValue(${s});\n        }\n        setOutput(result);\n      }\n    `}}function Ka(e,n,t){const a=e.indexOf(n);return e.map(((e,n)=>n===a?`${e} - ${t}`:e)).join()}function Ya(e){const{inputs:n,backend:t}=e,{input:a}=n;return at({inputs:{x:t.texData.get(a.dataId).complexTensorInfos.imag},backend:t})}const qa={kernelName:a.aC,backendName:"webgl",kernelFunc:Ya};function Qa(e,n,t){const s=e[0].dtype;if("complex64"===s){const a=e.map((e=>_a({inputs:{input:e},backend:t}))),r=e.map((e=>Ya({inputs:{input:e},backend:t}))),o=Qa(a,n,t),s=Qa(r,n,t),i=ot({inputs:{real:o,imag:s},backend:t});return a.forEach((e=>t.disposeIntermediateTensorInfo(e))),r.forEach((e=>t.disposeIntermediateTensorInfo(e))),t.disposeIntermediateTensorInfo(o),t.disposeIntermediateTensorInfo(s),i}let i=t.shouldExecuteOnCPU(e);if("string"===s&&(i=!0),i){const a=e.map((e=>{const a=(0,r.m)(e.shape.slice(n));return $t({inputs:{x:e},backend:t,attrs:{shape:[-1,a]}})})),i=a.map((e=>({vals:t.readSync(e.dataId),shape:e.shape}))),u=(0,o.A)(a.map((e=>e.shape)),1),l=1===a[0].shape[0],c=Je(i,u,s,l),d=(0,o.A)(e.map((e=>e.shape)),n),p=t.makeTensorInfo(d,s,c);return a.forEach((e=>t.disposeIntermediateTensorInfo(e))),p}if(e.length>(0,a.e)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const a=Math.floor(e.length/2),r=Qa(e.slice(0,a),n,t),o=Qa(e.slice(a),n,t),s=Qa([r,o],n,t);return t.disposeIntermediateTensorInfo(r),t.disposeIntermediateTensorInfo(o),s}if((0,a.e)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const a=new ja(e.map((e=>e.shape)),n);return t.runWebGLProgram(a,e,s)}const{tensors2D:u,outShape:l}=function(e,n,t){const a=(0,o.A)(e.map((e=>e.shape)),n);return{tensors2D:e.map((e=>$t({inputs:{x:e},attrs:{shape:[-1,(0,r.m)(e.shape.slice(n))]},backend:t}))),outShape:a}}(e,n,t),c=new Ha(u.map((e=>e.shape))),d=t.runWebGLProgram(c,u,s);u.forEach((e=>t.disposeIntermediateTensorInfo(e)));const p=$t({inputs:{x:d},attrs:{shape:l},backend:t});return t.disposeIntermediateTensorInfo(d),p}function Za(e){const{inputs:n,backend:t,attrs:a}=e,{axis:s}=a,i=(0,r.z)(s,n[0].shape)[0],u=(0,o.A)(n.map((e=>e.shape)),i);if(0===(0,r.m)(u))return t.makeTensorInfo(u,n[0].dtype,[]);const l=n.filter((e=>(0,r.m)(e.shape)>0));if(1===l.length)return at({inputs:{x:l[0]},backend:t});const c=l.map((e=>e.shape));return(0,o.B)(c,i),Qa(l,i,t)}const Ja={kernelName:a.a3,backendName:"webgl",kernelFunc:Za};class er{constructor(e,n=!1,t=null,a=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const o=e.padInfo.top,s=e.padInfo.left,i=e.strideHeight,u=e.strideWidth,l=e.dilationHeight,c=e.dilationWidth,d=e.filterHeight,p=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4,x="channelsLast"===e.dataFormat,m=x?1:2,g=x?2:3,b=x?3:1;let v="",C="";t&&(v=a?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${t}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${t}\n        }`:`\n          float activation(float x) {\n            ${t}\n          }\n        `,C="result = activation(result);");const $=n?"result += getBiasAtOutCoords();":"";n&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${v}\n\n      const ivec2 strides = ivec2(${i}, ${u});\n      const ivec2 pads = ivec2(${o}, ${s});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${m}], coords[${g}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${h}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${x}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${x}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${h}) *\n                    getW(wR, wC, ${h}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${h}, xR, xC) *\n                    getW(wR, wC, ${h}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${h}, d2),\n                getW(wR, wC, ${h} + 1, d2)\n              );\n\n              if (${x}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${h}),\n                  getX(batch, xR, xC, ${h} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${h}, xR, xC),\n                  getX(batch, ${h} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${h}, d2),\n                getW(wR, wC, ${h} + 1, d2),\n                getW(wR, wC, ${h} + 2, d2)\n              );\n\n              if (${x}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${h}),\n                  getX(batch, xR, xC, ${h} + 1),\n                  getX(batch, xR, xC, ${h} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${h}, xR, xC),\n                  getX(batch, ${h} + 1, xR, xC),\n                  getX(batch, ${h} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${$}\n        ${C}\n        setOutput(result);\n      }\n    `}}class nr{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const n=e.padInfo.front,t=e.padInfo.top,a=e.padInfo.left,r=e.strideDepth,o=e.strideHeight,s=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,d=e.filterHeight,p=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${o}, ${s});\n      const ivec3 pads = ivec3(${n}, ${t}, ${a});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${h}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${h}) *\n                  getW(wF, wR, wC, ${h}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${h}),\n                  getX(batch, xF, xR, xC, ${h} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${h}, d2),\n                  getW(wF, wR, wC, ${h} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${h}),\n                  getX(batch, xF, xR, xC, ${h} + 1),\n                  getX(batch, xF, xR, xC, ${h} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${h}, d2),\n                  getW(wF, wR, wC, ${h} + 1, d2),\n                  getW(wF, wR, wC, ${h} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class tr{constructor(e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=oe(this.outputShape.length);const{dataFormat:t}=n,a=W(),r="channelsLast"===t,o=r?0:1,s=r?1:2,i=this.enableShapeUniforms?"if(blockIndex < outShape[1] && pos < outShape[0]) {":`if(blockIndex < ${e[1]} && pos < ${e[0]}) {`;let u="";for(let e=0;e<=1;e++)for(let n=0;n<=1;n++)u+=`\n          blockIndex = rc.y + ${n};\n          pos = rc.x + ${e};\n\n          ${i}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${o}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${s}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${r}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+n}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+n}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${a.output} = result;\n      }\n    `}}function ar({x:e,filter:n,convInfo:t,backend:a,bias:o=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:u=null}){const l=e.shape,c=a.texData.get(e.dataId),d=t.inChannels,p=l[0]*l[1]*l[2],h=t.outChannels,f="channelsLast"===t.dataFormat;let x;const m=[];if((1!==p&&1!==h||!(d>1e3))&&c.isPacked&&f&&null!=c.texture&&l[2]%2!=0&&(0,r.b)(c.shape.slice(-3),l.slice(-3))){const d=l[0]*l[1]*(l[2]+1),p={dataId:e.dataId,shape:[1,d,t.inChannels],dtype:e.dtype},h=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,(0,r.a)(O(c.shape,p.shape),(()=>`packed reshape ${c.shape} to ${p.shape} isn't free`));const f=$t({inputs:{x:n},backend:a,attrs:{shape:[1,t.inChannels,t.outChannels]}});m.push(f);const g=Ft({a:p,b:f,backend:a,transposeA:!1,transposeB:!1,bias:o,activation:u,preluActivationWeights:s,leakyreluAlpha:i}),b=a.texData.get(g.dataId);(0,r.a)(b.isPacked,(()=>"batchMatMul result is expected to be packed")),c.shape=h,b.shape=t.outShape,x=at({inputs:{x:g},backend:a}),x.shape=t.outShape,m.push(g)}else{const r=$t({inputs:{x:e},backend:a,attrs:{shape:[1,f?l[0]*l[1]*l[2]:l[0]*l[2]*l[3],t.inChannels]}}),c=$t({inputs:{x:n},backend:a,attrs:{shape:[1,t.inChannels,t.outChannels]}}),d=Ft({a:r,b:c,transposeA:!1,transposeB:!1,backend:a,bias:o,activation:u,preluActivationWeights:s,leakyreluAlpha:i});x=$t({inputs:{x:d},backend:a,attrs:{shape:t.outShape}}),m.push(r),m.push(c),m.push(d)}for(const e of m)a.disposeIntermediateTensorInfo(e);return x}function rr({x:e,filter:n,convInfo:t,backend:o,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:u=0,activation:l=null}){const{filterWidth:c,filterHeight:d,inChannels:p,outWidth:h,outHeight:f,dataFormat:x}=t,m="channelsLast"===x,g=c*d*p,b=f*h,v=[g,b],C=[],$=$t({inputs:{x:e},backend:o,attrs:{shape:e.shape.slice(1)}}),I=$t({inputs:{x:n},backend:o,attrs:{shape:[1,g,(0,r.m)(n.shape)/g]}});C.push($),C.push(I);const w=new tr(v,t),y=[$.shape,[t.padInfo.top,t.padInfo.left],[t.strideHeight,t.strideWidth],[t.dilationHeight,t.dilationWidth],[t.inChannels],[t.filterWidth*t.inChannels],[t.outWidth]],R=o.runWebGLProgram(w,[$],"float32",y),k=$t({inputs:{x:R},backend:o,attrs:{shape:[1,v[0],v[1]]}});C.push(R),C.push(k);const T=null!=s,S=null!=i,N="leakyrelu"===l,E=l?xt(l,!0):null,O=new mt(k.shape,I.shape,[1,b,t.outChannels],!0,!1,T,E,S,N),A=[k,I];if(s&&A.push(s),S&&A.push(i),N){const e=o.makeTensorInfo([],"float32",(0,a.c4)(u,"float32"));A.push(e),C.push(e)}const F=o.runWebGLProgram(O,A,"float32"),_=$t({inputs:{x:F},backend:o,attrs:{shape:m?[1,f,h,t.outChannels]:[1,t.outChannels,f,h]}});C.push(F);for(const e of C)o.disposeIntermediateTensorInfo(e);return _}const or={kernelName:a.ad,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o,filter:s}=n,{strides:i,pad:u,dataFormat:l,dilations:c,dimRoundingMode:d}=r,p=(0,a.cx)(l),h=(0,a.bC)(o.shape,s.shape,i,c,u,d,!1,p);let f;if(1!==h.filterHeight||1!==h.filterWidth||1!==h.dilationHeight||1!==h.dilationWidth||1!==h.strideHeight||1!==h.strideWidth||"SAME"!==h.padInfo.type&&"VALID"!==h.padInfo.type)if((0,a.e)().getBool("WEBGL_CONV_IM2COL")&&1===o.shape[0])f=rr({x:o,filter:s,convInfo:h,backend:t});else{const e=new er(h);f=t.runWebGLProgram(e,[o,s],"float32")}else f=ar({x:o,filter:s,convInfo:h,backend:t});const x=$t({inputs:{x:f},backend:t,attrs:{shape:h.outShape}});return t.disposeIntermediateTensorInfo(f),x}};class sr{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const n=e.strideHeight,t=e.strideWidth,a=e.padInfo.top,r=e.padInfo.left,o="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${n} - ${a};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${t} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${o}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ir{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const n=e.filterHeight,t=e.filterWidth,a=e.strideHeight,r=e.strideWidth,o="channelsLast"===e.dataFormat,s=n-1-e.padInfo.top,i=t-1-e.padInfo.left,u=o?1:2,l=o?2:3,c=o?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${n}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${a}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${n} - 1 - wR;\n\n          for (int wC = 0; wC < ${t}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${t} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${o}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ur{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const n=e.strideDepth,t=e.strideHeight,a=e.strideWidth,r=e.padInfo.front,o=e.padInfo.top,s=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${n} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${t} - ${o};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${a} - ${s};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class lr{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const n=e.filterDepth,t=e.filterHeight,a=e.filterWidth,r=e.strideDepth,o=e.strideHeight,s=e.strideWidth,i=n-1-e.padInfo.front,u=t-1-e.padInfo.top,l=a-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${n}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${n} - 1 - wF;\n\n          for (int wR = 0; wR < ${t}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${o}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${t} - 1 - wR;\n\n            for (int wC = 0; wC < ${a}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${a} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const cr={kernelName:a.bz,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o,dy:s}=n,{strides:i,pad:u,dataFormat:l,dimRoundingMode:c,filterShape:d}=r,p=(0,a.cx)(l),h=(0,a.bC)(o.shape,d,i,1,u,c,!1,p),f=new sr(h);return t.runWebGLProgram(f,[o,s],"float32")}},dr={kernelName:a.ae,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{dy:o,filter:s}=n,{inputShape:i,strides:u,pad:l,dataFormat:c,dimRoundingMode:d}=r,p=(0,a.cx)(c),h=(0,a.bC)(i,s.shape,u,1,l,d,!1,p),f=new ir(h);return t.runWebGLProgram(f,[o,s],"float32")}},pr={kernelName:a.af,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o,filter:s}=n,{strides:i,pad:u,dilations:l}=r,c=(0,a.cy)(o.shape,s.shape,i,l,u),d=new nr(c);return t.runWebGLProgram(d,[o,s],"float32")}},hr={kernelName:a.cz,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o,dy:s}=n,{strides:i,pad:u,filterShape:l}=r,c=(0,a.cy)(o.shape,l,i,1,u),d=new ur(c);return t.runWebGLProgram(d,[o,s],"float32")}},fr={kernelName:a.cA,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{dy:o,filter:s}=n,{pad:i,strides:u,inputShape:l}=r,c=(0,a.cy)(l,s.shape,u,1,i),d=new lr(c);return t.runWebGLProgram(d,[o,s],"float32")}},xr=ht({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),mr={kernelName:a.ag,backendName:"webgl",kernelFunc:xr},gr=ht({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),br={kernelName:a.ah,backendName:"webgl",kernelFunc:gr};class vr{constructor(e,n,t,a,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[o,s,i,u]=e,[l]=n,[c,d]=t;this.outputShape=[l,c,d,u];const p="bilinear"===a?1:0,[h,f]=[s-1+".0",i-1+".0"],[x,m,g]=c>1?[""+(s-1)/(c-1),"(y2-y1) * height_ratio",`y1*${h} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${h}`],[b,v,C]=d>1?[""+(i-1)/(d-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${x});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${o}) {\n          return;\n        }\n\n        float height_scale = ${m};\n        float width_scale = ${v};\n\n        float in_y = ${g};\n        if( in_y < 0.0 || in_y > ${h} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${C};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const Cr={kernelName:a.bL,backendName:"webgl",kernelFunc:e=>{const{inputs:n,backend:t,attrs:a}=e,{image:r,boxes:o,boxInd:s}=n,{cropSize:i,method:u,extrapolationValue:l}=a,c=new vr(r.shape,o.shape,i,u,l);return t.runWebGLProgram(c,[r,o,s],"float32")}};class $r{constructor(e,n,t){this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}],this.outputShape=e;const a=e.length,r=n?"0.0":`getX(${Ir(a,"coords")})`,o=e[e.length-1];let s="",i="";n?(s=t?"end != "+(o-1):"end != 0",i=t?"end + 1":"end - 1"):(s=t?`end + pow2 < ${o}`:"end >= pow2",i=t?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${ee(a)} coords = getOutputCoords();\n        int end = ${wr(a,"coords")};\n        float val = ${r};\n        int pow2 = int(pow(2.0, index));\n        if (${s}) {\n          int idx = ${i};\n          ${wr(a,"coords")} = idx;\n          val += getX(${Ir(a,"coords")});\n        }\n        setOutput(val);\n      }\n    `}}function Ir(e,n){if(1===e)return`${n}`;if(2===e)return`${n}.x, ${n}.y`;if(3===e)return`${n}.x, ${n}.y, ${n}.z`;if(4===e)return`${n}.x, ${n}.y, ${n}.z, ${n}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function wr(e,n){if(1===e)return`${n}`;if(2===e)return`${n}.y`;if(3===e)return`${n}.z`;if(4===e)return`${n}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const yr={kernelName:a.ai,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o}=n,{axis:s,exclusive:i,reverse:u}=r,l=o.shape.length,c=(0,a.cn)([s],l);let d=o;null!=c&&(d=Ot({inputs:{x:o},backend:t,attrs:{perm:c}}));const p=(0,a.co)(1,l)[0];if(p!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${o.shape.length-1} but got axis=${s}`);const h=d.shape[p];let f=at({inputs:{x:d},backend:t});for(let e=0;e<=Math.ceil(Math.log2(h))-1;e++){const n=new $r(d.shape,!1,u),a=[[e]],r=f;f=t.runWebGLProgram(n,[f],f.dtype,a),t.disposeIntermediateTensorInfo(r)}if(i){const e=new $r(d.shape,i,u),n=f;f=t.runWebGLProgram(e,[f],f.dtype),t.disposeIntermediateTensorInfo(n)}if(null!=c){const e=Ot({inputs:{x:f},backend:t,attrs:{perm:(0,a.cB)(c)}});return t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(d),e}return f}},Rr={kernelName:a.aj,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{x:r,weights:o}=n,{size:s,binaryOutput:i}=a;if(1===r.shape.length){const e=t.readSync(r.dataId),n=t.readSync(o.dataId),a=qe(e,n,o.dtype,o.shape,s);return t.makeTensorInfo([s],o.dtype,a)}if(2===r.shape.length){const e=t.bufferSync(r),n=t.bufferSync(o),a=Qe(e,n,s,i);return t.makeTensorInfo(a.shape,o.dtype,a.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class kr{constructor(e,n,t){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=n,this.dataFormat=t,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${n};\n      int offset_h = imod(h, ${n});\n      int in_w = w / ${n};\n      int offset_w = imod(w, ${n});\n      int offset_d = (offset_h * ${n} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const Tr={kernelName:a.ak,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{x:r}=n,{blockSize:o,dataFormat:s}=a,i=r.shape[0],u=("NHWC"===s?r.shape[1]:r.shape[2])*o,l=("NHWC"===s?r.shape[2]:r.shape[3])*o,c=("NHWC"===s?r.shape[3]:r.shape[1])/(o*o),d=new kr("NHWC"===s?[i,u,l,c]:[i,c,u,l],o,s);return t.runWebGLProgram(d,[r],r.dtype)}};class Sr{constructor(e,n=!1,t=null,a=!1,r=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=oe(this.outputShape.length);const o=e.filterHeight,s=e.filterWidth,i=e.outChannels/e.inChannels;let u="",l="";t&&(u=a?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${t}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${t}\n        }`:`\n          float activation(float x) {\n            ${t}\n          }\n        `,l="result = activation(result);");const c=n?"result += getBiasAtOutCoords();":"";n&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${o}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${l}\n        setOutput(result);\n      }\n    `}}class Nr{constructor(e,n=!1,t=null,a=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=oe(this.outputShape.length);const s=e.outChannels/e.inChannels,i=e.padInfo.left,u=e.strideWidth,l=e.dilationWidth,c=e.filterHeight,d=e.filterWidth,p=d;let h="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<d;e++)h+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;h+=`\n    for (int r = 0; r < ${c}; r++) {\n      `;for(let e=0;e<d;e++)h+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;h+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(p+1)/2;e++){const n=2*e;if(h+=`\n          xC = xCCorner + ${n*l};\n          `,1===u){if(n<d&&(i%2==1?(h+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n              `,h+=1===l&&n>0?`\n                xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                  } else {\n                    xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                  }\n                  `):h+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n\n                xC${n} = xTexelC${n};\n                `,n+1<d)){const e=i%2==0?(0,r.n)(l):l;l%2==0&&i%2==1||l%2!=0&&i%2!=1?(h+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                    xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${n+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${n+1}Ready = 1;\n                  }\n                  `,l>1&&(h+=`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                      xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${n}Ready = 1;\n                    }\n                    `),h+=`\n                  xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                  `):h+=1===e?`\n                    xC${n+1} = xTexelC${n};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                      xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${n+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${n+1}Ready = 1;\n                    }\n\n                    xC${n+1} = xTexelC${n+1};\n                    `}}else n<d&&(i%2==1?(h+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                  xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${n+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${n+1}Ready = 1;\n                }\n\n                xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n              `,n+1<d&&(h+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                `)):(h+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                  xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${n+1}.zw = vec2(0.);\n                  }\n                  xTexelC${n+1}Ready = 1;\n                }\n\n                xC${n} = vec4(\n                  xTexelC${n}.xy, xTexelC${n+1}.xy);\n              `,n+1<d&&(h+=`\n                  xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                `)));n<d&&(h+=`\n            wTexel = getW(r, ${n}, d1, q);\n            dotProd += xC${n} * vec4(wTexel.xz, wTexel.xz);\n          `,n+1<d&&(h+=`\n              wTexel = getW(r, ${n+1}, d1, q);\n              dotProd += xC${n+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}h+="\n    }\n  ",h+="\n      }\n    ";let f="",x="";t&&(f=a?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${t}\n        }`:o?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${t}\n        }`:`vec4 activation(vec4 x) {\n          ${t}\n        }`,x="result = activation(result);");const m=n?"result += getBiasAtOutCoords();":"";n&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${s};\n        int q = d2 - d1 * ${s};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${h}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${x}\n        setOutput(result);\n      }\n    `}}const Er={kernelName:a.al,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:o}=e,{x:s,filter:i}=n,{strides:u,pad:l,dilations:c,dimRoundingMode:d}=o;let p=c;null==p&&(p=[1,1]),(0,r.a)((0,a._)(u,p),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${p}'`));const h=(0,a.bC)(s.shape,i.shape,u,p,l,d,!0);let f;f=(0,a.e)().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new Nr(h):new Sr(h);const x=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];return t.runWebGLProgram(f,[s,i],"float32",x)}};class Or{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const n=e.strideHeight,t=e.strideWidth,a=e.padInfo.top,r=e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${o} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${n} - ${a};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${t} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ar{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const n=e.filterHeight,t=e.filterWidth,a=e.strideHeight,r=e.strideWidth,o=n-1-e.padInfo.top,s=t-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${s});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${n}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${a}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${n} - 1 - wR;\n\n          for (int wC = 0; wC < ${t}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${t} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Fr={kernelName:a.bH,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o,dy:s}=n,{strides:i,dilations:u,pad:l,dimRoundingMode:c,filterShape:d}=r,p=(0,a.bC)(o.shape,d,i,u,l,c,!0),h=new Or(p);return t.runWebGLProgram(h,[o,s],"float32")}},_r={kernelName:a.bI,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{dy:o,filter:s}=n,{strides:i,dilations:u,pad:l,dimRoundingMode:c,inputShape:d}=r,p=(0,a.bC)(d,s.shape,i,u,l,c,!0),h=new Ar(p);return t.runWebGLProgram(h,[o,s],"float32")}};class Dr{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const Lr={kernelName:a.cC,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t}=e,{x:a}=n,o=[...a.shape,...a.shape],s=(0,r.m)(a.shape),i=$t({inputs:{x:a},backend:t,attrs:{shape:[s]}}),u=new Dr(s),l=t.runWebGLProgram(u,[i],i.dtype),c=$t({inputs:{x:l},backend:t,attrs:{shape:o}});return t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(l),c}};class Pr{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:n,inWidth:t,padInfo:a,strideHeight:r,strideWidth:o,filterHeight:s,filterWidth:i,dilationHeight:u,dilationWidth:l}=e,{top:c,left:d}=a;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${o});\n      const ivec2 pads = ivec2(${c}, ${d});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${s}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${n}) {\n            for (int w = 0; w < ${i}; w++) {\n              int wIn = wBeg + w * ${l};\n\n              if (wIn >= 0 && wIn < ${t}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const Br={kernelName:a.am,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o,filter:s}=n,{strides:i,pad:u,dilations:l}=r,c=(0,a.cD)(o.shape,s.shape,i,u,"NHWC",l);let d;const p=new Pr(c);d=t.runWebGLProgram(p,[o,s],"float32");const h=$t({inputs:{x:d},backend:t,attrs:{shape:c.outShape}});return t.disposeIntermediateTensorInfo(d),h}},Wr={kernelName:a.ar,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{equation:s}=a,i=n,{allDims:u,summedDims:l,idDims:c}=(0,o.C)(s,i.length);(0,o.D)(u.length,c,i);const{path:d,steps:p}=(0,o.E)(l,c),h=p.length;let f=null,x=u.length;const m=[];for(let e=0;e<h;++e){for(const n of p[e]){const{permutationIndices:e,expandDims:a}=(0,o.F)(x,c[n]);let s;(0,o.G)(e)?s=i[n]:(s=Ot({inputs:{x:i[n]},backend:t,attrs:{perm:e}}),m.push(s));const u=s.shape.slice();for(let e=0;e<a.length;++e)u.splice(a[e],0,1);(0,r.b)(s.shape,u)||(s=$t({inputs:{x:s},backend:t,attrs:{shape:u}}),m.push(s)),null===f?f=s:(f=vt({inputs:{a:s,b:f},backend:t}),m.push(f))}e<h-1&&(d[e]>=0&&(f=Nt({inputs:{x:f},backend:t,attrs:{axis:d[e]-(u.length-x),keepDims:!1}}),m.push(f)),x--)}for(const e of m)e!==f&&t.disposeIntermediateTensorInfo(e);return f}},Vr=ht({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),Ur={kernelName:a.cE,backendName:"webgl",kernelFunc:Vr},Gr={kernelName:a.cF,backendName:"webgl",kernelFunc:e=>{const{inputs:n,backend:t}=e,{dy:r,y:o}=n,s=(0,a.e)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new tt("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,o.shape):new nt("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,o.shape);return t.runWebGLProgram(s,[r,o],r.dtype)}},Mr=ft({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:en}),zr={kernelName:a.ao,backendName:"webgl",kernelFunc:Mr},Xr=ht({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${o.H};\n  float a1 = ${o.I};\n  float a2 = ${o.J};\n  float a3 = ${o.K};\n  float a4 = ${o.L};\n  float a5 = ${o.M};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),Hr={kernelName:a.as,backendName:"webgl",kernelFunc:Xr},jr=ht({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:nn,dtype:"float32"}),Kr={kernelName:a.at,backendName:"webgl",kernelFunc:jr};function Yr(e){const{inputs:n,attrs:t,backend:a}=e,{dim:o}=t,{input:s}=n,i=s.shape.length,u=s.shape.slice();let l=o;return o<0&&((0,r.a)(-(i+1)<=o,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+o+1),u.splice(l,0,1),$t({inputs:{x:s},backend:a,attrs:{shape:u}})}const qr={kernelName:a.au,backendName:"webgl",kernelFunc:Yr},Qr="return exp(x) - 1.0;",Zr=ht({opSnippet:Qr,packedOpSnippet:Qr,cpuKernelImpl:tn}),Jr={kernelName:a.av,backendName:"webgl",kernelFunc:Zr};class eo{constructor(e,n,t){this.variableNames=["real","imag"];const a=n[1];this.outputShape=n;const r=t?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,o=t?`${a}.0`:"1.0";let s;if("real"===e)s="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);s="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${s}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${a});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${a}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${o};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function no(e,n,t){const a=t.texData.get(e.dataId),o=(0,r.m)(e.shape),s=e.shape[e.shape.length-1],i=$t({inputs:{x:e},backend:t,attrs:{shape:[o/s,s]}}),u=i.shape,l=new eo("real",u,n),c=new eo("imag",u,n),d=[{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:u},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:u}],p=t.runWebGLProgram(l,d,"float32"),h=t.runWebGLProgram(c,d,"float32"),f=ot({inputs:{real:p,imag:h},backend:t});t.disposeIntermediateTensorInfo(p),t.disposeIntermediateTensorInfo(h);const x=$t({inputs:{x:f},backend:t,attrs:{shape:e.shape}});return t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(f),x}const to={kernelName:a.bj,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t}=e,{input:a}=n;return no(a,!1,t)}};class ao{constructor(e,n){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function ro(e){const{backend:n,attrs:t}=e,{shape:a,value:o}=t;let{dtype:s}=t;if(s=s||(0,r.L)(o),"string"===s){const e=(0,r.C)(s,(0,r.m)(a));return e.fill(o),n.makeTensorInfo(a,s,e)}{const e=new ao(a,o),t=[[o]];return n.runWebGLProgram(e,[],s,t)}}const oo={kernelName:a.ax,backendName:"webgl",kernelFunc:ro};class so{constructor(e){this.variableNames=["Image"],this.outputShape=[];const n=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${n} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${n}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const io={kernelName:a.bM,backendName:"webgl",kernelFunc:({inputs:e,backend:n})=>{const{image:t}=e,a=n,r=new so(t.shape);return a.runWebGLProgram(r,[t],t.dtype)}},uo="return floor(x);",lo=ht({opSnippet:uo,packedOpSnippet:uo,cpuKernelImpl:an}),co={kernelName:a.ay,backendName:"webgl",kernelFunc:lo},po=ft({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),ho={kernelName:a.I,backendName:"webgl",kernelFunc:po};class fo{constructor(e){this.variableNames=["A"];const n=W(),[t,a]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}.0, ${t}.0);\n\n        vec4 values = ${n.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class xo{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const n=W(),[t,a]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${a}.0, ${t}.0);\n            vec4 values = ${n.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${n.output} = result;\n      }\n    `}}const mo={kernelName:a.G,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e;let{pixels:o}=n;const{numChannels:s}=r,i="undefined"!=typeof HTMLVideoElement&&o instanceof HTMLVideoElement,u="undefined"!=typeof HTMLImageElement&&o instanceof HTMLImageElement,[l,d]=i?[o.videoWidth,o.videoHeight]:[o.width,o.height],p=[d,l],h=[d,l,s];(u||i)&&(null==go&&(go=document.createElement("canvas").getContext("2d")),go.canvas.width=l,go.canvas.height=d,go.drawImage(o,0,0,l,d),o=go.canvas);const f=t.makeTensorInfo(p,"int32");t.texData.get(f.dataId).usage=c.PIXELS,t.gpgpu.uploadPixelDataToTexture(t.getTexture(f.dataId),o);const x=(0,a.e)().getBool("WEBGL_PACK")?new xo(h):new fo(h),m=t.runWebGLProgram(x,[f],"int32");return t.disposeData(f.dataId),m}};let go;const bo={kernelName:a.bD,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o,filter:s,bias:i,preluActivationWeights:u}=n,{strides:l,pad:c,dataFormat:d,dilations:p,dimRoundingMode:h,activation:f,leakyreluAlpha:x}=r,m=(0,a.cx)(d),g=(0,a.bC)(o.shape,s.shape,l,p,c,h,!1,m);let b;const v=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if((0,a.e)().getBool("WEBGL_CONV_IM2COL")&&1===o.shape[0])b=rr({x:o,filter:s,convInfo:g,backend:t,bias:i,activation:f,preluActivationWeights:u,leakyreluAlpha:x});else{const e=null!=i,n=null!=u,r="leakyrelu"===f,l=f?xt(f,!1):null,c=new er(g,e,l,n,r),d=[o,s];if(i&&d.push(i),u&&d.push(u),r){const e=t.makeTensorInfo([],"float32",(0,a.c4)(x,"float32"));d.push(e),v.push(e)}b=t.runWebGLProgram(c,d,"float32")}else b=ar({x:o,filter:s,convInfo:g,backend:t,bias:i,activation:f,preluActivationWeights:u,leakyreluAlpha:x});const C=$t({inputs:{x:b},backend:t,attrs:{shape:g.outShape}});return v.push(b),v.forEach((e=>t.disposeIntermediateTensorInfo(e))),C}},vo={kernelName:a.bJ,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:o}=e,{x:s,filter:i,bias:u,preluActivationWeights:l}=n,{strides:c,pad:d,dilations:p,dimRoundingMode:h,activation:f,leakyreluAlpha:x}=o,m=[];let g=p;null==g&&(g=[1,1]),(0,r.a)((0,a._)(c,g),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${c} and dilations '${g}'`));const b=(0,a.bC)(s.shape,i.shape,c,g,d,h,!0),v=(0,a.e)().getBool("WEBGL_PACK_DEPTHWISECONV")&&b.strideWidth<=2&&b.outChannels/b.inChannels==1,C=f?xt(f,v):null,$=[s,i],I=null!=u,w=null!=l,y="leakyrelu"===f;if(I&&$.push(u),w&&$.push(l),y){const e=t.makeTensorInfo([],"float32",(0,a.c4)(x,"float32"));$.push(e),m.push(e)}let R;R=v?new Nr(b,I,C,w,y):new Sr(b,I,C,w,y);const k=[[b.padInfo.top,b.padInfo.left],[b.strideHeight,b.strideWidth],[b.dilationHeight,b.dilationWidth],[b.inHeight,b.inWidth]],T=t.runWebGLProgram(R,$,"float32",k);return m.forEach((e=>t.disposeIntermediateTensorInfo(e))),T}};class Co{constructor(e,n,t){this.sliceDim=e,this.strides=n,this.variableNames=["x","indices"],this.outputShape=t;const a=ee(n.length),r=ee(t.length),o=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${a} strides = ${a}(${this.strides});\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${o};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const $o={kernelName:a.by,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t}=e,{params:a,indices:s}=n,i=s.shape,u=i[i.length-1],l=(0,r.m)(a.shape),[c,d,p,h]=(0,o.N)(a,s),f=$t({inputs:{x:s},backend:t,attrs:{shape:[d,u]}}),x=$t({inputs:{x:a},backend:t,attrs:{shape:[(0,r.m)(a.shape)/p,p]}});if(t.shouldExecuteOnCPU([a,s])||"string"===a.dtype){const e=t.readSync(s.dataId),n=t.bufferSync(a),r=rn(e,n,a.dtype,d,u,p,h,a.shape,l);return t.makeTensorInfo(c,a.dtype,r.values)}const m=new Co(u,h,[d,p]),g=t.runWebGLProgram(m,[x,f],x.dtype),b=$t({inputs:{x:g},backend:t,attrs:{shape:c}});return t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo(g),b}};class Io{constructor(e,n){this.variableNames=["A","indices"],this.outputShape=n,this.rank=n.length;const t=ee(this.rank),a=function(e,n){const t=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[];for(let n=0;n<e.length;n++)2===n?a.push("index"):a.push(`${t[n]}`);return a.join()}(e);this.userCode=`\n      void main() {\n        ${t} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${a}));\n      }\n    `}}function wo(e){const{inputs:n,backend:t,attrs:s}=e,{x:i,indices:u}=n,{axis:l,batchDims:c}=s,d=(0,r.z)(l,i.shape)[0];if((0,a.e)().get("DEBUG")){const e=t.readSync(u.dataId),n=i.shape[d];for(let t=0;t<e.length;++t){const a=e[t];(0,r.a)(a<=n-1&&a>=0,(()=>`GatherV2: the index value ${a} is not in [0, ${n-1}]`))}}const p=(0,o.O)(i,u,d,c),h=(0,r.m)(u.shape),f=[],x=$t({inputs:{x:i},backend:t,attrs:{shape:[p.batchSize,p.outerSize,p.dimSize,p.sliceSize]}}),m=$t({inputs:{x:u},backend:t,attrs:{shape:[p.batchSize,h/p.batchSize]}});f.push(x),f.push(m);const g=[p.batchSize,p.outerSize,h/p.batchSize,p.sliceSize];if(t.shouldExecuteOnCPU([i,u])||"string"===i.dtype){const e=t.bufferSync(m),n=t.bufferSync(x),a=on(n,e,g);return f.forEach((e=>t.disposeIntermediateTensorInfo(e))),t.makeTensorInfo(p.outputShape,a.dtype,a.values)}const b=new Io(x.shape,g),v=t.runWebGLProgram(b,[x,m],x.dtype);f.push(v);const C=$t({inputs:{x:v},backend:t,attrs:{shape:p.outputShape}});return f.forEach((e=>t.disposeIntermediateTensorInfo(e))),C}const yo={kernelName:a.az,backendName:"webgl",kernelFunc:wo},Ro=ft({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:sn,dtype:"bool"}),ko={kernelName:a.aA,backendName:"webgl",kernelFunc:Ro},To=ft({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:un}),So={kernelName:a.aB,backendName:"webgl",kernelFunc:To},No={kernelName:a.bk,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t}=e,{input:a}=n;return no(a,!0,t)}},Eo=ht({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),Oo={kernelName:a.cG,backendName:"webgl",kernelFunc:Eo},Ao=ht({opSnippet:"return float(isinf(x));",dtype:"bool"}),Fo={kernelName:a.cH,backendName:"webgl",kernelFunc:Ao},_o=ht({opSnippet:"return float(isnan(x));",dtype:"bool"}),Do={kernelName:a.aD,backendName:"webgl",kernelFunc:_o},Lo=ft({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:ln,dtype:"bool"}),Po={kernelName:a.aE,backendName:"webgl",kernelFunc:Lo},Bo=ft({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:cn,dtype:"bool"}),Wo={kernelName:a.aF,backendName:"webgl",kernelFunc:Bo},Vo={kernelName:a.aG,backendName:"webgl",kernelFunc:function(e){const{backend:n,attrs:t}=e,{start:a,stop:r,num:o}=t,s=dn(a,r,o);return n.makeTensorInfo([s.length],"float32",s)}},Uo=ht({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:pn}),Go={kernelName:a.aI,backendName:"webgl",kernelFunc:Uo},Mo=ht({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"}),zo={kernelName:a.aJ,backendName:"webgl",kernelFunc:Mo},Xo=ft({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),Ho={kernelName:a.aQ,backendName:"webgl",kernelFunc:Xo},jo=ht({opSnippet:"return float(!(x >= 1.0));"}),Ko={kernelName:a.aR,backendName:"webgl",kernelFunc:jo},Yo=ft({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),qo={kernelName:a.aS,backendName:"webgl",kernelFunc:Yo};class Qo{constructor(e,n,t,a,r){this.variableNames=["x"],this.outputShape=[];const o=n,s=e[3]-1;let i;this.outputShape=e;const u=`float(${t}) + float(${a}) * sum`;i=.5===r?`inversesqrt(${u})`:1===r?`1.0/(${u})`:`exp(log(${u}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${o}; j <= ${o}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${s}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class Zo{constructor(e,n,t,a,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const o=n,s=e[3]-1;let i;this.outputShape=e;const u=`float(${t}) + float(${a}) * sum`;i=.5===r?`inversesqrt(${u})`:1===r?`1.0/(${u})`:`exp(log(${u}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${o};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${o}; j <= ${o}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${s}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}const Jo={kernelName:a.aH,backendName:"webgl",kernelFunc:e=>{const{inputs:n,backend:t,attrs:r}=e,{x:o}=n,{depthRadius:s,bias:i,alpha:u,beta:l}=r,c=(0,a.e)().getBool("WEBGL_PACK_NORMALIZATION")?new Zo(o.shape,s,i,u,l):new Qo(o.shape,s,i,u,l);return t.runWebGLProgram(c,[o],o.dtype)}};class es{constructor(e,n,t,a,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=n,this.bias=t,this.alpha=a,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${n})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${n} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${a}) * norm + float(${t});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${a})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const ns={kernelName:a.cI,backendName:"webgl",kernelFunc:e=>{const{inputs:n,backend:t,attrs:a}=e,{x:r,y:o,dy:s}=n,{depthRadius:i,bias:u,alpha:l,beta:c}=a,d=new es(r.shape,i,u,l,c);return t.runWebGLProgram(d,[r,o,s],r.dtype)}};function ts(e){const{inputs:n,backend:t,attrs:o}=e,{x:s}=n,{reductionIndices:i,keepDims:u}=o,l=s.shape.length,c=(0,r.z)(i,s.shape);let d=c;const p=(0,a.cn)(d,l),h=null!=p,f=t.shouldExecuteOnCPU([s]);let x=s;if(h){if(f){const e=t.texData.get(x.dataId).values,n=new Array(l);for(let e=0;e<n.length;e++)n[e]=s.shape[p[e]];const a=Ln(e,s.shape,s.dtype,p,n);x=t.makeTensorInfo(n,s.dtype),t.texData.get(x.dataId).values=a}else x=St(s,p,t);d=(0,a.co)(d.length,l)}(0,a.cp)("max",d,l);const[m,g]=(0,a.c5)(x.shape,d);let b,v=m;if(u&&(v=(0,a.aP)(m,c)),f){const e=t.texData.get(x.dataId).values,n=hn(e,(0,r.m)(g),v,s.dtype);b=t.makeTensorInfo(v,s.dtype),t.texData.get(b.dataId).values=n}else b=function(e,n,t,a){const o=(0,r.m)(n),s=$t({inputs:{x:e},attrs:{shape:[(0,r.m)(e.shape)/o,o]},backend:a}),i=Rt(s,e.dtype,"max",a),u=$t({inputs:{x:i},attrs:{shape:t},backend:a});return a.disposeIntermediateTensorInfo(s),a.disposeIntermediateTensorInfo(i),u}(x,g,v,t);return h&&t.disposeIntermediateTensorInfo(x),b}const as={kernelName:a.aN,backendName:"webgl",kernelFunc:ts},rs=ft({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:fn}),os={kernelName:a.aW,backendName:"webgl",kernelFunc:rs},ss={kernelName:a.aT,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:o}=e,{x:s}=n;P(s,"maxPool");const{filterSize:i,strides:u,pad:l,dimRoundingMode:c}=o;(0,r.a)((0,a._)(u,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${u} and dilations '1'`));const d=(0,a.cs)(s.shape,i,u,1,l,c);if(1===d.filterWidth&&1===d.filterHeight&&(0,r.b)(d.inShape,d.outShape))return at({inputs:{x:s},backend:t});const p=new pa(d,"max",!1);return t.runWebGLProgram(p,[s],s.dtype)}},is={kernelName:a.aU,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{x:o}=n,{filterSize:s,strides:i,pad:u,dataFormat:l,dimRoundingMode:c}=r,d=(0,a.ct)(o.shape,s,i,[1,1,1],u,c,l),p=new ha(d,"max",!1);return t.runWebGLProgram(p,[o],o.dtype)}};class us{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const n=e.strideHeight,t=e.strideWidth,a=e.dilationHeight,r=e.effectiveFilterHeight,o=e.effectiveFilterWidth,s=r-1-e.padInfo.top,i=o-1-e.padInfo.left,u=r*o-1;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${n}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${o}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${o} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ls{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const n=e.strideDepth,t=e.strideHeight,a=e.strideWidth,r=e.dilationDepth,o=e.dilationHeight,s=e.dilationWidth,i=e.effectiveFilterDepth,u=e.effectiveFilterHeight,l=e.effectiveFilterWidth,c=i-1-e.padInfo.front,d=u-1-e.padInfo.top,p=l-1-e.padInfo.left,h=i*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${d}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${n}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${o}) {\n            float dyR = float(dyRCorner + wR) / ${t}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${s}) {\n              float dyC = float(dyCCorner + wC) / ${a}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${h} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const cs={kernelName:a.cJ,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{dy:o,input:s}=n,i=s,{filterSize:u,strides:l,pad:c,dimRoundingMode:d}=r,p=(0,a.ct)(i.shape,u,l,[1,1,1],c,d),h=new ha(p,"max",!0),f=t.runWebGLProgram(h,[i],i.dtype),x=new ls(p),m=t.runWebGLProgram(x,[o,f],i.dtype);return t.disposeIntermediateTensorInfo(f),m}},ds={kernelName:a.cK,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{dy:o,input:s,output:i}=n,u=s;P([s,i],"maxPoolGrad");const{filterSize:l,strides:c,pad:d,dimRoundingMode:p}=r,h=(0,a.cs)(u.shape,l,c,1,d,p),f=new pa(h,"max",!0),x=t.runWebGLProgram(f,[u],u.dtype),m=new us(h),g=t.runWebGLProgram(m,[o,x],u.dtype);return t.disposeIntermediateTensorInfo(x),g}},ps={kernelName:a.aV,backendName:"webgl",kernelFunc:({inputs:e,attrs:n,backend:t})=>{const{x:o}=e,{filterSize:s,strides:i,pad:u,includeBatchInIndex:l}=n,c=t;(0,r.a)(4===o.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.shape.length}.`));const d=[1,1];(0,r.a)((0,a._)(i,d),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`));const p=(0,a.cs)(o.shape,s,i,d,u),[h,f]=function(e,n,t,a){let r=new pa(t,"max",!1);const o=a.runWebGLProgram(r,[e],"float32");return r=new pa(t,"max",!0,!0,n),[o,a.runWebGLProgram(r,[e],"float32")]}(o,l,p,c);return[h,f]}},hs={kernelName:a.aX,backendName:"webgl",kernelFunc:({inputs:e,attrs:n,backend:t})=>{const{x:o}=e,{keepDims:s,axis:i}=n,u=t,l=o.shape.length,c=(0,r.z)(i,o.shape);let d=c;const p=(0,a.cn)(d,l),h=null!=p,f=u.shouldExecuteOnCPU([o]),x=[];let m=o;if(h){if(f){const e=u.texData.get(m.dataId).values,n=new Array(l);for(let e=0;e<n.length;e++)n[e]=o.shape[p[e]];const t=Ln(e,o.shape,o.dtype,p,n);m=u.makeTensorInfo(n,o.dtype),u.texData.get(m.dataId).values=t}else m=St(o,p,u);x.push(m),d=(0,a.co)(d.length,l)}(0,a.cp)("sum",d,l);const[g,b]=(0,a.c5)(m.shape,d);let v=g;s&&(v=(0,a.aP)(g,c));const C=function(e,n,t,a){const o=(0,r.m)(n),s=$t({inputs:{x:e},attrs:{shape:[(0,r.m)(e.shape)/o,o]},backend:a}),i=Rt(s,"float32","mean",a),u=$t({inputs:{x:i},attrs:{shape:t},backend:a});return a.disposeIntermediateTensorInfo(s),a.disposeIntermediateTensorInfo(i),u}(m,b,v,u);for(const e of x)u.disposeIntermediateTensorInfo(e);return C}},fs={kernelName:a.aY,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:o}=e,{x:s}=n,{axis:i,keepDims:u}=o,l=s.shape.length,c=(0,r.z)(i,s.shape);let d=c;const p=(0,a.cn)(d,l);let h=s;null!=p&&(h=Ot({inputs:{x:s},backend:t,attrs:{perm:p}}),d=(0,a.co)(d.length,s.shape.length)),(0,a.cp)("min",d,l);const[f,x]=(0,a.c5)(h.shape,d),m=$t({inputs:{x:h},backend:t,attrs:{shape:[-1,(0,r.m)(x)]}}),g=Rt(m,m.dtype,"min",t);let b;return b=$t(u?{inputs:{x:g},backend:t,attrs:{shape:(0,a.aP)(f,c)}}:{inputs:{x:g},backend:t,attrs:{shape:f}}),t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(g),null!=p&&t.disposeIntermediateTensorInfo(h),b}},xs=ft({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:xn}),ms={kernelName:a.aZ,backendName:"webgl",kernelFunc:xs};class gs{constructor(e,n,t){this.variableNames=["x"],this.outputShape=n.map(((n,t)=>n[0]+e[t]+n[1]));const a=e.length,r=ee(a),o=n.map((e=>e[0])).join(","),s=n.map(((n,t)=>n[0]+e[t])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,a),u="reflect"===t?0:1;this.userCode=1!==a?`\n      ${r} start = ${r}(${o});\n      ${r} end = ${r}(${s});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${a}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${i}));\n      }\n    `:`\n        int start = ${o};\n        int end = ${s};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class bs{constructor(e,n,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n.map(((n,t)=>n[0]+e[t]+n[1]));const a=e.length,r=ee(a),o=n.map((e=>e[0])).join(","),s=n.map(((n,t)=>n[0]+e[t])).join(","),i=Wn("rc",a),u=Wn("source",a),l=`${i[a-1]} < ${this.outputShape[a-1]}`,c=1===a?"source":`vec2(${u.slice(-2).join()})`,d="reflect"===t?0:1;let p="";if(1===a){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${d};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${d};\n        }\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${i[a-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${d}) +\n                gte * ((end - 1) * 2 - source + ${d});\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${i[a-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${i[a-2]} += 1;\n        if(${i[a-2]} < ${this.outputShape[a-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${u.join()}), ${c});\n          ${i[a-1]} += 1;\n          if(${l}) {\n            ${e}\n            result[3] = getChannel(getX(${u.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${o});\n      const ${r} end = ${r}(${s});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const vs={kernelName:a.a_,backendName:"webgl",kernelFunc:({inputs:e,backend:n,attrs:t})=>{const{x:r}=e,{paddings:o,mode:s}=t,i=(0,a.e)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new bs(r.shape,o,s):new gs(r.shape,o,s);return n.runWebGLProgram(i,[r],r.dtype)}},Cs=ft({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),$s={kernelName:a.a$,backendName:"webgl",kernelFunc:Cs};class Is{constructor(e,n,t){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${n-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${n-1}));\n      }\n    `}}const ws=ft({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),ys={kernelName:a.R,backendName:"webgl",kernelFunc:ws},Rs="return a - b;",ks=ft({opSnippet:Rs,packedOpSnippet:Rs,supportsComplex:!0,cpuKernelImpl:Fn}),Ts={kernelName:a.aO,backendName:"webgl",kernelFunc:ks};function Ss(e){const{inputs:n,backend:t,attrs:o}=e,{logits:s}=n,{dim:i}=o,u=(0,r.z)([i],s.shape),l=ts({inputs:{x:s},backend:t,attrs:{reductionIndices:u,keepDims:!1}}),c=(0,a.aP)(l.shape,u),d=$t({inputs:{x:l},backend:t,attrs:{shape:c}}),p=ks({inputs:{a:s,b:d},backend:t}),h=jr({inputs:{x:p},backend:t}),f=Nt({inputs:{x:h},backend:t,attrs:{axis:u,keepDims:!1}}),x=$t({inputs:{x:f},backend:t,attrs:{shape:c}}),m=ws({inputs:{a:h,b:x},backend:t});return t.disposeIntermediateTensorInfo(l),t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(p),t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(x),m}const Ns={kernelName:a.bi,backendName:"webgl",kernelFunc:Ss},Es={kernelName:a.b0,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{logits:r}=n,{numSamples:o,seed:s,normalized:i}=a,u=i?r:Ss({inputs:{logits:r},backend:t,attrs:{dim:r.shape.length-1}}),l=u.shape[0],c=u.shape[1],d=new Is(l,c,o),p=[[s]],h=t.runWebGLProgram(d,[u],"int32",p);return i||t.disposeIntermediateTensorInfo(u),h}},Os={kernelName:a.aL,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t}=e,{x:r}=n;if(t.shouldExecuteOnCPU([r])){const e=t.texData.get(r.dataId),[n,a]=gn(e.values,r.shape,r.dtype);return t.makeTensorInfo(a,r.dtype,n)}let o;return o=(0,a.e)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Yn(r.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new Hn(r.shape,"if (isnan(x)) return x;\n  return -x;\n"),t.runWebGLProgram(o,[r],r.dtype)}},As=a.bP,Fs={kernelName:a.bO,backendName:"webgl",kernelFunc:function(e){(0,a.ce)("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:n,backend:t,attrs:r}=e,{boxes:o,scores:s}=n,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l}=r,c=t.readSync(o.dataId),d=t.readSync(s.dataId),{selectedIndices:p}=As(c,d,i,u,l);return t.makeTensorInfo([p.length],"int32",new Int32Array(p))}},_s=a.bT,Ds={kernelName:a.bS,backendName:"webgl",kernelFunc:function(e){(0,a.ce)("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:n,backend:t,attrs:r}=e,{boxes:o,scores:s}=n,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l,padToMaxOutputSize:c}=r,d=t.readSync(o.dataId),p=t.readSync(s.dataId),{selectedIndices:h,validOutputs:f}=_s(d,p,i,u,l,c);return[t.makeTensorInfo([h.length],"int32",new Int32Array(h)),t.makeTensorInfo([],"int32",new Int32Array([f]))]}},Ls=a.bR,Ps={kernelName:a.bQ,backendName:"webgl",kernelFunc:function(e){(0,a.ce)("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:n,backend:t,attrs:r}=e,{boxes:o,scores:s}=n,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l,softNmsSigma:c}=r,d=t.readSync(o.dataId),p=t.readSync(s.dataId),h=i,f=u,x=l,m=c,{selectedIndices:g,selectedScores:b}=Ls(d,p,h,f,x,m);return[t.makeTensorInfo([g.length],"int32",new Int32Array(g)),t.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};class Bs{constructor(e,n,t,a){this.variableNames=["indices"],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${a}), float(${t}),\n                      float(index == coords.y)));\n      }\n    `}}const Ws={kernelName:a.O,backendName:"webgl",kernelFunc:e=>{const{inputs:n,backend:t,attrs:a}=e,{indices:o}=n,{depth:s,onValue:i,offValue:u}=a,l=(0,r.m)(o.shape),c=new Bs(l,s,i,u),d=$t({inputs:{x:o},backend:t,attrs:{shape:[l]}}),p=t.runWebGLProgram(c,[d],o.dtype);t.disposeIntermediateTensorInfo(d);const h=$t({inputs:{x:p},backend:t,attrs:{shape:[...o.shape,s]}});return t.disposeIntermediateTensorInfo(p),h}};function Vs(e){const{inputs:n,backend:t}=e,{x:a}=n;if("complex64"===a.dtype){const e=_a({inputs:{input:a},backend:t}),n=Vs({inputs:{x:e},backend:t}),r=Ya({inputs:{input:a},backend:t}),o=Vs({inputs:{x:r},backend:t}),s=ot({inputs:{real:n,imag:o},backend:t});return t.disposeIntermediateTensorInfo(e),t.disposeIntermediateTensorInfo(n),t.disposeIntermediateTensorInfo(r),t.disposeIntermediateTensorInfo(o),s}return ro({attrs:{shape:a.shape,dtype:a.dtype,value:"string"===a.dtype?"":0},backend:t})}const Us={kernelName:a.aq,backendName:"webgl",kernelFunc:Vs},Gs={kernelName:a.b2,backendName:"webgl",kernelFunc:function e(n){const{inputs:t,backend:a}=n,{x:r}=t;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const n=_a({inputs:{input:r},backend:a}),t=e({inputs:{x:n},backend:a}),o=Ya({inputs:{input:r},backend:a}),s=Vs({inputs:{x:o},backend:a}),i=ot({inputs:{real:t,imag:s},backend:a});return a.disposeIntermediateTensorInfo(n),a.disposeIntermediateTensorInfo(t),a.disposeIntermediateTensorInfo(o),a.disposeIntermediateTensorInfo(s),i}return ro({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:a})}},Ms={kernelName:a.bo,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{axis:o}=a;if(1===n.length)return Yr({inputs:{input:n[0]},backend:t,attrs:{dim:o}});const s=n[0].shape,i=n[0].dtype;n.forEach((e=>{(0,r.k)(s,e.shape,"All tensors passed to stack must have matching shapes"),(0,r.a)(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const u=[],l=Za({inputs:n.map((e=>{const n=Yr({inputs:{input:e},backend:t,attrs:{dim:o}});return u.push(n),n})),backend:t,attrs:{axis:o}});return u.forEach((e=>t.disposeIntermediateTensorInfo(e))),l}};class zs{constructor(e,n,t){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=n.map(((n,t)=>n[0]+e[t]+n[1]));const a=e.length,r=ee(a),o=n.map((e=>e[0])).join(","),s=n.map(((n,t)=>n[0]+e[t])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,a);this.userCode=1!==a?`\n      ${r} start = ${r}(${o});\n      ${r} end = ${r}(${s});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${o};\n        int end = ${s};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class Xs{constructor(e,n,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=n.map(((n,t)=>n[0]+e[t]+n[1]));const a=e.length,r=ee(a),o=n.map((e=>e[0])).join(","),s=n.map(((n,t)=>n[0]+e[t])).join(","),i=Wn("rc",a),u=Wn("source",a),l=`${i[a-1]} < ${this.outputShape[a-1]}`,c=1===a?"source":`vec2(${u.slice(-2).join()})`,d=[`${r} rc = outputLoc;`,`${i[a-1]} += 1;\n       if(${l}) {\n      `,1===a?"":`}\n       rc = outputLoc;\n       ${i[a-2]} += 1;\n       if(${i[a-2]} < ${this.outputShape[a-2]}) {`,1===a?"":`  ${i[a-1]} += 1;\n         if(${l}) {`],p=1===a?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let h="";for(let e=0,n=1===a?2:4;e<n;e++)h+=`\n        ${d[e]}\n        if (${p}) {\n          result[${e}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;h+=1===a?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${o});\n      const ${r} end = ${r}(${s});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${h}\n        setOutput(result);\n      }\n    `}}const Hs=e=>{const{inputs:n,backend:t,attrs:o}=e,{x:s}=n,{paddings:i,constantValue:u}=o;if(0===(0,r.m)(s.shape))return ro({backend:t,attrs:{shape:i.map(((e,n)=>e[0]+s.shape[n]+e[1])),value:u,dtype:s.dtype}});const l=(0,a.e)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Xs(s.shape,i,u):new zs(s.shape,i,u),c=[[u]];return t.runWebGLProgram(l,[s],s.dtype,c)},js={kernelName:a.b3,backendName:"webgl",kernelFunc:Hs},Ks=ft({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),Ys={kernelName:a.b5,backendName:"webgl",kernelFunc:Ks},qs={kernelName:a.b6,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:o}=e,{x:s}=n,{axis:i,keepDims:u}=o,l=s.shape.length,c=[],d=(0,r.z)(i,s.shape);let p=d;const h=(0,a.cn)(p,l);let f,x=s;if(null!=h&&(x=Ot({inputs:{x:s},backend:t,attrs:{perm:h}}),p=(0,a.co)(p.length,l),c.push(x)),(0,a.cp)("prod",p,l),t.shouldExecuteOnCPU([x])){const e=t.texData.get(x.dataId).values,{outVals:n,outShape:a,outDtype:r}=vn(x.shape,x.dtype,e,p);f=t.makeTensorInfo(a,r,n)}else{const[e,n]=(0,a.c5)(x.shape,p),o=(0,r.m)(n),i=$t({inputs:{x},backend:t,attrs:{shape:[-1,o]}}),u=Rt(i,(0,a.cq)(s.dtype),"prod",t);f=$t({inputs:{x:u},backend:t,attrs:{shape:e}}),c.push(i),c.push(u)}if(u){c.push(f);const e=(0,a.aP)(f.shape,d);f=$t({inputs:{x:f},backend:t,attrs:{shape:e}})}return c.forEach((e=>t.disposeIntermediateTensorInfo(e))),f}},Qs=e=>{const{backend:n,attrs:t}=e,{start:a,stop:r,step:o,dtype:s}=t,i=Cn(a,r,o,s);return n.makeTensorInfo([i.length],s,i)},Zs={kernelName:a.b7,backendName:"webgl",kernelFunc:Qs},Js=ht({opSnippet:"return 1.0 / x;"}),ei={kernelName:a.b9,backendName:"webgl",kernelFunc:Js},ni=ht({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),ti={kernelName:a.cL,backendName:"webgl",kernelFunc:ni},ai=ht({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),ri={kernelName:a.cM,backendName:"webgl",kernelFunc:ai};class oi{constructor(e,n,t,a,r){this.variableNames=["A"],this.outputShape=[];const[o,s,i,u]=e;this.outputShape=[o,n,t,u];const l=[a&&n>1?s-1:s,a&&t>1?i-1:i],c=[a&&n>1?n-1:n,a&&t>1?t-1:t];let d;d=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${s}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class si{constructor(e,n,t,a,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[o,s,i,u]=e;this.outputShape=[o,n,t,u];const l=[a&&n>1?s-1:s,a&&t>1?i-1:i],c=[a&&n>1?n-1:n,a&&t>1?t-1:t];let d;d=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${s}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${t-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const ii={kernelName:a.bU,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{images:o}=n,{alignCorners:s,halfPixelCenters:i,size:u}=r,[l,c]=u,d=(0,a.e)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new si(o.shape,l,c,s,i):new oi(o.shape,l,c,s,i);return t.runWebGLProgram(d,[o],"float32")}};class ui{constructor(e,n,t){this.variableNames=["dy"],this.outputShape=[],this.outputShape=n;const[,a,r]=n,[,o,s]=e,i=[t&&o>1?a-1:a,t&&s>1?r-1:r],u=[t&&o>1?o-1:o,t&&s>1?s-1:s],l=i[0]/u[0],c=i[1]/u[1],d=1/l,p=1/c,h=2*Math.ceil(d)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${h});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${o}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${s}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${a-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const li={kernelName:a.cN,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{images:r,dy:o}=n,{alignCorners:s}=a,i=new ui(o.shape,r.shape,s);return t.runWebGLProgram(i,[o],o.dtype)}};class ci{constructor(e,n,t,a,r){this.variableNames=["A"],this.outputShape=[];const[o,s,i,u]=e;this.outputShape=[o,n,t,u];const l=[a&&n>1?s-1:s,a&&t>1?i-1:i],c=[a&&n>1?n-1:n,a&&t>1?t-1:t],d=a?"0.5":"0.0";let p;p=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${s}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class di{constructor(e,n,t,a,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[o,s,i,u]=e;this.outputShape=[o,n,t,u];const l=[a&&n>1?s-1:s,a&&t>1?i-1:i],c=[a&&n>1?n-1:n,a&&t>1?t-1:t],d=a?"0.5":"0.0";let p;p=r?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${s}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${t-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const pi={kernelName:a.bV,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{images:o}=n,{alignCorners:s,halfPixelCenters:i,size:u}=r,[l,c]=u,d=(0,a.e)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new di(o.shape,l,c,s,i):new ci(o.shape,l,c,s,i);return t.runWebGLProgram(d,[o],o.dtype)}};class hi{constructor(e,n,t){this.variableNames=["dy"],this.outputShape=[],this.outputShape=n;const[,a,r]=n,[,o,s]=e,i=[t&&o>1?a-1:a,t&&s>1?r-1:r],u=[t&&o>1?o-1:o,t&&s>1?s-1:s],l=i[0]/u[0],c=i[1]/u[1],d=1/l,p=1/c,h=2*Math.ceil(d)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${h});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${o}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${s}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${a}) - 1),\n                ${t} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${t} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const fi={kernelName:a.cO,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{images:r,dy:o}=n,{alignCorners:s}=a,i=new hi(o.shape,r.shape,s);return t.runWebGLProgram(i,[o],o.dtype)}};class xi{constructor(e,n){this.variableNames=["x"];const t=e.length;if(t>4)throw new Error(`WebGL backend: Reverse of rank-${t} tensor is not yet supported`);if(this.outputShape=e,1===t)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const a=e.map(((t,a)=>(t=>-1!==n.indexOf(t)&&1!==e[t]?`${e[t]} - coords[${t}] - 1`:`coords[${t}]`)(a))).join(","),r=ee(t);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${a}));\n      }\n    `}}class mi{constructor(e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const t=e.length;if(t>4)throw new Error(`WebGL backend: Reverse of rank-${t} tensor is not yet supported`);this.outputShape=e;const a=Wn("rc",t),r=`${a[t-1]} + 1 < ${this.outputShape[t-1]}`,o=`${a[t-2]} + 1 < ${this.outputShape[t-2]}`,s=ee(t);function i(t){const a=e.map(((a,r)=>function(t,a){return-1!==n.indexOf(t)&&1!==e[t]?`${e[t]} - ${a[t]} - 1`:`${a[t]}`}(r,t)));return`getChannel(getX(${a.join(",")}), vec2(${a.slice(-2).join(",")}))`}this.userCode=1===t?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${s} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return i(e)}(a.slice())};\n          if(${r}){\n            result.g = ${function(e){return e[t-1]="("+e[t-1]+" + 1)",i(e)}(a.slice())};\n          }\n          if(${o}) {\n            result.b = ${function(e){return e[t-2]="("+e[t-2]+" + 1)",i(e)}(a.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[t-1]="("+e[t-1]+" + 1)",e[t-2]="("+e[t-2]+" + 1)",i(e)}(a.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const gi={kernelName:a.ba,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:o}=e,{x:s}=n,{dims:i}=o,u=s.shape.length,l=(0,r.z)(i,s.shape);if(0===u)return at({inputs:{x:s},backend:t});const c=(0,a.e)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new mi(s.shape,l):new xi(s.shape,l);return t.runWebGLProgram(c,[s],s.dtype)}};class bi{constructor(e,n){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const t=e[1],a=e[2];this.outputShape=e;let r="";r="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${t}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const vi={kernelName:a.bN,backendName:"webgl",kernelFunc:({inputs:e,attrs:n,backend:t})=>{const{image:a}=e,{radians:r,fillValue:s,center:i}=n,u=t,l=new bi(a.shape,s),[c,d]=(0,o.P)(i,a.shape[1],a.shape[2]),p=[[c,d,Math.sin(r),Math.cos(r)]];return u.runWebGLProgram(l,[a],a.dtype,p)}},Ci=ht({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),$i={kernelName:a.bb,backendName:"webgl",kernelFunc:Ci},Ii=ht({opSnippet:"return inversesqrt(x);",cpuKernelImpl:$n}),wi={kernelName:a.bc,backendName:"webgl",kernelFunc:Ii};class yi{constructor(e,n,t,a,r,o,s=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=o;const i=ee(r.length),u=ee(o.length);let l="";1===t?l="i":2===t&&(l="i, j");const c=`getIndices(${l})`;let d="";1===a?d="i":2===a&&(d="i, coords[1]");const p=`getUpdates(${d})`,h=n>1?"strides[j]":"strides";this.userCode=`\n        ${i} strides = ${i}(${r});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${n}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${h};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const Ri={kernelName:a.bw,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{indices:o,updates:s}=n,{shape:i}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:d,outputSize:p}=(0,a.cP)(s,o,i),h=[p/c,c];if(0===p)return t.makeTensorInfo(i,o.dtype);const f=$t({inputs:{x:o},backend:t,attrs:{shape:[l,u]}}),x=$t({inputs:{x:s},backend:t,attrs:{shape:[l,c]}}),m=t.makeTensorInfo([],"float32",new Float32Array([0])),g=new yi(l,u,f.shape.length,x.shape.length,d,h),b=t.runWebGLProgram(g,[x,f,m],x.dtype),v=$t({inputs:{x:b},backend:t,attrs:{shape:i}});return t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo(b),t.disposeIntermediateTensorInfo(m),v}};class ki{constructor(e,n,t){let a,r;if(this.variableNames=["c","a","b"],this.outputShape=n,t>4)throw Error(`Where for rank ${t} is not yet supported`);if(1===t)r="resRC",a="resRC";else{const t=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[],s=[];for(let a=0;a<n.length;a++)s.push(`${t[a]}`),a<e&&o.push(`${t[a]}`);a=o.join(),r=s.join()}const o=ee(t);this.userCode=`\n      void main() {\n        ${o} resRC = getOutputCoords();\n        float cVal = getC(${a});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const Ti={kernelName:a.ap,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t}=e,{condition:r,t:o,e:s}=n,i=new ki(r.shape.length,o.shape,o.shape.length);return t.runWebGLProgram(i,[r,o,s],(0,a.c6)(o.dtype,s.dtype))}},Si=ht({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${o.S};\n  float scale = ${o.Q};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),Ni={kernelName:a.bd,backendName:"webgl",kernelFunc:Si},Ei=ht({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:In}),Oi={kernelName:a.cQ,backendName:"webgl",kernelFunc:Ei},Ai=ht({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),Fi={kernelName:a.bf,backendName:"webgl",kernelFunc:Ai},_i=ht({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),Di={kernelName:a.bg,backendName:"webgl",kernelFunc:_i},Li=ht({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),Pi={kernelName:a.bh,backendName:"webgl",kernelFunc:Li},Bi=ht({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),Wi={kernelName:a.aM,backendName:"webgl",kernelFunc:Bi},Vi={kernelName:a.b4,backendName:"webgl",kernelFunc:e=>{const{inputs:n,backend:t,attrs:a}=e,{x:s}=n,{blockShape:i,paddings:u}=a;(0,r.a)(s.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const l=i.reduce(((e,n)=>e*n)),c=[[0,0]];c.push(...u);for(let e=1+i.length;e<s.shape.length;++e)c.push([0,0]);const d=[],p=Hs({inputs:{x:s},backend:t,attrs:{paddings:c,constantValue:0}}),h=(0,o.v)(p.shape,i,l,!1),f=(0,o.w)(h.length,i.length,!1),x=(0,o.x)(p.shape,i,l,!1),m=$t({inputs:{x:p},backend:t,attrs:{shape:h}}),g=Ot({inputs:{x:m},backend:t,attrs:{perm:f}}),b=$t({inputs:{x:g},backend:t,attrs:{shape:x}});return d.push(p),d.push(m),d.push(g),d.forEach((e=>t.disposeIntermediateTensorInfo(e))),b}},Ui={kernelName:a.bX,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t}=e,{indices:a,values:r,denseShape:o,defaultValue:s}=n;if(1!==o.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${o.shape}`);if(2!==a.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${a.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==s.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${s.shape}`);const i=t.readSync(a.dataId),u=t.readSync(r.dataId),l=t.readSync(o.dataId),c=t.readSync(s.dataId)[0],[d,p,h,f,x]=Rn(i,a.shape,a.dtype,u,r.dtype,l,c);return[t.makeTensorInfo(p,a.dtype,d),t.makeTensorInfo([p[0]],r.dtype,h),t.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),t.makeTensorInfo([x.length],a.dtype,new Int32Array(x))]}},Gi={kernelName:a.bY,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t}=e,{inputIndices:a,inputShape:r,newShape:o}=n;if(2!==a.shape.length)throw new Error(`Input indices should be a matrix but received shape ${a.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==o.shape.length)throw new Error(`Target shape should be a vector but received shape ${o.shape}`);const s=Array.from(t.readSync(r.dataId)),i=t.readSync(a.dataId),u=Array.from(t.readSync(o.dataId)),[l,c,d]=kn(i,a.shape,a.dtype,s,u);return[t.makeTensorInfo(c,a.dtype,l),t.makeTensorInfo([d.length],o.dtype,new Int32Array(d))]}},Mi={kernelName:a.bZ,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t}=e,{data:a,indices:r,segmentIds:o}=n;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${o.shape}`);const s=t.readSync(a.dataId),i=t.readSync(r.dataId),u=t.readSync(o.dataId),[l,c]=Tn(s,a.shape,a.dtype,i,u,!0);return t.makeTensorInfo(c,a.dtype,l)}},zi={kernelName:a.b_,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t}=e,{data:a,indices:r,segmentIds:o}=n;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${o.shape}`);const s=t.readSync(a.dataId),i=t.readSync(r.dataId),u=t.readSync(o.dataId),[l,c]=Tn(s,a.shape,a.dtype,i,u);return t.makeTensorInfo(c,a.dtype,l)}},Xi={kernelName:a.bx,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:r}=e,{sparseIndices:o,sparseValues:s,defaultValue:i}=n,{outputShape:u}=r,{sliceRank:l,numUpdates:c,strides:d,outputSize:p}=(0,a.cP)(s,o,u),h=new yi(c,l,o.shape.length,s.shape.length,d,[p,1],!1),f=t.runWebGLProgram(h,[s,o,i],s.dtype),x=$t({inputs:{x:f},backend:t,attrs:{shape:u}});return t.disposeIntermediateTensorInfo(f),x}},Hi={kernelName:a.bl,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{x:s}=n,{numOrSizeSplits:i,axis:u}=a,l=(0,r.z)(u,s.shape)[0],c=(0,o.R)(s,i,l),d=s.shape.length,p=new Array(d).fill(0),h=s.shape.slice();return c.map((e=>{const n=[...h];n[l]=e;const a=Ta({inputs:{x:s},backend:t,attrs:{begin:p,size:n}});return p[l]+=e,a}))}},ji="return sqrt(x);",Ki=ht({opSnippet:ji,packedOpSnippet:ji,cpuKernelImpl:Sn}),Yi={kernelName:a.bm,backendName:"webgl",kernelFunc:Ki},qi=ht({opSnippet:"return x * x;"}),Qi={kernelName:a.cR,backendName:"webgl",kernelFunc:qi},Zi="return (a - b) * (a - b);",Ji=ft({opSnippet:Zi,packedOpSnippet:Zi}),eu={kernelName:a.bn,backendName:"webgl",kernelFunc:Ji},nu={kernelName:a.cS,backendName:"webgl",kernelFunc:function({inputs:e,attrs:n,backend:t}){const{x:a}=e,r=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${n.alpha});\n  `,o=new Hn(a.shape,r);return t.runWebGLProgram(o,[a],a.dtype)}};class tu{constructor(e,n,t){this.variableNames=["x"],this.outputShape=t;const a=t.length,r=ee(t.length),o=ee(t.length);let s="";if(1===a)s="coords * strides + begin";else{let e=0;s=t.map(((n,a)=>(e++,1===t.length?`coords * strides[${a}] + begin[${a}]`:`coords[${e-1}] * strides[${a}] + begin[${a}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${n});\n\n      void main() {\n        ${o} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}const au={kernelName:a.bp,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:s}=e,{x:i}=n,{begin:u,end:l,strides:c,beginMask:d,endMask:p,ellipsisMask:h,newAxisMask:f,shrinkAxisMask:x}=s,{finalShapeSparse:m,finalShape:g,isIdentity:b,sliceDim0:v,isSimpleSlice:C,begin:$,end:I,strides:w}=(0,o.T)(i.shape,u,l,c,d,p,h,f,x);let y;if(b)y=$t({inputs:{x:i},backend:t,attrs:{shape:g}});else if(v||C){(0,r.a)(i.shape.length>=1,(()=>`Input must have rank at least 1, got: ${i.shape.length}`));const e=(0,o.U)($,I,w),n=Ta({inputs:{x:i},backend:t,attrs:{begin:$,size:e}});y=$t({inputs:{x:n},backend:t,attrs:{shape:g}}),t.disposeIntermediateTensorInfo(n)}else if(t.shouldExecuteOnCPU([i])){const e=t.readSync(i.dataId),n=(0,a.aw)(i.shape,i.dtype,e),r=Nn(m,n,w,$);y=t.makeTensorInfo(g,i.dtype,r.values)}else{const e=new tu($,w,m);y=t.runWebGLProgram(e,[i],i.dtype)}const R=$t({inputs:{x:y},backend:t,attrs:{shape:g}});return t.disposeIntermediateTensorInfo(y),R}},ru={kernelName:a.b$,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{separator:r,nGramWidths:o,leftPad:s,rightPad:i,padWidth:u,preserveShortSequences:l}=a,{data:c,dataSplits:d}=n,p=t.readSync(c.dataId),h=t.readSync(d.dataId),[f,x]=En(p,h,r,o,s,i,u,l);return[t.makeTensorInfo([f.length],"string",f),t.makeTensorInfo(d.shape,"int32",x)]}},ou={kernelName:a.c0,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{skipEmpty:r}=a,{input:o,delimiter:s}=n;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(1!==o.shape.length)throw new Error(`Input must be a vector, got shape: ${o.shape}`);if(0!==s.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${s.shape}`);const i=t.readSync(o.dataId),u=t.readSync(s.dataId)[0],[l,c,d]=On(i,u,r),p=c.length;return[t.makeTensorInfo([p,2],"int32",l),t.makeTensorInfo([p],"string",c),t.makeTensorInfo([2],"int32",new Int32Array(d))]}},su={kernelName:a.c1,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{numBuckets:r}=a,{input:o}=n;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const s=t.readSync(o.dataId),i=An(s,r);return t.makeTensorInfo(o.shape,"int32",i)}},iu=ht({opSnippet:"return tan(x);"}),uu={kernelName:a.bq,backendName:"webgl",kernelFunc:iu},lu=ht({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),cu={kernelName:a.a5,backendName:"webgl",kernelFunc:lu};class du{constructor(e,n){this.variableNames=["A"];const t=new Array(e.length);for(let a=0;a<t.length;a++)t[a]=e[a]*n[a];this.outputShape=t,this.rank=t.length;const a=ee(this.rank),r=function(e){const n=e.length;if(n>5)throw Error(`Tile for rank ${n} is not yet supported`);if(1===n)return`imod(resRC, ${e[0]})`;const t=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],a=[];for(let n=0;n<e.length;n++)a.push(`imod(${t[n]}, ${e[n]})`);return a.join()}(e);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function pu(e){const{inputs:n,backend:t,attrs:r}=e,{x:o}=n,{reps:s}=r;if("string"===o.dtype||o.shape.length>5){const e=t.readSync(o.dataId),n="string"===o.dtype?e.map((e=>(0,a.cd)(e))):e,r=(0,a.aw)(o.shape,o.dtype,n),i=_n(r,s);return t.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new du(o.shape,s);return t.runWebGLProgram(i,[o],o.dtype)}const hu={kernelName:a.aa,backendName:"webgl",kernelFunc:pu};class fu{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class xu{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function mu(e,n){null!==n&&e.disposeIntermediateTensorInfo(n)}function gu(e){let n=1;for(;n<e;)n*=2;return n}const bu={kernelName:a.br,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:o}=e,{x:s}=n,{k:i,sorted:u}=o,l=(0,a.e)().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),c=(0,a.e)().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),d=s.shape,p=d[d.length-1];if(t.shouldExecuteOnCPU([s])||p<l||i>c){const e=t.readSync(s.dataId),[n,a]=Dn(e,d,s.dtype,i,u);return[t.makeTensorInfo(n.shape,n.dtype,n.values),t.makeTensorInfo(a.shape,a.dtype,a.values)]}if(0===i)return d[d.length-1]=0,[t.makeTensorInfo(d,s.dtype,[]),t.makeTensorInfo(d,"int32",[])];if(1===p)return[s,ro({attrs:{shape:d,dtype:"int32",value:0},backend:t})];const h=t.texData.get(s.dataId),f=null!==h&&h.isPacked,x=f?t.unpackTensor(s):s,m=(0,r.m)(d)/p,g=$t({inputs:{x},attrs:{shape:[m,p]},backend:t});f&&mu(t,x);const b=gu(i),v=gu(p);let C=null;const $=()=>null===C?[g,g]:[g,C],I=(e,n,a)=>{const r=$(),o=new fu(a),s=[[p],[null===C?1:0],[Number.NEGATIVE_INFINITY],[e],[n]],i=C;C=t.runWebGLProgram(o,r,"int32",s),mu(t,i)};for(let e=1;e<b;e*=2){const n=2*e;for(let t=e;t>=1;t/=2)I(n,t,[m,v])}for(let e=v;e>b;e/=2){const n=$(),a=new xu([m,e/2]),r=[[p],[null===C?1:0],[b]],o=C;C=t.runWebGLProgram(a,n,"int32",r),mu(t,o);const s=b/2,i=2*s;for(let e=s;e>=1;e/=2)I(i,e,C.shape)}let w=C;C=Ta({inputs:{x:C},backend:t,attrs:{begin:0,size:[m,i]}}),mu(t,w);let y=wo({inputs:{x:g,indices:C},backend:t,attrs:{axis:1,batchDims:1}});mu(t,g);const R=d.slice(0,-1);R.push(i),w=C,C=$t({inputs:{x:C},attrs:{shape:R},backend:t}),mu(t,w);const k=y;return y=$t({inputs:{x:y},attrs:{shape:R},backend:t}),mu(t,k),[y,C]}};class vu{constructor(e,n,t,a,r,o){this.variableNames=["Image","Transforms"],this.outputShape=o;const s="nearest"===t?1:2;let i;switch(a){case"constant":default:i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${i} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${n}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${n}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${s} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const Cu={kernelName:a.bW,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{image:r,transforms:o}=n,{interpolation:s,fillMode:i,fillValue:u,outputShape:l}=a,[c,d,p,h]=r.shape,[f,x]=null!=l?l:[d,p],m=new vu(d,p,s,i,u,[c,f,x,h]);return t.runWebGLProgram(m,[r,o],"float32")}},$u={kernelName:a.bs,backendName:"webgl",kernelFunc:function(e){const{inputs:n,attrs:t,backend:a}=e,{axis:r}=t,{x:o}=n;P(o,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const s=a.readSync(o.dataId),{outputValues:i,outputShape:u,indices:l}=Pn(s,r,o.shape,o.dtype);return[a.makeTensorInfo(u,o.dtype,i),a.makeTensorInfo([l.length],"int32",l)]}},Iu={kernelName:a.bt,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:a}=e,{value:r}=n;let{axis:o}=a;o<0&&(o+=r.shape.length);const s=r,i=s.shape.length,u=r.shape[o],l=new Array(i-1);let c=0;for(let e=0;e<i;e++)e!==o&&(l[c++]=s.shape[e]);const d=[],p=new Array(i).fill(0),h=s.shape.slice();h[o]=1;const f=new Array(u);for(let e=0;e<f.length;e++){p[o]=e;const n=Ta({inputs:{x:s},backend:t,attrs:{begin:p,size:h}}),a=$t({inputs:{x:n},backend:t,attrs:{shape:l}});f[e]=a,d.push(n)}return d.forEach((e=>t.disposeIntermediateTensorInfo(e))),f}};class wu{constructor(e,n){this.variableNames=["x","segmentIds"];const t=e.windowSize,a=e.batchSize,r=e.inSize,o=e.numSegments,s=o*Math.ceil(r/t);this.outputShape=[a,s];const i=4*Math.floor(t/4),u=t%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%t>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let d="";r%t>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${d}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${o})) * float(${t}));\n        int currentSeg = int(mod(float(outIdx), float(${o})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}const yu=[_t,Lt,Bt,Vt,Mt,Ht,jt,Kt,ea,na,aa,oa,ia,la,da,fa,xa,ba,va,Ca,wa,Na,Ea,Oa,La,Wa,Ga,st,Xa,Ja,or,cr,dr,pr,hr,fr,mr,br,Cr,yr,Rr,Tr,Er,Fr,_r,Lr,Br,Wr,Ur,Gr,zr,Hr,Kr,qr,Jr,to,oo,io,co,ho,mo,bo,vo,$o,yo,ko,So,rt,No,qa,Oo,Fo,Do,lt,Po,Wo,Vo,Go,zo,Ho,Ko,qo,Jo,ns,as,os,ss,is,cs,ds,ps,hs,fs,ms,vs,$s,Es,Ct,Os,Fs,Ds,Ps,Fa,Ws,Gs,Ms,js,Ys,pt,qs,Zs,Da,ys,ei,ti,ri,It,ii,li,pi,fi,gi,vi,$i,wi,Ri,Ti,Ni,Oi,Fi,Di,Pi,Sa,Ns,Wi,Vi,Ui,Gi,Mi,zi,Xi,Hi,Yi,Qi,eu,nu,au,ru,ou,su,Ts,Et,uu,cu,hu,bu,Cu,At,$u,Iu,{kernelName:a.cT,backendName:"webgl",kernelFunc:function(e){const{inputs:n,backend:t,attrs:s}=e,{x:i,segmentIds:u}=n,{numSegments:l}=s,c=i.shape.length,d=[];let p=0;const h=(0,a.cn)([p],c);let f=i;null!=h&&(f=Ot({inputs:{x:i},backend:t,attrs:{perm:h}}),d.push(f),p=(0,a.co)(1,c)[0]);const x=(0,o.V)(f.shape,p,l),m=(0,r.m)([f.shape[p]]),g=$t({inputs:{x:f},backend:t,attrs:{shape:[-1,m]}});d.push(g);const b=(0,a.cq)(i.dtype),v=(e,n,a,r,s)=>{const i=e.shape[0],u=e.shape[1],l=(0,o.W)(u,s),c=new wu({windowSize:l,inSize:u,batchSize:i,numSegments:s},n),p=t.compileAndRun(c,[e,a],r);if(d.push(p),p.shape[1]===s)return p;const h=Qs({backend:t,attrs:{start:0,stop:s,step:1,dtype:"float32"}}),f=pu({inputs:{x:h},backend:t,attrs:{reps:[u/l]}});return d.push(h),d.push(f),v(p,n,f,r,s)},C=$t({inputs:{x:v(g,"unsortedSegmentSum",u,b,l)},backend:t,attrs:{shape:x}});let $=C;if(null!=h){d.push(C);const e=(0,a.cB)(h);$=Ot({inputs:{x:$},backend:t,attrs:{perm:e}})}return d.forEach((e=>t.disposeIntermediateTensorInfo(e))),$}},Us];for(const e of yu)(0,a.cU)(e)}}]);