/*! For license information please see lib-graph_model-bdc9e46a.236c794655b2728ac097.js.LICENSE.txt */
"use strict";(self.webpackChunktheremin=self.webpackChunktheremin||[]).push([[764],{4486:(e,t,a)=>{a.d(t,{l:()=>_e});var n,s,r=a(7760),o=a(198),p=a(3077),i=a(748),m=a(3687),u=a(5527);(0,o.e)().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(n||(n={})),function(e){var t;(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(s||(s={}));const d={};function c(e){return d[e]}function y(e,t,a,n,s){const r=t.inputParams[e];if(r&&void 0!==r.inputIndexStart){const e=r.inputIndexStart,o=0===r.inputIndexEnd?void 0:void 0===r.inputIndexEnd?e+1:r.inputIndexEnd;if("tensor"===r.type)return l(t.inputNames[r.inputIndexStart],a,n,s);if("tensors"===r.type)return t.inputNames.slice(e,o).map((e=>l(e,a,n,s)));const i=l(t.inputNames.slice(e)[0],a,n,s),m=i.dataSync();return"number"===r.type?m[0]:(0,p.t)(i.shape,m)}const o=t.attrParams[e];return o&&o.value}function l(e,t,a,n){const[s,r]=N(e);if(null!=n){const e=n.getHashTableHandleByName(s);if(null!=e)return e}const o=a.currentContextIds.find((e=>!!t[f(s,e)]));return void 0!==o?t[f(s,o)][r]:void 0}function h(e,t){const[a,n,s]=N(e);return[f(a,t&&t.currentContextId),n,s]}function f(e,t){return t?`${e}-${t}`:e}function N(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const a=t[0],n=3===t.length?t[1]:void 0;return[a,Number(t[t.length-1]),n]}function g(e,t,a){let n=y("pad",e,t,a);if("explicit"===n){n=y("explicitPaddings",e,t,a);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=n[2*e],s[e][1]=n[2*e+1];return s}return n}function T(e){return e.kept?e:(0,o.a)(e)}var b=Object.freeze({__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]}),x=Object.freeze({__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]}),_=Object.freeze({__proto__:null,json:[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}]}),S=Object.freeze({__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]}),O=Object.freeze({__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]}),w=Object.freeze({__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]}),E=Object.freeze({__proto__:null,json:[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}]}),I=Object.freeze({__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]}),D=Object.freeze({__proto__:null,json:[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}]}),A=Object.freeze({__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]}),k=Object.freeze({__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]}),v=Object.freeze({__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}]}),M=Object.freeze({__proto__:null,json:[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]}),V=Object.freeze({__proto__:null,json:[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]}),F=Object.freeze({__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]}),z=Object.freeze({__proto__:null,json:[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}]}),C=Object.freeze({__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]}),L=Object.freeze({__proto__:null,json:[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}]}),$=Object.freeze({__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}]});class R{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[b,x,_,S,O,w,E,I,D,A,k,v,M,V,F,z,C,L,$].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const a=e.node,n=[],s=[],r=[],o=a.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?n.push(e[t.name]):"Const"===t.op?s.push(e[t.name]):null!=t.input&&0!==t.input.length||r.push(e[t.name]),e)),{});let p=[];const i=[];let m={},u={};null!=t&&(m=this.mapSignatureEntries(t.inputs),u=this.mapSignatureEntries(t.outputs));const d=Object.keys(o);d.forEach((e=>{const t=o[e];t.inputNames.forEach(((e,a)=>{const[n,,s]=h(e),r=o[n];if(null!=r.outputs){const e=r.outputs.indexOf(s);if(-1!==e){const s=`${n}:${e}`;t.inputNames[a]=s}}t.inputs.push(r),r.children.push(t)}))})),0===Object.keys(u).length?d.forEach((e=>{const t=o[e];0===t.children.length&&i.push(t)})):Object.keys(u).forEach((e=>{const[t]=h(e),a=o[t];null!=a&&(a.signatureKey=u[e],i.push(a))})),Object.keys(m).length>0?Object.keys(m).forEach((e=>{const[t]=h(e),a=o[t];a&&(a.signatureKey=m[e],p.push(a))})):p=n;let c={};null!=e.library&&null!=e.library.function&&(c=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const y={nodes:o,inputs:p,outputs:i,weights:s,placeholders:n,signature:t,functions:c};return r.length>0&&(y.initNodes=r),y}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,a)=>(t[e[a].name]=a,t)),{})}mapNode(e){const t=c(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const a={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(a.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(a.attrParams=t.attrs.reduce(((t,a)=>{const n=a.type;let s;switch(a.type){case"string":s=j(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=j(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"string[]":s=Z(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=Z(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"number":s=U(e.attr,a.tfName,a.defaultValue||0),void 0===s&&a.tfDeprecatedName&&(s=U(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"number[]":s=X(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=X(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"bool":s=B(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=B(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"bool[]":s=J(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=J(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"shape":s=K(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=K(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"shape[]":s=Y(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=Y(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"dtype":s=W(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=W(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"dtype[]":s=q(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=q(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"func":s=G(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=G(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${a.type} for op: ${e.op}`)}return t[a.name]={value:s,type:n},t}),{})),a}mapFunction(e){const t=e.nodeDef,a=[];let n={};null!=t&&(n=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&a.push(e[t.name]),e)),{}));const s=[],r=[];e.signature.inputArg.forEach((e=>{const[t]=h(e.name),a={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:H(e.type),type:"dtype"}},children:[]};a.signatureKey=e.name,s.push(a),n[t]=a})),Object.keys(n).forEach((e=>{const t=n[e];t.inputNames.forEach(((e,a)=>{const[s,,r]=h(e),o=n[s];if(null!=o.outputs){const e=o.outputs.indexOf(r);if(-1!==e){const n=`${s}:${e}`;t.inputNames[a]=n}}t.inputs.push(o),o.children.push(t)}))}));const o=e.ret;e.signature.outputArg.forEach((e=>{const[t,a]=h(o[e.name]),s=n[t];null!=s&&(s.defaultOutput=a,r.push(s))}));const p=this.mapArgsToSignature(e);return{nodes:n,inputs:s,outputs:r,weights:a,placeholders:[],signature:p}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,a)=>(t[a.name]=this.mapArgToTensorInfo(a,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let a=e.name;return null!=t&&(a=t[a]),{name:a,dtype:e.type}}}function P(e,t){const a=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=(0,o.e)().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?a:a.toLowerCase()}function j(e,t,a,n=!1){const s=e[t];return null!=s?P(s.s,n):a}function B(e,t,a){const n=e[t];return n?n.b:a}function U(e,t,a){const n=e[t]||{},s=null!=n.i?n.i:null!=n.f?n.f:a;return"number"==typeof s?s:parseInt(s,10)}function H(e){switch("string"==typeof e&&(e=n[e]),e){case n.DT_FLOAT:case n.DT_HALF:return"float32";case n.DT_INT32:case n.DT_INT64:case n.DT_INT8:case n.DT_UINT8:return"int32";case n.DT_BOOL:return"bool";case n.DT_DOUBLE:return"float32";case n.DT_STRING:return"string";default:return null}}function G(e,t,a){const n=e[t];return n&&n.func?n.func.name:a}function W(e,t,a){const n=e[t];return n&&n.type?H(n.type):a}function q(e,t,a){const n=e[t];return n&&n.list&&n.list.type?n.list.type.map((e=>H(e))):a}function Q(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function K(e,t,a){const n=e[t];return n&&n.shape?Q(n.shape):a}function X(e,t,a){const n=e[t];return n?((n.list.f&&n.list.f.length?n.list.f:n.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):a}function Z(e,t,a,n=!1){const s=e[t];return s&&s.list&&s.list.s?s.list.s.map((e=>P(e,n))):a}function Y(e,t,a){const n=e[t];return n&&n.list&&n.list.shape?n.list.shape.map((e=>Q(e))):a}function J(e,t,a){const n=e[t];return n&&n.list&&n.list.b?n.list.b:a}class ee{constructor(e,t,a){this.node=e,this.tensorMap=t,this.context=a,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return l(e,this.tensorMap,this.context)}getAttr(e,t){const a=this.node.rawAttrs[e];if(null!=a.tensor)return l(e,this.tensorMap,this.context);if(null!=a.i||null!=a.f)return U(this.node.rawAttrs,e,t);if(null!=a.s)return j(this.node.rawAttrs,e,t);if(null!=a.b)return B(this.node.rawAttrs,e,t);if(null!=a.shape)return K(this.node.rawAttrs,e,t);if(null!=a.type)return W(this.node.rawAttrs,e,t);if(null!=a.list){if(null!=a.list.i||null!=a.list.f)return X(this.node.rawAttrs,e,t);if(null!=a.list.s)return Z(this.node.rawAttrs,e,t);if(null!=a.list.shape)return Y(this.node.rawAttrs,e,t);if(null!=a.list.b)return J(this.node.rawAttrs,e,t);if(null!=a.list.type)return q(this.node.rawAttrs,e,t)}return t}}function te(e,t,a=""){if("number"!=typeof e&&"number"!=typeof t){(0,p.a)(e.length===t.length,(()=>a+` Shapes ${e} and ${t} must match`));for(let n=0;n<e.length;n++){const s=e[n],r=t[n];(0,p.a)(s<0||r<0||s===r,(()=>a+` Shapes ${e} and ${t} must match`))}}}function ae(e){return"number"!=typeof e&&!e.some((e=>e<0))}function ne(e,t,a){let n=se(e,a);const s=!ae(n);if(s&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${n}`);if(s&&t.forEach((e=>{n=se(e.shape,n)})),!ae(n))throw new Error(`Non-fully-defined elementShape: ${n}`);return n}function se(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const a=[];for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(s>=0&&r>=0&&s!==r)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);a[n]=s>=0?s:r}return a}class re{constructor(e,t,a,n,s,r,o){this.name=e,this.dtype=t,this.maxSize=a,this.elementShape=n,this.identicalElementShapes=s,this.dynamicSize=r,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=(0,m.s)(0),(0,m.k)(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const a=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),te(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),a.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(a.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);a.tensor=t,(0,m.k)(t),a.written=!0,this.tensors[e]=a}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,a)=>this.write(e,t[a])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return(0,o.t)([],[0].concat(this.elementShape));const a=this.readMany(e);return te(this.elementShape,a[0].shape,"TensorArray shape mismatch: "),(0,i.$)(a,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return(0,o.t)([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const a=this.readMany(t);return te(this.elementShape,a[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${a[0].shape})`),(0,i.h)(a,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const a=Math.max(...e);if(!this.dynamicSize&&a>=this.maxSize)throw new Error(`Max index must be < array size (${a}  vs. ${this.maxSize})`);this.writeMany(e,(0,i.a0)(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let a=0;const n=e.map((e=>(a+=e,a)));if(a!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${a}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===a?0:t.size/a,r=[];(0,m.t)((()=>{t=(0,o.r)(t,[1,a,s]);for(let a=0;a<e.length;++a){const p=[0,0===a?0:n[a-1],0],m=[1,e[a],s];r[a]=(0,o.r)((0,i.c)(t,p,m),this.elementShape)}return r}));const p=[];for(let t=0;t<e.length;t++)p[t]=t;this.writeMany(p,r)}}class oe{constructor(e,t,a,n=-1){this.tensors=e,this.elementShape=t,this.elementDtype=a,null!=e&&e.forEach((e=>{if(a!==e.dtype)throw new Error(`Invalid data types; op elements ${a}, but list elements ${e.dtype}`);te(t,e.shape,"TensorList shape mismatch: "),(0,m.k)(e)})),this.idTensor=(0,m.s)(0),this.maxNumElements=n,(0,m.k)(this.idTensor)}get id(){return this.idTensor.id}copy(){return new oe([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,a=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==a&&this.tensors.length!==a)throw new Error(`Operation expected a list with ${a} elements but got a list with ${this.tensors.length} elements.`);te(e,this.elementShape,"TensorList shape mismatch: ");const n=ne(this.elementShape,this.tensors,e);return(0,m.t)((()=>{const e=this.tensors.map((e=>(0,o.r)(e,n)));return(0,i.$)(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const a=ne(this.elementShape,this.tensors,e),n=this.tensors.pop();return te(n.shape,e,"TensorList shape mismatch: "),(0,o.r)(n,a)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(te(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");(0,m.k)(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,a){if(a!==this.elementDtype)throw new Error(`Invalid data types; op elements ${a}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);te(this.tensors[e].shape,t,"TensorList shape mismatch: ");const n=ne(this.elementShape,this.tensors,t);return(0,o.r)(this.tensors[e],n)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);te(this.elementShape,t.shape,"TensorList shape mismatch: "),(0,m.k)(t),this.tensors[e]=t}gather(e,t,a){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);te(this.elementShape,a,"TensorList shape mismatch: "),e=e.slice(0,this.size());const n=ne(this.elementShape,this.tensors,a);return 0===e.length?(0,o.t)([],[0].concat(n)):(0,m.t)((()=>{const t=e.map((e=>(0,o.r)(this.tensors[e],n)));return(0,i.$)(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);te(this.elementShape,t,"TensorList shape mismatch: ");const a=ne(this.elementShape,this.tensors,t);return 0===this.size()?(0,o.t)([],[0].concat(a)):(0,m.t)((()=>{const e=this.tensors.map((e=>(0,o.r)(e,a)));return(0,i.h)(e,0)}))}}function pe(e,t,a){const[n,s]=y("fusedOps",e,t,a),r="biasadd"===n,o=!r,p="prelu"===s,i="fusedbatchnorm"===n,m=y("numArgs",e,t,a);if(r){if(p&&2!==m)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!p&&r&&1!==m)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(i)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const u=y("strides",e,t,a),d=g(e,t,a),c=y("dataFormat",e,t,a).toUpperCase(),l=y("dilations",e,t,a);let[h,f]=y("args",e,t,a);return o&&(f=h,h=void 0),{stride:u,pad:d,dataFormat:c,dilations:l,biasArg:h,preluArg:f,activationFunc:s,leakyreluAlpha:y("leakyreluAlpha",e,t,a)}}function ie(e,t,a){return{boxes:y("boxes",e,t,a),scores:y("scores",e,t,a),maxOutputSize:y("maxOutputSize",e,t,a),iouThreshold:y("iouThreshold",e,t,a),scoreThreshold:y("scoreThreshold",e,t,a),softNmsSigma:y("softNmsSigma",e,t,a)}}class me{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=(0,m.s)(0),this.tensorMap=new Map,(0,m.k)(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return(0,m.s)(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const a=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),(0,m.t)((()=>{const e=(0,i.a0)(t),n=a.length,s=e.length;(0,p.a)(n===s,(()=>`The number of elements doesn't match, keys has ${n} elements, the values has ${s} elements.`));for(let t=0;t<n;t++){const n=a[t],s=e[t];(0,m.k)(s),this.tensorMap.set(n,s)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const a=await e.data();return(0,m.t)((()=>{const e=[];for(let n=0;n<a.length;n++){const s=a[n],r=this.findWithDefault(s,t);e.push(r)}return(0,i.$)(e)}))}findWithDefault(e,t){const a=this.tensorMap.get(e);return null!=a?a:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function ue(e,t,a,n){const s=((e,t,a)=>{switch(e.category){case"arithmetic":return(0,m.t)((()=>((e,t,a)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[(0,i.b)(y("a",e,t,a),y("b",e,t,a))];case"AddN":return[(0,i.r)(y("tensors",e,t,a))];case"FloorMod":case"Mod":return[(0,i.q)(y("a",e,t,a),y("b",e,t,a))];case"Mul":return[(0,o.m)(y("a",e,t,a),y("b",e,t,a))];case"RealDiv":case"Div":return[(0,i.d)(y("a",e,t,a),y("b",e,t,a))];case"DivNoNan":return[(0,i.o)(y("a",e,t,a),y("b",e,t,a))];case"FloorDiv":return[(0,i.n)(y("a",e,t,a),y("b",e,t,a))];case"Sub":return[(0,i.g)(y("a",e,t,a),y("b",e,t,a))];case"Minimum":return[(0,i.l)(y("a",e,t,a),y("b",e,t,a))];case"Maximum":return[(0,i.m)(y("a",e,t,a),y("b",e,t,a))];case"Pow":return[(0,i.p)(y("a",e,t,a),y("b",e,t,a))];case"SquaredDifference":return[(0,i.k)(y("a",e,t,a),y("b",e,t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a)));case"basic_math":return(0,m.t)((()=>((e,t,a)=>{switch(e.op){case"Abs":case"ComplexAbs":return[(0,i._)(y("x",e,t,a))];case"Acos":return[(0,i.Z)(y("x",e,t,a))];case"Acosh":return[(0,i.Y)(y("x",e,t,a))];case"Asin":return[(0,i.X)(y("x",e,t,a))];case"Asinh":return[(0,i.W)(y("x",e,t,a))];case"Atan":return[(0,i.V)(y("x",e,t,a))];case"Atan2":return[(0,i.U)(y("x",e,t,a),y("y",e,t,a))];case"Atanh":return[(0,i.T)(y("x",e,t,a))];case"Ceil":return[(0,i.S)(y("x",e,t,a))];case"Complex":return[(0,o.g)(y("real",e,t,a),y("imag",e,t,a))];case"Cos":return[(0,i.R)(y("x",e,t,a))];case"Cosh":return[(0,i.Q)(y("x",e,t,a))];case"Elu":return[(0,o.f)(y("x",e,t,a))];case"Erf":return[(0,i.P)(y("x",e,t,a))];case"Exp":return[(0,i.f)(y("x",e,t,a))];case"Expm1":return[(0,i.O)(y("x",e,t,a))];case"Floor":return[(0,i.N)(y("x",e,t,a))];case"Log":return[(0,i.M)(y("x",e,t,a))];case"Log1p":return[(0,i.L)(y("x",e,t,a))];case"Imag":return[(0,i.K)(y("x",e,t,a))];case"Neg":return[(0,i.J)(y("x",e,t,a))];case"Reciprocal":return[(0,i.I)(y("x",e,t,a))];case"Real":return[(0,i.H)(y("x",e,t,a))];case"Relu":return[(0,o.d)(y("x",e,t,a))];case"Round":return[(0,i.G)(y("x",e,t,a))];case"Selu":return[(0,i.F)(y("x",e,t,a))];case"Sigmoid":return[(0,o.s)(y("x",e,t,a))];case"Sin":return[(0,i.E)(y("x",e,t,a))];case"Sign":return[(0,i.D)(y("x",e,t,a))];case"Sinh":return[(0,i.C)(y("x",e,t,a))];case"Softplus":return[(0,i.B)(y("x",e,t,a))];case"Sqrt":return[(0,i.A)(y("x",e,t,a))];case"Square":return[(0,i.z)(y("x",e,t,a))];case"Tanh":return[(0,i.y)(y("x",e,t,a))];case"Tan":return[(0,i.x)(y("x",e,t,a))];case"ClipByValue":return[(0,i.j)(y("x",e,t,a),y("clipValueMin",e,t,a),y("clipValueMax",e,t,a))];case"Relu6":return[(0,o.b)(y("x",e,t,a))];case"Rsqrt":return[(0,i.w)(l(e.inputNames[0],t,a))];case"Prod":return[(0,i.v)(y("x",e,t,a),y("axes",e,t,a))];case"LeakyRelu":return[(0,o.l)(y("x",e,t,a),y("alpha",e,t,a))];case"Prelu":return[(0,o.p)(y("x",e,t,a),y("alpha",e,t,a))];case"IsNan":return[(0,i.u)(l(e.inputNames[0],t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a)));case"control":return(async(e,t,a)=>{switch(e.op){case"If":case"StatelessIf":{const n=y("thenBranch",e,t,a),s=y("elseBranch",e,t,a),r=y("cond",e,t,a),o=y("args",e,t,a);return(await r.data())[0]?a.functionMap[n].executeFunctionAsync(o,a.tensorArrayMap,a.tensorListMap):a.functionMap[s].executeFunctionAsync(o,a.tensorArrayMap,a.tensorListMap)}case"While":case"StatelessWhile":{const n=y("body",e,t,a),s=y("cond",e,t,a),r=y("args",e,t,a),o=await a.functionMap[s].executeFunctionAsync(r,a.tensorArrayMap,a.tensorListMap),p=r.map((e=>e.id));let i=await o[0].data();o.forEach((e=>{e.kept||-1!==p.indexOf(e.id)||e.dispose()}));let m=r;for(;i[0];){const e=m;m=await a.functionMap[n].executeFunctionAsync(m,a.tensorArrayMap,a.tensorListMap);const t=m.map((e=>e.id));e.forEach((e=>{e.kept||-1!==p.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const r=await a.functionMap[s].executeFunctionAsync(m,a.tensorArrayMap,a.tensorListMap);i=await r[0].data(),r.forEach((e=>{e.kept||-1!==p.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return m}case"LoopCond":return[T(y("pred",e,t,a))];case"Switch":{const n=y("pred",e,t,a);let s=y("data",e,t,a);return s.kept||(s=T(s)),(await n.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const n=e.inputNames.find((e=>void 0!==l(e,t,a)));return n?[T(l(n,t,a))]:void 0}case"Enter":{const n=y("frameName",e,t,a),s=y("tensor",e,t,a);return a.enterFrame(n),[T(s)]}case"Exit":{const n=y("tensor",e,t,a);return a.exitFrame(),[T(n)]}case"NextIteration":{const n=y("tensor",e,t,a);return a.nextIteration(),[T(n)]}case"TensorArrayV3":{const n=y("size",e,t,a),s=y("dtype",e,t,a),r=y("elementShape",e,t,a),o=y("dynamicSize",e,t,a),p=y("clearAfterRead",e,t,a),i=y("identicalElementShapes",e,t,a),u=y("name",e,t,a),d=new re(u,s,n,r,i,o,p);return a.addTensorArray(d),[d.idTensor,(0,m.s)(1)]}case"TensorArrayWriteV3":{const n=y("tensorArrayId",e,t,a),s=y("index",e,t,a),r=y("tensor",e,t,a),o=a.getTensorArray(n.id);return o.write(s,r),[o.idTensor]}case"TensorArrayReadV3":{const n=y("tensorArrayId",e,t,a),s=y("index",e,t,a);return[a.getTensorArray(n.id).read(s)]}case"TensorArrayGatherV3":{const n=y("tensorArrayId",e,t,a),s=y("indices",e,t,a),r=y("dtype",e,t,a);return[a.getTensorArray(n.id).gather(s,r)]}case"TensorArrayScatterV3":{const n=y("tensorArrayId",e,t,a),s=y("indices",e,t,a),r=y("tensor",e,t,a),o=a.getTensorArray(n.id);return o.scatter(s,r),[o.idTensor]}case"TensorArrayConcatV3":{const n=y("tensorArrayId",e,t,a),s=a.getTensorArray(n.id),r=y("dtype",e,t,a);return[s.concat(r)]}case"TensorArraySplitV3":{const n=y("tensorArrayId",e,t,a),s=y("tensor",e,t,a),r=y("lengths",e,t,a),o=a.getTensorArray(n.id);return o.split(r,s),[o.idTensor]}case"TensorArraySizeV3":{const n=y("tensorArrayId",e,t,a),s=a.getTensorArray(n.id);return[(0,m.s)(s.size(),"int32")]}case"TensorArrayCloseV3":{const n=y("tensorArrayId",e,t,a),s=a.getTensorArray(n.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const n=y("tensorListId",e,t,a),s=y("index",e,t,a),r=y("tensor",e,t,a),o=a.getTensorList(n.id);return o.setItem(s,r),[o.idTensor]}case"TensorListGetItem":{const n=y("tensorListId",e,t,a),s=y("index",e,t,a),r=y("elementShape",e,t,a),o=y("elementDType",e,t,a);return[a.getTensorList(n.id).getItem(s,r,o)]}case"TensorListScatterV2":case"TensorListScatter":{const n=y("indices",e,t,a),s=function(e,t,a,n){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(null!=n&&-1!==n&&s>=n)throw new Error(`Max index must be < array size (${s}  vs. ${n})`);const r=new oe([],a,e.dtype,n),o=(0,i.a0)(e,0);return t.forEach(((e,t)=>{r.setItem(e,o[t])})),r}(y("tensor",e,t,a),n,y("elementShape",e,t,a),y("numElements",e,t,a));return a.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const n=y("elementShape",e,t,a),s=y("elementDType",e,t,a);let r;r="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=function(e,t,a){return new oe([],e,t,a)}(n,s,y(r,e,t,a));return a.addTensorList(o),[o.idTensor]}case"TensorListGather":{const n=y("tensorListId",e,t,a),s=y("indices",e,t,a),r=y("elementShape",e,t,a),o=y("elementDType",e,t,a);return[a.getTensorList(n.id).gather(s,o,r)]}case"TensorListStack":{const n=y("tensorListId",e,t,a),s=y("elementShape",e,t,a),r=y("elementDType",e,t,a),o=y("numElements",e,t,a);return[a.getTensorList(n.id).stack(s,r,o)]}case"TensorListFromTensor":{const n=function(e,t,a){const n=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==a)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${a}`);te(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=(0,i.a0)(e);return new oe(s,t,n)}(y("tensor",e,t,a),y("elementShape",e,t,a),y("elementDType",e,t,a));return a.addTensorList(n),[n.idTensor]}case"TensorListConcat":{const n=y("tensorListId",e,t,a),s=a.getTensorList(n.id),r=y("dtype",e,t,a),o=y("elementShape",e,t,a);return[s.concat(r,o)]}case"TensorListPushBack":{const n=y("tensorListId",e,t,a),s=y("tensor",e,t,a),r=a.getTensorList(n.id);return r.pushBack(s),[r.idTensor]}case"TensorListPopBack":{const n=y("tensorListId",e,t,a),s=y("elementShape",e,t,a),r=y("elementDType",e,t,a);return[a.getTensorList(n.id).popBack(s,r)]}case"TensorListSplit":{const n=y("tensor",e,t,a),s=y("elementShape",e,t,a),r=function(e,t,a){let n=0;const s=t.map((e=>(n+=e,n)));if(n!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${e.shape}`);const r=se(e.shape.slice(1),a),p=0===n?0:e.size/n,u=(0,m.t)((()=>{const a=[];e=(0,o.r)(e,[1,n,p]);for(let n=0;n<t.length;++n){const m=[0,0===n?0:s[n-1],0],u=[1,t[n],p];a[n]=(0,o.r)((0,i.c)(e,m,u),r)}return e.dispose(),a})),d=new oe([],a,e.dtype,t.length);for(let e=0;e<u.length;e++)d.setItem(e,u[e]);return d}(n,y("lengths",e,t,a),s);return a.addTensorList(r),[r.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a);case"convolution":return(0,m.t)((()=>((e,t,a)=>{switch(e.op){case"Conv1D":{const n=y("stride",e,t,a),s=y("pad",e,t,a),r=y("dataFormat",e,t,a).toUpperCase(),o=y("dilation",e,t,a);return[(0,i.ad)(y("x",e,t,a),y("filter",e,t,a),n,s,r,o)]}case"Conv2D":{const n=y("strides",e,t,a),s=g(e,t,a),r=y("dataFormat",e,t,a).toUpperCase(),o=y("dilations",e,t,a);return[(0,i.ac)(y("x",e,t,a),y("filter",e,t,a),[n[1],n[2]],s,r,[o[1],o[2]])]}case"_FusedConv2D":{const{stride:n,pad:s,dataFormat:r,dilations:o,biasArg:p,preluArg:m,activationFunc:u,leakyreluAlpha:d}=pe(e,t,a);return[(0,i.ab)({x:y("x",e,t,a),filter:y("filter",e,t,a),strides:[n[1],n[2]],pad:s,dataFormat:r,dilations:[o[1],o[2]],bias:p,activation:u,preluActivationWeights:m,leakyreluAlpha:d})]}case"FusedDepthwiseConv2dNative":{const{stride:n,pad:s,dataFormat:r,dilations:o,biasArg:p,preluArg:m,activationFunc:u,leakyreluAlpha:d}=pe(e,t,a);return[(0,i.aa)({x:y("x",e,t,a),filter:y("filter",e,t,a),strides:[n[1],n[2]],pad:s,dataFormat:r,dilations:[o[1],o[2]],bias:p,activation:u,preluActivationWeights:m,leakyreluAlpha:d})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const n=y("outputShape",e,t,a),s=y("strides",e,t,a),r=g(e,t,a);return[(0,i.a9)(y("x",e,t,a),y("filter",e,t,a),n,[s[1],s[2]],r)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const n=y("strides",e,t,a),s=g(e,t,a),r=y("dilations",e,t,a),o=y("dataFormat",e,t,a).toUpperCase();return[(0,i.a8)(y("input",e,t,a),y("filter",e,t,a),[n[1],n[2]],s,o,[r[1],r[2]])]}case"Conv3D":{const n=y("strides",e,t,a),s=y("pad",e,t,a),r=y("dataFormat",e,t,a).toUpperCase(),o=y("dilations",e,t,a);return[(0,i.a7)(y("x",e,t,a),y("filter",e,t,a),[n[1],n[2],n[3]],s,r,[o[1],o[2],o[3]])]}case"AvgPool":{const n=y("strides",e,t,a),s=y("pad",e,t,a),r=y("kernelSize",e,t,a);return[(0,i.a6)(y("x",e,t,a),[r[1],r[2]],[n[1],n[2]],s)]}case"MaxPool":{const n=y("strides",e,t,a),s=y("pad",e,t,a),r=y("kernelSize",e,t,a);return[(0,i.a5)(y("x",e,t,a),[r[1],r[2]],[n[1],n[2]],s)]}case"MaxPoolWithArgmax":{const n=y("strides",e,t,a),s=y("pad",e,t,a),r=y("kernelSize",e,t,a),o=y("includeBatchInIndex",e,t,a),{result:p,indexes:m}=(0,i.a4)(y("x",e,t,a),[r[1],r[2]],[n[1],n[2]],s,o);return[p,m]}case"AvgPool3D":{const n=y("strides",e,t,a),s=y("pad",e,t,a),r=y("kernelSize",e,t,a);return[(0,i.a3)(y("x",e,t,a),[r[1],r[2],r[3]],[n[1],n[2],n[3]],s)]}case"MaxPool3D":{const n=y("strides",e,t,a),s=y("pad",e,t,a),r=y("kernelSize",e,t,a);return[(0,i.a2)(y("x",e,t,a),[r[1],r[2],r[3]],[n[1],n[2],n[3]],s)]}case"Dilation2D":{const n=y("strides",e,t,a),s=y("pad",e,t,a),r=y("dilations",e,t,a),o=n[1],p=n[2],m=r[1],u=r[2];return[(0,i.a1)(y("x",e,t,a),y("filter",e,t,a),[o,p],s,[m,u],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a)));case"creation":return(0,m.t)((()=>((e,t,a)=>{switch(e.op){case"Fill":{const n=y("shape",e,t,a),s=y("dtype",e,t,a),r=y("value",e,t,a);return[(0,i.an)(n,r,s)]}case"LinSpace":{const n=y("start",e,t,a),s=y("stop",e,t,a),r=y("num",e,t,a);return[(0,i.am)(n,s,r)]}case"Multinomial":{const n=y("logits",e,t,a),s=y("numSamples",e,t,a),r=y("seed",e,t,a);return[(0,i.al)(n,s,r)]}case"OneHot":{const n=y("indices",e,t,a),s=y("depth",e,t,a),r=y("onValue",e,t,a),o=y("offValue",e,t,a);return[(0,i.ak)(n,s,r,o)]}case"Ones":return[(0,i.aj)(y("shape",e,t,a),y("dtype",e,t,a))];case"OnesLike":return[(0,i.ai)(y("x",e,t,a))];case"RandomUniform":return[(0,i.ah)(y("shape",e,t,a),y("minval",e,t,a),y("maxval",e,t,a),y("dtype",e,t,a))];case"Range":{const n=y("start",e,t,a),s=y("stop",e,t,a),r=y("step",e,t,a);return[(0,i.ag)(n,s,r,y("dtype",e,t,a))]}case"TruncatedNormal":{const n=y("shape",e,t,a),s=y("mean",e,t,a),r=y("stdDev",e,t,a),o=y("seed",e,t,a);return[(0,i.af)(n,s,r,y("dtype",e,t,a),o)]}case"Zeros":return[(0,m.z)(y("shape",e,t,a),y("dtype",e,t,a))];case"ZerosLike":return[(0,i.ae)(y("x",e,t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a)));case"dynamic":return(async(e,t,a)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:n,scores:s,maxOutputSize:r,iouThreshold:o,scoreThreshold:p,softNmsSigma:m}=ie(e,t,a),u=await i.i.nonMaxSuppressionWithScoreAsync(n,s,r,o,p,m);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:n,scores:s,maxOutputSize:r,iouThreshold:o,scoreThreshold:p}=ie(e,t,a),m=y("padToMaxOutputSize",e,t,a),u=await i.i.nonMaxSuppressionPaddedAsync(n,s,r,o,p,m);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:n,scores:s,maxOutputSize:r,iouThreshold:o,scoreThreshold:p}=ie(e,t,a);return[await i.i.nonMaxSuppressionAsync(n,s,r,o,p)]}case"Where":{const n=(0,o.c)(y("condition",e,t,a),"bool"),s=[await(0,i.ap)(n)];return n.dispose(),s}case"ListDiff":return(0,i.ao)(y("x",e,t,a),y("y",e,t,a));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a);case"evaluation":return(0,m.t)((()=>((e,t,a)=>{switch(e.op){case"TopKV2":{const n=y("x",e,t,a),s=y("k",e,t,a),r=y("sorted",e,t,a),o=(0,i.ar)(n,s,r);return[o.values,o.indices]}case"Unique":{const n=y("x",e,t,a),s=(0,i.aq)(n);return[s.values,s.indices]}case"UniqueV2":{const n=y("x",e,t,a),s=y("axis",e,t,a),r=(0,i.aq)(n,s);return[r.values,r.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a)));case"image":return(0,m.t)((()=>((e,t,a)=>{switch(e.op){case"ResizeBilinear":{const n=y("images",e,t,a),s=y("size",e,t,a),r=y("alignCorners",e,t,a),o=y("halfPixelCenters",e,t,a);return[i.i.resizeBilinear(n,[s[0],s[1]],r,o)]}case"ResizeNearestNeighbor":{const n=y("images",e,t,a),s=y("size",e,t,a),r=y("alignCorners",e,t,a),o=y("halfPixelCenters",e,t,a);return[i.i.resizeNearestNeighbor(n,[s[0],s[1]],r,o)]}case"CropAndResize":{const n=y("image",e,t,a),s=y("boxes",e,t,a),r=y("boxInd",e,t,a),o=y("cropSize",e,t,a),p=y("method",e,t,a),m=y("extrapolationValue",e,t,a);return[i.i.cropAndResize(n,s,r,o,p,m)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a)));case"graph":return(0,m.t)((()=>((e,t,a)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const n=y("default",e,t,a);return[l(e.name,t,a)||n];case"Placeholder":return[l(e.name,t,a)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[T(y("x",e,t,a))];case"IdentityN":return y("x",e,t,a).map((e=>T(e)));case"Shape":return[(0,i.t)(y("x",e,t,a).shape,"int32")];case"ShapeN":return y("x",e,t,a).map((e=>(0,i.t)(e.shape)));case"Size":return[(0,m.s)(y("x",e,t,a).size,"int32")];case"Rank":return[(0,m.s)(y("x",e,t,a).rank,"int32")];case"NoOp":return[(0,m.s)(1)];case"Print":const s=y("x",e,t,a),r=y("data",e,t,a),o=y("message",e,t,a),p=y("summarize",e,t,a);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let e=0;e<r.length;e++)console.log(Array.prototype.slice.call(r[e].dataSync()).slice(0,p));return[s];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a)));case"logical":return(0,m.t)((()=>((e,t,a)=>{switch(e.op){case"Equal":return[(0,i.aB)(y("a",e,t,a),y("b",e,t,a))];case"NotEqual":return[(0,i.aA)(y("a",e,t,a),y("b",e,t,a))];case"Greater":return[(0,i.az)(y("a",e,t,a),y("b",e,t,a))];case"GreaterEqual":return[(0,i.ay)(y("a",e,t,a),y("b",e,t,a))];case"Less":return[(0,i.ax)(y("a",e,t,a),y("b",e,t,a))];case"LessEqual":return[(0,i.aw)(y("a",e,t,a),y("b",e,t,a))];case"LogicalAnd":return[(0,i.av)(y("a",e,t,a),y("b",e,t,a))];case"LogicalNot":return[(0,i.au)(y("a",e,t,a))];case"LogicalOr":return[(0,i.at)(y("a",e,t,a),y("b",e,t,a))];case"Select":case"SelectV2":return[(0,i.as)(y("condition",e,t,a),y("a",e,t,a),y("b",e,t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a)));case"matrices":return(0,m.t)((()=>((e,t,a)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[(0,i.aF)(y("a",e,t,a),y("b",e,t,a),y("transposeA",e,t,a),y("transposeB",e,t,a))];case"Einsum":return[(0,i.aE)(y("equation",e,t,a),...y("tensors",e,t,a))];case"Transpose":return[(0,i.aD)(y("x",e,t,a),y("perm",e,t,a))];case"_FusedMatMul":const[n,s]=y("fusedOps",e,t,a),r="biasadd"===n,o="prelu"===s,p=y("numArgs",e,t,a),m=y("leakyreluAlpha",e,t,a);if(r){if(o&&2!==p)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==p)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,d]=y("args",e,t,a);return[(0,i.aC)({a:y("a",e,t,a),b:y("b",e,t,a),transposeA:y("transposeA",e,t,a),transposeB:y("transposeB",e,t,a),bias:u,activation:s,preluActivationWeights:d,leakyreluAlpha:m})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a)));case"normalization":return(0,m.t)((()=>((e,t,a)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[(0,i.aK)(y("x",e,t,a),y("mean",e,t,a),y("variance",e,t,a),y("offset",e,t,a),y("scale",e,t,a),y("epsilon",e,t,a))];case"LRN":return[(0,i.aJ)(y("x",e,t,a),y("radius",e,t,a),y("bias",e,t,a),y("alpha",e,t,a),y("beta",e,t,a))];case"Softmax":return[(0,i.aI)(y("x",e,t,a))];case"LogSoftmax":return[(0,i.aH)(y("x",e,t,a))];case"SparseToDense":return[(0,i.aG)(y("sparseIndices",e,t,a),y("outputShape",e,t,a),y("sparseValues",e,t,a),y("defaultValue",e,t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a)));case"reduction":return(0,m.t)((()=>((e,t,a)=>{switch(e.op){case"Max":{const n=y("axis",e,t,a),s=y("keepDims",e,t,a);return[(0,i.aU)(y("x",e,t,a),n,s)]}case"Mean":{const n=y("axis",e,t,a),s=y("keepDims",e,t,a);return[(0,i.aT)(y("x",e,t,a),n,s)]}case"Min":{const n=y("axis",e,t,a),s=y("keepDims",e,t,a);return[(0,i.aS)(y("x",e,t,a),n,s)]}case"Sum":{const n=y("axis",e,t,a),s=y("keepDims",e,t,a);return[(0,o.h)(y("x",e,t,a),n,s)]}case"All":{const n=y("axis",e,t,a),s=y("keepDims",e,t,a);return[(0,i.aR)(y("x",e,t,a),n,s)]}case"Any":{const n=y("axis",e,t,a),s=y("keepDims",e,t,a);return[(0,i.aQ)(y("x",e,t,a),n,s)]}case"ArgMax":{const n=y("axis",e,t,a);return[(0,i.aP)(y("x",e,t,a),n)]}case"ArgMin":{const n=y("axis",e,t,a);return[(0,i.aO)(y("x",e,t,a),n)]}case"Prod":{const n=y("axis",e,t,a),s=y("keepDims",e,t,a);return[(0,i.v)(y("x",e,t,a),n,s)]}case"Cumsum":{const n=y("axis",e,t,a),s=y("exclusive",e,t,a),r=y("reverse",e,t,a);return[(0,i.aN)(y("x",e,t,a),n,s,r)]}case"Bincount":const n=y("x",e,t,a),s=y("weights",e,t,a),r=y("size",e,t,a);return[(0,i.aM)(n,s,r)];case"DenseBincount":{const n=y("x",e,t,a),s=y("weights",e,t,a),r=y("size",e,t,a),o=y("binaryOutput",e,t,a);return[(0,i.aL)(n,s,r,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a)));case"slice_join":return(0,m.t)((()=>((e,t,a)=>{switch(e.op){case"ConcatV2":case"Concat":{const n=y("n",e,t,a),s=y("axis",e,t,a);let r=y("tensors",e,t,a);return r=r.slice(0,n),[(0,i.h)(r,s)]}case"Gather":{const n=y("x",e,t,a),s=y("indices",e,t,a);return[(0,i.a$)(n,(0,o.c)(s,"int32"),0)]}case"GatherV2":{const n=y("axis",e,t,a),s=y("batchDims",e,t,a),r=y("x",e,t,a),p=y("indices",e,t,a);return[(0,i.a$)(r,(0,o.c)(p,"int32"),n,s)]}case"Reverse":{const n=y("dims",e,t,a),s=[];for(let e=0;e<n.length;e++)n[e]&&s.push(e);const r=y("x",e,t,a);return[(0,i.a_)(r,s)]}case"ReverseV2":{const n=y("axis",e,t,a),s=y("x",e,t,a);return[(0,i.a_)(s,n)]}case"Slice":{const n=y("begin",e,t,a),s=y("size",e,t,a);return[(0,i.c)(y("x",e,t,a),n,s)]}case"StridedSlice":{const n=y("begin",e,t,a),s=y("end",e,t,a),r=y("strides",e,t,a),o=y("beginMask",e,t,a),p=y("endMask",e,t,a),m=y("ellipsisMask",e,t,a),u=y("newAxisMask",e,t,a),d=y("shrinkAxisMask",e,t,a),c=y("x",e,t,a);return[(0,i.aZ)(c,n,s,r,o,p,m,u,d)]}case"Pack":return(0,m.t)((()=>{const n=y("axis",e,t,a),s=y("tensors",e,t,a),r=s[0].shape,m=(0,i.s)(s[0]).shape,u=s.map((e=>{const t=(0,p.b)(e.shape,r);if(!t&&!(0,p.b)((0,i.s)(e).shape,m))throw new Error("the input tensors shape does not match");return t?e:(0,o.r)(e,r)}));return[(0,i.$)(u,n)]}));case"Unpack":{const n=y("axis",e,t,a),s=y("tensor",e,t,a);return(0,i.a0)(s,n)}case"Tile":{const n=y("reps",e,t,a);return[(0,i.aY)(y("x",e,t,a),n)]}case"Split":case"SplitV":{const n=y("axis",e,t,a),s=y("numOrSizeSplits",e,t,a),r=y("x",e,t,a);return(0,i.aX)(r,s,n)}case"ScatterNd":{const n=y("indices",e,t,a),s=y("values",e,t,a),r=y("shape",e,t,a);return[(0,i.aW)(n,s,r)]}case"GatherNd":{const n=y("x",e,t,a),s=y("indices",e,t,a);return[(0,i.aV)(n,s)]}case"SparseToDense":{const n=y("sparseIndices",e,t,a),s=y("outputShape",e,t,a),r=y("sparseValues",e,t,a),p=y("defaultValue",e,t,a);return[(0,i.aG)(n,r,s,r.dtype===p.dtype?p:(0,o.c)(p,r.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a)));case"sparse":return(0,m.t)((()=>((e,t,a)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:n,outputValues:s,emptyRowIndicator:r,reverseIndexMap:o}=i.b0.sparseFillEmptyRows(y("indices",e,t,a),y("values",e,t,a),y("denseShape",e,t,a),y("defaultValue",e,t,a));return[n,s,r,o]}case"SparseReshape":{const{outputIndices:n,outputShape:s}=i.b0.sparseReshape(y("inputIndices",e,t,a),y("inputShape",e,t,a),y("newShape",e,t,a));return[n,s]}case"SparseSegmentMean":return[i.b0.sparseSegmentMean(y("data",e,t,a),y("indices",e,t,a),y("segmentIds",e,t,a))];case"SparseSegmentSum":return[i.b0.sparseSegmentSum(y("data",e,t,a),y("indices",e,t,a),y("segmentIds",e,t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a)));case"spectral":return(0,m.t)((()=>((e,t,a)=>{switch(e.op){case"FFT":return[(0,i.b4)(y("x",e,t,a))];case"IFFT":return[(0,i.b3)(y("x",e,t,a))];case"RFFT":return[(0,i.b2)(y("x",e,t,a))];case"IRFFT":return[(0,i.b1)(y("x",e,t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a)));case"string":return(0,m.t)((()=>((e,t,a)=>{switch(e.op){case"StringNGrams":{const{nGrams:n,nGramsSplits:s}=i.b5.stringNGrams(y("data",e,t,a),y("dataSplits",e,t,a),y("separator",e,t,a),y("nGramWidths",e,t,a),y("leftPad",e,t,a),y("rightPad",e,t,a),y("padWidth",e,t,a),y("preserveShortSequences",e,t,a));return[n,s]}case"StringSplit":{const{indices:n,values:s,shape:r}=i.b5.stringSplit(y("input",e,t,a),y("delimiter",e,t,a),y("skipEmpty",e,t,a));return[n,s,r]}case"StringToHashBucketFast":return[i.b5.stringToHashBucketFast(y("input",e,t,a),y("numBuckets",e,t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a)));case"transformation":return(0,m.t)((()=>((e,t,a)=>{switch(e.op){case"Cast":return[(0,o.c)(y("x",e,t,a),y("dtype",e,t,a))];case"ExpandDims":{const n=y("axis",e,t,a);return[(0,i.e)(y("x",e,t,a),n)]}case"Squeeze":{const n=y("axis",e,t,a);return[(0,i.s)(y("x",e,t,a),n)]}case"Reshape":return[(0,o.r)(y("x",e,t,a),y("shape",e,t,a))];case"MirrorPad":return[(0,i.bc)(y("x",e,t,a),y("padding",e,t,a),y("mode",e,t,a))];case"PadV2":case"Pad":return[(0,i.bb)(y("x",e,t,a),y("padding",e,t,a),y("constantValue",e,t,a))];case"SpaceToBatchND":{const n=y("blockShape",e,t,a),s=y("paddings",e,t,a);return[(0,i.ba)(y("x",e,t,a),n,s)]}case"BatchToSpaceND":{const n=y("blockShape",e,t,a),s=y("crops",e,t,a);return[(0,i.b9)(y("x",e,t,a),n,s)]}case"DepthToSpace":{const n=y("blockSize",e,t,a),s=y("dataFormat",e,t,a).toUpperCase();return[(0,i.b8)(y("x",e,t,a),n,s)]}case"BroadcastTo":return[(0,i.b7)(y("x",e,t,a),y("shape",e,t,a))];case"BroadcastArgs":return[(0,i.b6)(y("s0",e,t,a),y("s1",e,t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a)));case"hash_table":return(async(e,t,a,n)=>{switch(e.op){case"HashTable":case"HashTableV2":{const s=y("keyDType",e,t,a),r=y("valueDType",e,t,a),o=new me(s,r);return n.addHashTable(e.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=y("tableHandle",e,t,a,n),r=y("keys",e,t,a),o=y("values",e,t,a),p=n.getHashTableById(s.id);return[await p.import(r,o)]}case"LookupTableFind":case"LookupTableFindV2":{const s=y("tableHandle",e,t,a,n),r=y("keys",e,t,a),o=y("defaultValue",e,t,a),p=n.getHashTableById(s.id);return[await p.find(r,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const s=y("tableHandle",e,t,a,n);return[n.getHashTableById(s.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a,n);case"custom":const s=c(e.op);if(s&&s.customExecutor)return s.customExecutor(new ee(e,t,a));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,a);return(0,p.i)(s)?s.then((e=>[].concat(e))):[].concat(s)}class de{constructor(e={},t={},a={},n={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=a,this.functionMap=n,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const a=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(a))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function ce(e,t,a,n){const s=new Set,r=[];let o=null,p=null;const i=new Set,m=Object.keys(e).map((e=>N(e)[0]));let u=[];null!=n&&(u=n.map((e=>N(e.name)[0])));const d=[...t];for(;d.length>0;){const e=d.pop();(fe(e)||Ne(e)||ge(e))&&null==o&&(o=e,p=o.children.map((e=>e.name)).filter((e=>s.has(e)))),s.add(e.name),null==a[e.name]&&-1===m.indexOf(e.name)&&-1===u.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{i.has(e.name)||(i.add(e.name),d.push(e))})):r.push(e.name))}return{inputs:e,outputs:t,usedNodes:s,missingInputs:r,dynamicNode:o,syncInputs:p}}const ye=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],le=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],he=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function fe(e){return ye.indexOf(e.op)>=0}function Ne(e){return le.indexOf(e.op)>=0}function ge(e){return he.indexOf(e.op)>=0}class Te{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new Te(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const a=e.map((e=>e.name)).sort(),n=t.map((e=>e.name)).sort();return a.join(this.SEPERATOR)+"--"+n.join(this.SEPERATOR)}compile(e,t){const a=ce(e,t,this.weightMap,this._initNodes),{missingInputs:n,dynamicNode:s,syncInputs:r}=a;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${r}]`);if(n.length>0){const a=t.map((e=>e.name)),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${a}] from the provided inputs [${s}]. Missing the following inputs: [${n}]`)}return function(e,t,a){const{usedNodes:n,inputs:s}=a,r=[],o=Object.keys(s).map((e=>N(e)[0])).map((t=>e.nodes[t])),p=e.initNodes;o.forEach((e=>{n.has(e.name)&&r.push(e)})),e.weights.forEach((e=>{n.has(e.name)&&r.push(e)})),null!=p&&p.forEach((e=>{n.has(e.name)&&r.push(e)}));const i=new Set,m=[];for(;r.length>0;){const e=r.pop();i.add(e.name),t[e.name]||m.push(e),e.children.forEach((e=>{!i.has(e.name)&&n.has(e.name)&&e.inputs.every((e=>i.has(e.name)))&&r.push(e)}))}return m}(this.graph,this.weightMap,a)}execute(e,t){e=this.mapInputs(e);const a=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const n=a.map((e=>this.graph.nodes[N(e)[0]])),s=t.map((e=>N(e)[0]));let r=s.map((e=>this.graph.nodes[e]));this.resetIntermediateTensors(),0===r.length&&(r=this._outputs);const o=this.getCompilationKey(n,r);let i=this.compiledMap.get(o);null==i&&(i=this.compile(e,r),this.compiledMap.set(o,i));const u={},d={};return(0,m.t)((()=>{const a=new de(this.weightMap,u,d,this.functionExecutorMap),n=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[a,s]=N(t),r=[];r[s]=e[t],n[a]=r}));const r=this.getFrozenTensorIds(n),o={};for(let e=0;e<i.length;e++){const t=i[e];if(!n[t.name]){const e=ue(t,n,a,this._resourceManager);if((0,p.i)(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);n[t.name]=e,this.checkTensorForDisposal(t.name,t,n,a,r,s,o)}}return null==this.parent&&a.dispose(r),t.map((e=>l(e,n,a)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,a,n,s,r,o){"control"!==t.category&&-1===r.indexOf(e)&&(a[e].forEach((e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const r=function(e,t,a){return t[f(e,a.currentContextId)]}(e.name,a,n);null!=r&&r.forEach((e=>{if(e&&!e.kept&&!s.has(e.id)){const a=o[e.id];if(1===a){if(this.keepTensorForDebug){const[a,s]=h(t.name,n);this.intermediateTensors[a]||(this.intermediateTensors[a]=[]),this.intermediateTensors[a][s]=e}else e.dispose();delete o[e.id]}else null!=a&&o[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach((e=>this.intermediateTensors[e].forEach((e=>e.dispose())))),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach((e=>{this.tensorsMap[e].forEach((e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()}))}))}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach((e=>e.dispose())),delete this.intermediateTensors[e]}async _executeAsync(e,t,a=!1,n={},s={}){a||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=(0,o.e)().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){console.warn(e.message)}this.resetIntermediateTensors();const r=new de(this.weightMap,n,s,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,r,t,a);const p=t.map((e=>l(e,this.tensorsMap,r))),i=p.map((e=>e.id)),m=Object.keys(e).map((t=>e[t].id));return this.keepIds=new Set([...i,...m,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&r.dispose(this.keepIds),p}async executeFunctionAsync(e,t,a){const n=e.reduce(((e,t,a)=>(e[this.inputs[a].name]=t,e)),{});return this._executeAsync(n,this.outputNodes,!0,t,a)}async executeWithControlFlow(e,t,a,n){const s=Object.keys(e),r=s.map((e=>this.graph.nodes[N(e)[0]])),o=a.map((e=>N(e)[0]));let p=o.map((e=>this.graph.nodes[e]));0===p.length&&(p=this._outputs);const{usedNodes:i,missingInputs:m,dynamicNode:u,syncInputs:d}=ce(e,p,this.weightMap,this._initNodes),c=[...r,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),y=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[a,n]=N(t),s=[];s[n]=e[t],y[a]=s}));const h={},f=this.getFrozenTensorIds(y),g={};for(;c.length>0;){const e=this.processStack(r,c,t,y,g,f,o,h,i);await Promise.all(e)}null!=u||n||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const T=p.filter((e=>!fe(e)&&!l(e.name,y,t))).map((e=>e.name));if(T.length>0){let e="";throw null!=u&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${d}]`),new Error(`Cannot compute the outputs [${T}] from the provided inputs [${s}]. Consider providing the following inputs: [${m}]. ${e}`)}return y}processStack(e,t,a,n,s,r,o,i,m){const u=[];for(;t.length>0;){const e=t.pop();a.currentContext=e.contexts;let d="";if("Enter"===e.node.op&&y("isConstant",e.node,n,a)&&([d]=h(e.node.name,a)),null==n[e.node.name]){const c=ue(e.node,n,a,this._resourceManager);d||([d]=h(e.node.name,a));const y=a.currentContext;(0,p.i)(c)?u.push(c.then((p=>(n[d]=p,a.currentContext=y,this.checkTensorForDisposal(d,e.node,n,a,r,o,i),this.processChildNodes(e.node,t,a,n,s,m),p)))):(n[d]=c,this.checkTensorForDisposal(d,e.node,n,a,r,o,i),this.processChildNodes(e.node,t,a,n,s,m))}else this.processChildNodes(e.node,t,a,n,s,m)}return u}processChildNodes(e,t,a,n,s,r){e.children.forEach((e=>{const[o]=h(e.name,a);!s[o]&&r.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!l(e,n,a)))&&(s[o]=!0,t.push({contexts:a.currentContext,node:e})):e.inputNames.every((e=>!!l(e,n,a)))&&(s[o]=!0,t.push({contexts:a.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const a=e[t],[n]=N(t),s=this.graph.nodes[n];if(s.attrParams.shape&&s.attrParams.shape.value){const e=s.attrParams.shape.value,t=e.length===a.shape.length&&a.shape.every(((t,a)=>-1===e[a]||e[a]===t));(0,p.a)(t,(()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${e}], but was [${a.shape}]`))}s.attrParams.dtype&&s.attrParams.dtype.value&&(0,p.a)(a.dtype===s.attrParams.dtype.value,(()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${a.dtype}`))}))}mapInputs(e){const t={};for(const a in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[a]?t[this._signature.inputs[a].name]=e[a]:t[a]=e[a];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=N(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]?this._signature.outputs[e].name:e),{})}checkOutputs(e){e.forEach((e=>{const[t]=N(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class be{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class xe{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new be}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=(0,u.b)(e,this.loadOptions);else{const t=(0,r.g)(e,this.loadOptions);if(0===t.length)t.push((0,u.b)(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let a;a=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=a,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const n=(0,r.d)(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new Te(R.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(n),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=R.Instance.transformGraph(e.modelInitializer);this.initializer=new Te(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=(0,r.a)(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof o.T||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,a,n)=>(t[a]=e[n],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const a=this.executor.execute(e,t);return a.length>1?a:a[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const a=await this.executor.executeAsync(e,t);return a.length>1?a:a[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,a)=>(t[a]=[e[a]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function _e(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}model.json?tfjs-format=file`);const a=new xe(e,t);return await a.load(),a}}}]);